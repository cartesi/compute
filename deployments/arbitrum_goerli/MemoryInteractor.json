{
  "address": "0x7608A74e44dC833a99797EA09AA3498aF20EbFd1",
  "abi": [
    {
      "inputs": [],
      "name": "getRWIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64[]",
          "name": "_rwPositions",
          "type": "uint64[]"
        },
        {
          "internalType": "bytes8[]",
          "name": "_rwValues",
          "type": "bytes8[]"
        },
        {
          "internalType": "bool[]",
          "name": "_isRead",
          "type": "bool[]"
        }
      ],
      "name": "initializeMemory",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "_readAddress",
          "type": "uint64"
        }
      ],
      "name": "memoryRead",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "_writeAddress",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "_value",
          "type": "uint64"
        }
      ],
      "name": "memoryWrite",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "readClintMtimecmp",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "readHtifFromhost",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "readHtifIYield",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "readHtifTohost",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "readIflags",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "readIflagsH",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "readIflagsPrv",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "readIflagsX",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "readIflagsY",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "readIlrsc",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "readMarchid",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "readMcause",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "readMcounteren",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "readMcycle",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "readMedeleg",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "paddr",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "wordSize",
          "type": "uint64"
        }
      ],
      "name": "readMemory",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "readMepc",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "readMideleg",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "readMie",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "readMimpid",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "readMinstret",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "readMip",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "readMisa",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "readMscratch",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "readMstatus",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "readMtval",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "readMtvec",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "readMvendorid",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "readPc",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "readSatp",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "readScause",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "readScounteren",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "readSepc",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "readSscratch",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "readStval",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "readStvec",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "registerIndex",
          "type": "uint64"
        }
      ],
      "name": "readX",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "mask",
          "type": "uint64"
        }
      ],
      "name": "resetMip",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "halt",
          "type": "bool"
        }
      ],
      "name": "setIflagsH",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "isAutomaticYield",
          "type": "bool"
        }
      ],
      "name": "setIflagsX",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "isManualYield",
          "type": "bool"
        }
      ],
      "name": "setIflagsY",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "mask",
          "type": "uint64"
        }
      ],
      "name": "setMip",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "newPriv",
          "type": "uint64"
        }
      ],
      "name": "setPriv",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "value",
          "type": "uint64"
        }
      ],
      "name": "writeClintMtimecmp",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "value",
          "type": "uint64"
        }
      ],
      "name": "writeHtifFromhost",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "value",
          "type": "uint64"
        }
      ],
      "name": "writeHtifTohost",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "newPriv",
          "type": "uint64"
        }
      ],
      "name": "writeIflagsPrv",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "value",
          "type": "uint64"
        }
      ],
      "name": "writeIlrsc",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "value",
          "type": "uint64"
        }
      ],
      "name": "writeMcause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "value",
          "type": "uint64"
        }
      ],
      "name": "writeMcounteren",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "value",
          "type": "uint64"
        }
      ],
      "name": "writeMcycle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "value",
          "type": "uint64"
        }
      ],
      "name": "writeMedeleg",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "paddr",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "value",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "wordSize",
          "type": "uint64"
        }
      ],
      "name": "writeMemory",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "value",
          "type": "uint64"
        }
      ],
      "name": "writeMepc",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "value",
          "type": "uint64"
        }
      ],
      "name": "writeMideleg",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "value",
          "type": "uint64"
        }
      ],
      "name": "writeMie",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "value",
          "type": "uint64"
        }
      ],
      "name": "writeMinstret",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "value",
          "type": "uint64"
        }
      ],
      "name": "writeMip",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "value",
          "type": "uint64"
        }
      ],
      "name": "writeMscratch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "value",
          "type": "uint64"
        }
      ],
      "name": "writeMstatus",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "value",
          "type": "uint64"
        }
      ],
      "name": "writeMtval",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "value",
          "type": "uint64"
        }
      ],
      "name": "writeMtvec",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "value",
          "type": "uint64"
        }
      ],
      "name": "writePc",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "value",
          "type": "uint64"
        }
      ],
      "name": "writeSatp",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "value",
          "type": "uint64"
        }
      ],
      "name": "writeScause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "value",
          "type": "uint64"
        }
      ],
      "name": "writeScounteren",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "value",
          "type": "uint64"
        }
      ],
      "name": "writeSepc",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "value",
          "type": "uint64"
        }
      ],
      "name": "writeSscratch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "value",
          "type": "uint64"
        }
      ],
      "name": "writeStval",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "value",
          "type": "uint64"
        }
      ],
      "name": "writeStvec",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "registerindex",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "value",
          "type": "uint64"
        }
      ],
      "name": "writeX",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x5c792ae5649e3de546498f2436849e1b92be08eefcbb70e65033fde548113449",
  "receipt": {
    "to": null,
    "from": "0xD63A9d27E7A573e28889A363310443Cba076D546",
    "contractAddress": "0x7608A74e44dC833a99797EA09AA3498aF20EbFd1",
    "transactionIndex": 1,
    "gasUsed": "2669417",
    "logsBloom": "0x
    "blockHash": "0xf0318f90c51df550c3a4917b4173793dee18f54302a59a19480c67f8a20d48d8",
    "transactionHash": "0x5c792ae5649e3de546498f2436849e1b92be08eefcbb70e65033fde548113449",
    "logs": [],
    "blockNumber": 310199,
    "cumulativeGasUsed": "2669417",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "metadata": "{\"compiler\":{\"version\":\"0.7.4+commit.3f05b770\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"getRWIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64[]\",\"name\":\"_rwPositions\",\"type\":\"uint64[]\"},{\"internalType\":\"bytes8[]\",\"name\":\"_rwValues\",\"type\":\"bytes8[]\"},{\"internalType\":\"bool[]\",\"name\":\"_isRead\",\"type\":\"bool[]\"}],\"name\":\"initializeMemory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_readAddress\",\"type\":\"uint64\"}],\"name\":\"memoryRead\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_writeAddress\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_value\",\"type\":\"uint64\"}],\"name\":\"memoryWrite\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"readClintMtimecmp\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"readHtifFromhost\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"readHtifIYield\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"readHtifTohost\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"readIflags\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"readIflagsH\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"readIflagsPrv\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"readIflagsX\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"readIflagsY\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"readIlrsc\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"readMarchid\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"readMcause\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"readMcounteren\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"readMcycle\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"readMedeleg\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"paddr\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"wordSize\",\"type\":\"uint64\"}],\"name\":\"readMemory\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"readMepc\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"readMideleg\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"readMie\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"readMimpid\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"readMinstret\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"readMip\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"readMisa\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"readMscratch\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"readMstatus\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"readMtval\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"readMtvec\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"readMvendorid\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"readPc\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"readSatp\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"readScause\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"readScounteren\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"readSepc\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"readSscratch\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"readStval\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"readStvec\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"registerIndex\",\"type\":\"uint64\"}],\"name\":\"readX\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"mask\",\"type\":\"uint64\"}],\"name\":\"resetMip\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"halt\",\"type\":\"bool\"}],\"name\":\"setIflagsH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"isAutomaticYield\",\"type\":\"bool\"}],\"name\":\"setIflagsX\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"isManualYield\",\"type\":\"bool\"}],\"name\":\"setIflagsY\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"mask\",\"type\":\"uint64\"}],\"name\":\"setMip\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"newPriv\",\"type\":\"uint64\"}],\"name\":\"setPriv\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"value\",\"type\":\"uint64\"}],\"name\":\"writeClintMtimecmp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"value\",\"type\":\"uint64\"}],\"name\":\"writeHtifFromhost\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"value\",\"type\":\"uint64\"}],\"name\":\"writeHtifTohost\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"newPriv\",\"type\":\"uint64\"}],\"name\":\"writeIflagsPrv\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"value\",\"type\":\"uint64\"}],\"name\":\"writeIlrsc\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"value\",\"type\":\"uint64\"}],\"name\":\"writeMcause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"value\",\"type\":\"uint64\"}],\"name\":\"writeMcounteren\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"value\",\"type\":\"uint64\"}],\"name\":\"writeMcycle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"value\",\"type\":\"uint64\"}],\"name\":\"writeMedeleg\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"paddr\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"value\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"wordSize\",\"type\":\"uint64\"}],\"name\":\"writeMemory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"value\",\"type\":\"uint64\"}],\"name\":\"writeMepc\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"value\",\"type\":\"uint64\"}],\"name\":\"writeMideleg\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"value\",\"type\":\"uint64\"}],\"name\":\"writeMie\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"value\",\"type\":\"uint64\"}],\"name\":\"writeMinstret\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"value\",\"type\":\"uint64\"}],\"name\":\"writeMip\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"value\",\"type\":\"uint64\"}],\"name\":\"writeMscratch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"value\",\"type\":\"uint64\"}],\"name\":\"writeMstatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"value\",\"type\":\"uint64\"}],\"name\":\"writeMtval\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"value\",\"type\":\"uint64\"}],\"name\":\"writeMtvec\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"value\",\"type\":\"uint64\"}],\"name\":\"writePc\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"value\",\"type\":\"uint64\"}],\"name\":\"writeSatp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"value\",\"type\":\"uint64\"}],\"name\":\"writeScause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"value\",\"type\":\"uint64\"}],\"name\":\"writeScounteren\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"value\",\"type\":\"uint64\"}],\"name\":\"writeSepc\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"value\",\"type\":\"uint64\"}],\"name\":\"writeSscratch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"value\",\"type\":\"uint64\"}],\"name\":\"writeStval\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"value\",\"type\":\"uint64\"}],\"name\":\"writeStvec\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"registerindex\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"value\",\"type\":\"uint64\"}],\"name\":\"writeX\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Felipe Argento\",\"details\":\"Every read performed by mi.memoryRead or mi.write should be followed by anendianess swap from little endian to big endian. This is the case becauseEVM is big endian but RiscV is little endian.Reference: riscv-spec-v2.2.pdf - Preface to Version 2.0Reference: Ethereum yellowpaper - Version 69351d5Appendix H. Virtual Machine Specification\",\"kind\":\"dev\",\"methods\":{},\"title\":\"MemoryInteractor\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Bridge between Memory Manager and Step\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/MemoryInteractor.sol\":\"MemoryInteractor\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@cartesi/util/contracts/BitsManipulationLibrary.sol\":{\"content\":\"// Copyright 2020 Cartesi Pte. Ltd.\\n\\n// SPDX-License-Identifier: Apache-2.0\\n// Licensed under the Apache License, Version 2.0 (the \\\"License\\\"); you may not use\\n// this file except in compliance with the License. You may obtain a copy of the\\n// License at http://www.apache.org/licenses/LICENSE-2.0\\n\\n// Unless required by applicable law or agreed to in writing, software distributed\\n// under the License is distributed on an \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR\\n// CONDITIONS OF ANY KIND, either express or implied. See the License for the\\n// specific language governing permissions and limitations under the License.\\n\\n\\npragma solidity ^0.7.0;\\n\\n/// @title Bits Manipulation Library\\n/// @author Felipe Argento / Stephen Chen\\n/// @notice Implements bit manipulation helper functions\\nlibrary BitsManipulationLibrary {\\n\\n    /// @notice Sign extend a shorter signed value to the full int32\\n    /// @param number signed number to be extended\\n    /// @param wordSize number of bits of the signed number, ie, 8 for int8\\n    function int32SignExtension(int32 number, uint32 wordSize)\\n    public pure returns(int32)\\n    {\\n        uint32 uNumber = uint32(number);\\n        bool isNegative = ((uint64(1) << (wordSize - 1)) & uNumber) > 0;\\n        uint32 mask = ((uint32(2) ** wordSize) - 1);\\n\\n        if (isNegative) {\\n            uNumber = uNumber | ~mask;\\n        }\\n\\n        return int32(uNumber);\\n    }\\n\\n    /// @notice Sign extend a shorter signed value to the full uint64\\n    /// @param number signed number to be extended\\n    /// @param wordSize number of bits of the signed number, ie, 8 for int8\\n    function uint64SignExtension(uint64 number, uint64 wordSize)\\n    public pure returns(uint64)\\n    {\\n        uint64 uNumber = number;\\n        bool isNegative = ((uint64(1) << (wordSize - 1)) & uNumber) > 0;\\n        uint64 mask = ((uint64(2) ** wordSize) - 1);\\n\\n        if (isNegative) {\\n            uNumber = uNumber | ~mask;\\n        }\\n\\n        return uNumber;\\n    }\\n\\n    /// @notice Swap byte order of unsigned ints with 64 bytes\\n    /// @param num number to have bytes swapped\\n    function uint64SwapEndian(uint64 num) public pure returns(uint64) {\\n        uint64 output = ((num & 0x00000000000000ff) << 56)|\\n            ((num & 0x000000000000ff00) << 40)|\\n            ((num & 0x0000000000ff0000) << 24)|\\n            ((num & 0x00000000ff000000) << 8) |\\n            ((num & 0x000000ff00000000) >> 8) |\\n            ((num & 0x0000ff0000000000) >> 24)|\\n            ((num & 0x00ff000000000000) >> 40)|\\n            ((num & 0xff00000000000000) >> 56);\\n\\n        return output;\\n    }\\n\\n    /// @notice Swap byte order of unsigned ints with 32 bytes\\n    /// @param num number to have bytes swapped\\n    function uint32SwapEndian(uint32 num) public pure returns(uint32) {\\n        uint32 output = ((num >> 24) & 0xff) | ((num << 8) & 0xff0000) | ((num >> 8) & 0xff00) | ((num << 24) & 0xff000000);\\n        return output;\\n    }\\n}\\n\\n\",\"keccak256\":\"0x95b97e0ae364fb91a3fdcf8132e7b61c745c23dd4e5beb980f396c05a69bbd08\",\"license\":\"Apache-2.0\"},\"contracts/CLINT.sol\":{\"content\":\"// Copyright 2019 Cartesi Pte. Ltd.\\n\\n// SPDX-License-Identifier: Apache-2.0\\n// Licensed under the Apache License, Version 2.0 (the \\\"License\\\"); you may not use\\n// this file except in compliance with the License. You may obtain a copy of the\\n// License at http://www.apache.org/licenses/LICENSE-2.0\\n\\n// Unless required by applicable law or agreed to in writing, software distributed\\n// under the License is distributed on an \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR\\n// CONDITIONS OF ANY KIND, either express or implied. See the License for the\\n// specific language governing permissions and limitations under the License.\\n\\n\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"./MemoryInteractor.sol\\\";\\nimport \\\"./RiscVConstants.sol\\\";\\nimport \\\"./RealTimeClock.sol\\\";\\n\\n\\n/// @title CLINT\\n/// @author Felipe Argento\\n/// @notice Implements the Core Local Interruptor functionalities\\n/// @dev CLINT active addresses are 0x0200bff8(mtime) and 0x02004000(mtimecmp)\\n/// Reference: The Core of Cartesi, v1.02 - Section 3.2 - The Board\\nlibrary CLINT {\\n\\n    uint64 constant CLINT_MSIP0_ADDR = 0x02000000;\\n    uint64 constant CLINT_MTIMECMP_ADDR = 0x02004000;\\n    uint64 constant CLINT_MTIME_ADDR = 0x0200bff8;\\n\\n    /// @notice reads clint\\n    /// @param offset can be uint8, uint16, uint32 or uint64\\n    /// @param wordSize can be uint8, uint16, uint32 or uint64\\n    /// @return bool if read was successfull\\n    /// @return uint64 pval\\n    function clintRead(\\n        MemoryInteractor mi,\\n        uint64 offset,\\n        uint64 wordSize\\n    )\\n    public returns (bool, uint64)\\n    {\\n\\n        if (offset == CLINT_MSIP0_ADDR) {\\n            return clintReadMsip(mi, wordSize);\\n        } else if (offset == CLINT_MTIMECMP_ADDR) {\\n            return clintReadMtime(mi, wordSize);\\n        } else if (offset == CLINT_MTIME_ADDR) {\\n            return clintReadMtimecmp(mi, wordSize);\\n        } else {\\n            return (false, 0);\\n        }\\n    }\\n\\n    /// @notice write to clint\\n    /// @param mi Memory Interactor with which Step function is interacting.\\n    /// @param offset can be uint8, uint16, uint32 or uint64\\n    /// @param val to be written\\n    /// @param wordSize can be uint8, uint16, uint32 or uint64\\n    /// @return bool if write was successfull\\n    function clintWrite(\\n        MemoryInteractor mi,\\n        uint64 offset,\\n        uint64 val,\\n        uint64 wordSize)\\n    public returns (bool)\\n    {\\n        if (offset == CLINT_MSIP0_ADDR) {\\n            if (wordSize == 32) {\\n                if ((val & 1) != 0) {\\n                    mi.setMip(RiscVConstants.getMipMsipMask());\\n                } else {\\n                    mi.resetMip(RiscVConstants.getMipMsipMask());\\n                }\\n                return true;\\n            }\\n            return false;\\n        } else if (offset == CLINT_MTIMECMP_ADDR) {\\n            if (wordSize == 64) {\\n                mi.writeClintMtimecmp(val);\\n                mi.resetMip(RiscVConstants.getMipMsipMask());\\n                return true;\\n            }\\n            // partial mtimecmp is not supported\\n            return false;\\n        }\\n        return false;\\n    }\\n\\n    // internal functions\\n    function clintReadMsip(MemoryInteractor mi, uint64 wordSize)\\n    internal returns (bool, uint64)\\n    {\\n        if (wordSize == 32) {\\n            if ((mi.readMip() & RiscVConstants.getMipMsipMask()) == RiscVConstants.getMipMsipMask()) {\\n                return(true, 1);\\n            } else {\\n                return (true, 0);\\n            }\\n        }\\n        return (false, 0);\\n    }\\n\\n    function clintReadMtime(MemoryInteractor mi, uint64 wordSize)\\n    internal returns (bool, uint64)\\n    {\\n        if (wordSize == 64) {\\n            return (true, RealTimeClock.rtcCycleToTime(mi.readMcycle()));\\n        }\\n        return (false, 0);\\n    }\\n\\n    function clintReadMtimecmp(MemoryInteractor mi, uint64 wordSize)\\n    internal returns (bool, uint64)\\n    {\\n        if (wordSize == 64) {\\n            return (true, mi.readClintMtimecmp());\\n        }\\n        return (false, 0);\\n    }\\n\\n    // getters\\n    function getClintMtimecmp() public pure returns (uint64) {\\n        return CLINT_MTIMECMP_ADDR;\\n    }\\n}\\n\\n\\n\",\"keccak256\":\"0x89a1c4305fc05859156cbd73380aa63ce16a48aba24ce44d4b862b5f415d6362\",\"license\":\"Apache-2.0\"},\"contracts/HTIF.sol\":{\"content\":\"// Copyright 2019 Cartesi Pte. Ltd.\\n\\n// SPDX-License-Identifier: Apache-2.0\\n// Licensed under the Apache License, Version 2.0 (the \\\"License\\\"); you may not use\\n// this file except in compliance with the License. You may obtain a copy of the\\n// License at http://www.apache.org/licenses/LICENSE-2.0\\n\\n// Unless required by applicable law or agreed to in writing, software distributed\\n// under the License is distributed on an \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR\\n// CONDITIONS OF ANY KIND, either express or implied. See the License for the\\n// specific language governing permissions and limitations under the License.\\n\\n\\n\\n// @title HTIF\\npragma solidity ^0.7.0;\\n\\nimport \\\"./MemoryInteractor.sol\\\";\\n\\n\\n/// @title HTIF\\n/// @author Felipe Argento\\n/// @notice Host-Target-Interface (HTIF) mediates communcation with external world.\\n/// @dev Its active addresses are 0x40000000(tohost) and 0x40000008(from host)\\n/// Reference: The Core of Cartesi, v1.02 - Section 3.2 - The Board\\nlibrary HTIF {\\n\\n    uint64 constant HTIF_TOHOST_ADDR_CONST = 0x40008000;\\n    uint64 constant HTIF_FROMHOST_ADDR_CONST = 0x40008008;\\n    uint64 constant HTIF_IYIELD_ADDR_CONST = 0x40008020;\\n\\n    // [c++] enum HTIF_devices\\n    uint64 constant HTIF_DEVICE_HALT = 0;        //< Used to halt machine\\n    uint64 constant HTIF_DEVICE_CONSOLE = 1;     //< Used for console input and output\\n    uint64 constant HTIF_DEVICE_YIELD = 2;       //< Used to yield control back to host\\n\\n    // [c++] enum HTIF_commands\\n    uint64 constant HTIF_HALT_HALT = 0;\\n    uint64 constant HTIF_CONSOLE_GETCHAR = 0;\\n    uint64 constant HTIF_CONSOLE_PUTCHAR = 1;\\n    uint64 constant HTIF_YIELD_AUTOMATIC = 0;\\n    uint64 constant HTIF_YIELD_MANUAL = 1;\\n\\n    /// @notice reads htif\\n    /// @param mi Memory Interactor with which Step function is interacting.\\n    /// @param addr address to read from\\n    /// @param wordSize can be uint8, uint16, uint32 or uint64\\n    /// @return bool if read was successfull\\n    /// @return uint64 pval\\n    function htifRead(\\n        MemoryInteractor mi,\\n        uint64 addr,\\n        uint64 wordSize\\n    )\\n    public returns (bool, uint64)\\n    {\\n        // HTIF reads must be aligned and 8 bytes\\n        if (wordSize != 64 || (addr & 7) != 0) {\\n            return (false, 0);\\n        }\\n\\n        if (addr == HTIF_TOHOST_ADDR_CONST) {\\n            return (true, mi.readHtifTohost());\\n        } else if (addr == HTIF_FROMHOST_ADDR_CONST) {\\n            return (true, mi.readHtifFromhost());\\n        } else {\\n            return (false, 0);\\n        }\\n    }\\n\\n    /// @notice write htif\\n    /// @param mi Memory Interactor with which Step function is interacting.\\n    /// @param addr address to read from\\n    /// @param val value to be written\\n    /// @param wordSize can be uint8, uint16, uint32 or uint64\\n    /// @return bool if write was successfull\\n    function htifWrite(\\n        MemoryInteractor mi,\\n        uint64 addr,\\n        uint64 val,\\n        uint64 wordSize\\n    )\\n    public returns (bool)\\n    {\\n        // HTIF writes must be aligned and 8 bytes\\n        if (wordSize != 64 || (addr & 7) != 0) {\\n            return false;\\n        }\\n        if (addr == HTIF_TOHOST_ADDR_CONST) {\\n            return htifWriteTohost(mi, val);\\n        } else if (addr == HTIF_FROMHOST_ADDR_CONST) {\\n            mi.writeHtifFromhost(val);\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    // Internal functions\\n    function htifWriteFromhost(MemoryInteractor mi, uint64 val)\\n    internal returns (bool)\\n    {\\n        mi.writeHtifFromhost(val);\\n        // TO-DO: check if h is interactive? reset from host? pollConsole?\\n        return true;\\n    }\\n\\n    function htifWriteTohost(MemoryInteractor mi, uint64 tohost)\\n    internal returns (bool)\\n    {\\n        uint32 device = uint32(tohost >> 56);\\n        uint32 cmd = uint32((tohost >> 48) & 0xff);\\n        uint64 payload = uint32((tohost & (~(uint256(1) >> 16))));\\n\\n        mi.writeHtifTohost(tohost);\\n\\n        if (device == HTIF_DEVICE_HALT) {\\n            return htifHalt(\\n                mi,\\n                cmd,\\n                payload);\\n        } else if (device == HTIF_DEVICE_CONSOLE) {\\n            return htifConsole(\\n                mi,\\n                cmd,\\n                payload);\\n        } else if (device == HTIF_DEVICE_YIELD) {\\n            return htifYield(\\n                mi,\\n                cmd,\\n                payload);\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    function htifHalt(\\n        MemoryInteractor mi,\\n        uint64 cmd,\\n        uint64 payload)\\n    internal returns (bool)\\n    {\\n        if (cmd == HTIF_HALT_HALT && ((payload & 1) == 1) ) {\\n            //set iflags to halted\\n            mi.setIflagsH(true);\\n        }\\n        return true;\\n    }\\n\\n    function htifYield(\\n        MemoryInteractor mi,\\n        uint64 cmd,\\n        uint64 payload)\\n    internal returns (bool)\\n    {\\n        // If yield command is enabled, yield\\n        if ((mi.readHtifIYield() >> cmd) & 1 == 1) {\\n            if (cmd == HTIF_YIELD_MANUAL) {\\n                mi.setIflagsY(true);\\n            } else {\\n                mi.setIflagsX(true);\\n            }\\n            mi.writeHtifFromhost((HTIF_DEVICE_YIELD << 56) | cmd << 48);\\n        }\\n\\n        return true;\\n    }\\n\\n    function htifConsole(\\n        MemoryInteractor mi,\\n        uint64 cmd,\\n        uint64 payload)\\n    internal returns (bool)\\n    {\\n        if (cmd == HTIF_CONSOLE_PUTCHAR) {\\n            htifPutchar(mi);\\n        } else if (cmd == HTIF_CONSOLE_GETCHAR) {\\n            htifGetchar(mi);\\n        } else {\\n            // Unknown HTIF console commands are silently ignored\\n            return true;\\n        }\\n    }\\n\\n    function htifPutchar(MemoryInteractor mi) internal\\n    returns (bool)\\n    {\\n        // TO-DO: what to do in the blockchain? Generate event?\\n        mi.writeHtifFromhost((HTIF_DEVICE_CONSOLE << 56) | uint64(HTIF_CONSOLE_PUTCHAR) << 48);\\n        return true;\\n    }\\n\\n    function htifGetchar(MemoryInteractor mi) internal\\n    returns (bool)\\n    {\\n        mi.writeHtifFromhost((HTIF_DEVICE_CONSOLE << 56) | uint64(HTIF_CONSOLE_GETCHAR) << 48);\\n        return true;\\n    }\\n\\n    // getters\\n    function getHtifToHostAddr() public pure returns (uint64) {\\n        return HTIF_TOHOST_ADDR_CONST;\\n    }\\n\\n    function getHtifFromHostAddr() public pure returns (uint64) {\\n        return HTIF_FROMHOST_ADDR_CONST;\\n    }\\n\\n    function getHtifIYieldAddr() public pure returns (uint64) {\\n        return HTIF_IYIELD_ADDR_CONST;\\n    }\\n\\n}\\n\",\"keccak256\":\"0xe405f4d53cc628c4526599931da90a696a9f4d6db818428e0e110574a136c451\",\"license\":\"Apache-2.0\"},\"contracts/MemoryInteractor.sol\":{\"content\":\"// Copyright 2019 Cartesi Pte. Ltd.\\n\\n// SPDX-License-Identifier: Apache-2.0\\n// Licensed under the Apache License, Version 2.0 (the \\\"License\\\"); you may not use\\n// this file except in compliance with the License. You may obtain a copy of the\\n// License at http://www.apache.org/licenses/LICENSE-2.0\\n\\n// Unless required by applicable law or agreed to in writing, software distributed\\n// under the License is distributed on an \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR\\n// CONDITIONS OF ANY KIND, either express or implied. See the License for the\\n// specific language governing permissions and limitations under the License.\\n\\n\\n\\n/// @title MemoryInteractor.sol\\npragma solidity ^0.7.0;\\n\\nimport \\\"./ShadowAddresses.sol\\\";\\nimport \\\"./HTIF.sol\\\";\\nimport \\\"./CLINT.sol\\\";\\nimport \\\"./RiscVConstants.sol\\\";\\nimport \\\"@cartesi/util/contracts/BitsManipulationLibrary.sol\\\";\\n\\n/// @title MemoryInteractor\\n/// @author Felipe Argento\\n/// @notice Bridge between Memory Manager and Step\\n/// @dev Every read performed by mi.memoryRead or mi.write should be followed by an\\n/// @dev endianess swap from little endian to big endian. This is the case because\\n/// @dev EVM is big endian but RiscV is little endian.\\n/// @dev Reference: riscv-spec-v2.2.pdf - Preface to Version 2.0\\n/// @dev Reference: Ethereum yellowpaper - Version 69351d5\\n/// @dev    Appendix H. Virtual Machine Specification\\ncontract MemoryInteractor {\\n\\n    uint256 rwIndex; // read write index\\n    uint64[] rwPositions; // read write positions\\n    bytes8[] rwValues; // read write values\\n    bool[] isRead; // true if access is read, false if its write\\n\\n    function initializeMemory(\\n        uint64[] memory _rwPositions,\\n        bytes8[] memory _rwValues,\\n        bool[] memory _isRead\\n    ) virtual public\\n    {\\n        require(_rwPositions.length == _rwValues.length, \\\"Read/write arrays are not the same size\\\");\\n        require(_rwPositions.length == _isRead.length, \\\"Read/write arrays are not the same size\\\");\\n        rwIndex = 0;\\n        rwPositions = _rwPositions;\\n        rwValues = _rwValues;\\n        isRead = _isRead;\\n    }\\n\\n    function getRWIndex() public view returns (uint256) {\\n        return rwIndex;\\n    }\\n    // Reads\\n    function readX(uint64 registerIndex) public returns (uint64) {\\n        return memoryRead(registerIndex * 8);\\n    }\\n\\n    function readClintMtimecmp() public returns (uint64) {\\n        return memoryRead(CLINT.getClintMtimecmp());\\n    }\\n\\n    function readHtifFromhost() public returns (uint64) {\\n        return memoryRead(HTIF.getHtifFromHostAddr());\\n    }\\n\\n    function readHtifTohost() public returns (uint64) {\\n        return memoryRead(HTIF.getHtifToHostAddr());\\n    }\\n\\n    function readHtifIYield() public returns (uint64) {\\n        return memoryRead(HTIF.getHtifIYieldAddr());\\n    }\\n\\n    function readMie() public returns (uint64) {\\n        return memoryRead(ShadowAddresses.getMie());\\n    }\\n\\n    function readMcause() public returns (uint64) {\\n        return memoryRead(ShadowAddresses.getMcause());\\n    }\\n\\n    function readMinstret() public returns (uint64) {\\n        return memoryRead(ShadowAddresses.getMinstret());\\n    }\\n\\n    function readMcycle() public returns (uint64) {\\n        return memoryRead(ShadowAddresses.getMcycle());\\n    }\\n\\n    function readMcounteren() public returns (uint64) {\\n        return memoryRead(ShadowAddresses.getMcounteren());\\n    }\\n\\n    function readMepc() public returns (uint64) {\\n        return memoryRead(ShadowAddresses.getMepc());\\n    }\\n\\n    function readMip() public returns (uint64) {\\n        return memoryRead(ShadowAddresses.getMip());\\n    }\\n\\n    function readMtval() public returns (uint64) {\\n        return memoryRead(ShadowAddresses.getMtval());\\n    }\\n\\n    function readMvendorid() public returns (uint64) {\\n        return memoryRead(ShadowAddresses.getMvendorid());\\n    }\\n\\n    function readMarchid() public returns (uint64) {\\n        return memoryRead(ShadowAddresses.getMarchid());\\n    }\\n\\n    function readMimpid() public returns (uint64) {\\n        return memoryRead(ShadowAddresses.getMimpid());\\n    }\\n\\n    function readMscratch() public returns (uint64) {\\n        return memoryRead(ShadowAddresses.getMscratch());\\n    }\\n\\n    function readSatp() public returns (uint64) {\\n        return memoryRead(ShadowAddresses.getSatp());\\n    }\\n\\n    function readScause() public returns (uint64) {\\n        return memoryRead(ShadowAddresses.getScause());\\n    }\\n\\n    function readSepc() public returns (uint64) {\\n        return memoryRead(ShadowAddresses.getSepc());\\n    }\\n\\n    function readScounteren() public returns (uint64) {\\n        return memoryRead(ShadowAddresses.getScounteren());\\n    }\\n\\n    function readStval() public returns (uint64) {\\n        return memoryRead(ShadowAddresses.getStval());\\n    }\\n\\n    function readMideleg() public returns (uint64) {\\n        return memoryRead(ShadowAddresses.getMideleg());\\n    }\\n\\n    function readMedeleg() public returns (uint64) {\\n        return memoryRead(ShadowAddresses.getMedeleg());\\n    }\\n\\n    function readMtvec() public returns (uint64) {\\n        return memoryRead(ShadowAddresses.getMtvec());\\n    }\\n\\n    function readIlrsc() public returns (uint64) {\\n        return memoryRead(ShadowAddresses.getIlrsc());\\n    }\\n\\n    function readPc() public returns (uint64) {\\n        return memoryRead(ShadowAddresses.getPc());\\n    }\\n\\n    function readSscratch() public returns (uint64) {\\n        return memoryRead(ShadowAddresses.getSscratch());\\n    }\\n\\n    function readStvec() public returns (uint64) {\\n        return memoryRead(ShadowAddresses.getStvec());\\n    }\\n\\n    function readMstatus() public returns (uint64) {\\n        return memoryRead(ShadowAddresses.getMstatus());\\n    }\\n\\n    function readMisa() public returns (uint64) {\\n        return memoryRead(ShadowAddresses.getMisa());\\n    }\\n\\n    function readIflags() public returns (uint64) {\\n        return memoryRead(ShadowAddresses.getIflags());\\n    }\\n\\n    function readIflagsPrv() public returns (uint64) {\\n        return (memoryRead(ShadowAddresses.getIflags()) & RiscVConstants.getIflagsPrvMask()) >> RiscVConstants.getIflagsPrvShift();\\n    }\\n\\n    function readIflagsH() public returns (uint64) {\\n        return (memoryRead(ShadowAddresses.getIflags()) & RiscVConstants.getIflagsHMask()) >> RiscVConstants.getIflagsHShift();\\n    }\\n\\n    function readIflagsY() public returns (uint64) {\\n        return (memoryRead(ShadowAddresses.getIflags()) & RiscVConstants.getIflagsYMask()) >> RiscVConstants.getIflagsYShift();\\n    }\\n\\n    function readIflagsX() public returns (uint64) {\\n        return (memoryRead(ShadowAddresses.getIflags()) & RiscVConstants.getIflagsXMask()) >> RiscVConstants.getIflagsXShift();\\n    }\\n\\n    function readMemory(uint64 paddr, uint64 wordSize) public returns (uint64) {\\n        // get relative address from unaligned paddr\\n        uint64 closestStartAddr = paddr & uint64(~7);\\n        uint64 relAddr = paddr - closestStartAddr;\\n\\n        // value just like its on MM, without endianess swap\\n        uint64 val = pureMemoryRead(closestStartAddr);\\n\\n        // mask to clean a piece of the value that was on memory\\n        uint64 valueMask = BitsManipulationLibrary.uint64SwapEndian(((uint64(2) ** wordSize) - 1) << relAddr*8);\\n        val = BitsManipulationLibrary.uint64SwapEndian(val & valueMask) >> relAddr*8;\\n        return val;\\n    }\\n\\n    // Sets\\n    function setPriv(uint64 newPriv) public {\\n        writeIflagsPrv(newPriv);\\n        writeIlrsc(uint64(-1)); // invalidate reserved address\\n    }\\n\\n    function setMip(uint64 mask) public {\\n        uint64 mip = readMip();\\n        mip |= mask;\\n        writeMip(mip);\\n    }\\n\\n    function resetMip(uint64 mask) public {\\n        uint64 mip = readMip();\\n        mip &= ~mask;\\n        writeMip(mip);\\n    }\\n\\n    // Writes\\n    function writeMie(uint64 value) public {\\n        memoryWrite(ShadowAddresses.getMie(), value);\\n    }\\n\\n    function writeStvec(uint64 value) public {\\n        memoryWrite(ShadowAddresses.getStvec(), value);\\n    }\\n\\n    function writeSscratch(uint64 value) public {\\n        memoryWrite(ShadowAddresses.getSscratch(), value);\\n    }\\n\\n    function writeMip(uint64 value) public {\\n        memoryWrite(ShadowAddresses.getMip(), value);\\n    }\\n\\n    function writeSatp(uint64 value) public {\\n        memoryWrite(ShadowAddresses.getSatp(), value);\\n    }\\n\\n    function writeMedeleg(uint64 value) public {\\n        memoryWrite(ShadowAddresses.getMedeleg(), value);\\n    }\\n\\n    function writeMideleg(uint64 value) public {\\n        memoryWrite(ShadowAddresses.getMideleg(), value);\\n    }\\n\\n    function writeMtvec(uint64 value) public {\\n        memoryWrite(ShadowAddresses.getMtvec(), value);\\n    }\\n\\n    function writeMcounteren(uint64 value) public {\\n        memoryWrite(ShadowAddresses.getMcounteren(), value);\\n    }\\n\\n    function writeMcycle(uint64 value) public {\\n        memoryWrite(ShadowAddresses.getMcycle(), value);\\n    }\\n\\n    function writeMinstret(uint64 value) public {\\n        memoryWrite(ShadowAddresses.getMinstret(), value);\\n    }\\n\\n    function writeMscratch(uint64 value) public {\\n        memoryWrite(ShadowAddresses.getMscratch(), value);\\n    }\\n\\n    function writeScounteren(uint64 value) public {\\n        memoryWrite(ShadowAddresses.getScounteren(), value);\\n    }\\n\\n    function writeScause(uint64 value) public {\\n        memoryWrite(ShadowAddresses.getScause(), value);\\n    }\\n\\n    function writeSepc(uint64 value) public {\\n        memoryWrite(ShadowAddresses.getSepc(), value);\\n    }\\n\\n    function writeStval(uint64 value) public {\\n        memoryWrite(ShadowAddresses.getStval(), value);\\n    }\\n\\n    function writeMstatus(uint64 value) public {\\n        memoryWrite(ShadowAddresses.getMstatus(), value);\\n    }\\n\\n    function writeMcause(uint64 value) public {\\n        memoryWrite(ShadowAddresses.getMcause(), value);\\n    }\\n\\n    function writeMepc(uint64 value) public {\\n        memoryWrite(ShadowAddresses.getMepc(), value);\\n    }\\n\\n    function writeMtval(uint64 value) public {\\n        memoryWrite(ShadowAddresses.getMtval(), value);\\n    }\\n\\n    function writePc(uint64 value) public {\\n        memoryWrite(ShadowAddresses.getPc(), value);\\n    }\\n\\n    function writeIlrsc(uint64 value) public {\\n        memoryWrite(ShadowAddresses.getIlrsc(), value);\\n    }\\n\\n    function writeClintMtimecmp(uint64 value) public {\\n        memoryWrite(CLINT.getClintMtimecmp(), value);\\n    }\\n\\n    function writeHtifFromhost(uint64 value) public {\\n        memoryWrite(HTIF.getHtifFromHostAddr(), value);\\n    }\\n\\n    function writeHtifTohost(uint64 value) public {\\n        memoryWrite(HTIF.getHtifToHostAddr(), value);\\n    }\\n\\n    function setIflagsH(bool halt) public {\\n        uint64 iflags = readIflags();\\n\\n        if (halt) {\\n            iflags = (iflags | RiscVConstants.getIflagsHMask());\\n        } else {\\n            iflags = (iflags & ~RiscVConstants.getIflagsHMask());\\n        }\\n\\n        memoryWrite(ShadowAddresses.getIflags(), iflags);\\n    }\\n\\n    function setIflagsY(bool isManualYield) public {\\n        uint64 iflags = readIflags();\\n\\n        if (isManualYield) {\\n            iflags = (iflags | RiscVConstants.getIflagsYMask());\\n        } else {\\n            iflags = (iflags & ~RiscVConstants.getIflagsYMask());\\n        }\\n\\n        memoryWrite(ShadowAddresses.getIflags(), iflags);\\n    }\\n\\n    function setIflagsX(bool isAutomaticYield) public {\\n        uint64 iflags = readIflags();\\n\\n        if (isAutomaticYield) {\\n            iflags = (iflags | RiscVConstants.getIflagsXMask());\\n        } else {\\n            iflags = (iflags & ~RiscVConstants.getIflagsXMask());\\n        }\\n\\n        memoryWrite(ShadowAddresses.getIflags(), iflags);\\n    }\\n\\n    function writeIflagsPrv(uint64 newPriv) public {\\n        uint64 iflags = readIflags();\\n\\n        // Clears bits 3 and 2 of iflags and use or to set new value\\n        iflags = (iflags & (~RiscVConstants.getIflagsPrvMask())) | (newPriv << RiscVConstants.getIflagsPrvShift());\\n\\n        memoryWrite(ShadowAddresses.getIflags(), iflags);\\n    }\\n\\n    function writeMemory(\\n        uint64 paddr,\\n        uint64 value,\\n        uint64 wordSize\\n    ) public\\n    {\\n        uint64 numberOfBytes = wordSize / 8;\\n\\n        if (numberOfBytes == 8) {\\n            memoryWrite(paddr, value);\\n        } else {\\n            // get relative address from unaligned paddr\\n            uint64 closestStartAddr = paddr & uint64(~7);\\n            uint64 relAddr = paddr - closestStartAddr;\\n\\n            // oldvalue just like its on MM, without endianess swap\\n            uint64 oldVal = pureMemoryRead(closestStartAddr);\\n\\n            // Mask to clean a piece of the value that was on memory\\n            uint64 valueMask = BitsManipulationLibrary.uint64SwapEndian(((uint64(2) ** wordSize) - 1) << relAddr*8);\\n\\n            // value is big endian, need to swap before further operation\\n            uint64 valueSwap = BitsManipulationLibrary.uint64SwapEndian(value & ((uint64(2) ** wordSize) - 1));\\n\\n            uint64 newvalue = ((oldVal & ~valueMask) | (valueSwap >> relAddr*8));\\n\\n            newvalue = BitsManipulationLibrary.uint64SwapEndian(newvalue);\\n            memoryWrite(closestStartAddr, newvalue);\\n        }\\n    }\\n\\n    function writeX(uint64 registerindex, uint64 value) public {\\n        memoryWrite(registerindex * 8, value);\\n    }\\n\\n    // Internal functions\\n    function memoryRead(uint64 _readAddress) public returns (uint64) {\\n        return BitsManipulationLibrary.uint64SwapEndian(\\n            uint64(memoryAccessManager(_readAddress, true))\\n        );\\n    }\\n\\n    function memoryWrite(uint64 _writeAddress, uint64 _value) virtual public {\\n        bytes8 bytesvalue = bytes8(BitsManipulationLibrary.uint64SwapEndian(_value));\\n        require(memoryAccessManager(_writeAddress, false) == bytesvalue, \\\"Written value does not match\\\");\\n    }\\n\\n    // Memory Write without endianess swap\\n    function pureMemoryWrite(uint64 _writeAddress, uint64 _value) virtual internal {\\n        require(\\n            memoryAccessManager(_writeAddress, false) == bytes8(_value),\\n            \\\"Written value does not match\\\"\\n        );\\n    }\\n\\n    // Memory Read without endianess swap\\n    function pureMemoryRead(uint64 _readAddress) internal returns (uint64) {\\n        return uint64(memoryAccessManager(_readAddress, true));\\n    }\\n\\n   // Private functions\\n\\n    // takes care of read/write access\\n    function memoryAccessManager(uint64 _address, bool _accessIsRead) internal virtual returns (bytes8) {\\n        require(isRead[rwIndex] == _accessIsRead, \\\"Access was not the correct type\\\");\\n\\n        uint64 position = rwPositions[rwIndex];\\n        bytes8 value = rwValues[rwIndex];\\n        rwIndex++;\\n\\n        require((position & 7) == 0, \\\"Position is not aligned\\\");\\n        require(position == _address, \\\"Position and read address do not match\\\");\\n\\n        return value;\\n    }\\n}\\n\\n\",\"keccak256\":\"0x9e466150265fbad34ff88e9425c62452c13fafccbdf9a65dcda0a31db0cd21d4\",\"license\":\"Apache-2.0\"},\"contracts/RealTimeClock.sol\":{\"content\":\"// Copyright 2019 Cartesi Pte. Ltd.\\n\\n// SPDX-License-Identifier: Apache-2.0\\n// Licensed under the Apache License, Version 2.0 (the \\\"License\\\"); you may not use\\n// this file except in compliance with the License. You may obtain a copy of the\\n// License at http://www.apache.org/licenses/LICENSE-2.0\\n\\n// Unless required by applicable law or agreed to in writing, software distributed\\n// under the License is distributed on an \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR\\n// CONDITIONS OF ANY KIND, either express or implied. See the License for the\\n// specific language governing permissions and limitations under the License.\\n\\n\\n\\n/// @title RealTimeClock\\npragma solidity ^0.7.0;\\n\\n/// @title RealTimeClock\\n/// @author Felipe Argento\\n/// @notice Real Time clock simulator\\nlibrary RealTimeClock {\\n    uint64 constant RTC_FREQ_DIV = 100;\\n    \\n    /// @notice Converts from cycle count to time count\\n    /// @param cycle Cycle count\\n    /// @return Time count\\n    function rtcCycleToTime(uint64 cycle) public pure returns (uint64) {\\n        return cycle / RTC_FREQ_DIV;\\n    }\\n\\n    /// @notice Converts from time count to cycle count\\n    /// @param  time Time count\\n    /// @return Cycle count\\n    function rtcTimeToCycle(uint64 time) public pure returns (uint64) {\\n        return time * RTC_FREQ_DIV;\\n    }\\n\\n    /// @notice Returns whether the cycle is a RTC tick\\n    /// @param cycle Cycle count\\n    function rtcIsTick(uint64 cycle) public pure returns (bool) {\\n        return (cycle % RTC_FREQ_DIV) == 0;\\n    }\\n}\\n\",\"keccak256\":\"0x0513dabae4453feab3a4009eef3ddc7ba4719ac6577140c156c7afc0520acf27\",\"license\":\"Apache-2.0\"},\"contracts/RiscVConstants.sol\":{\"content\":\"// Copyright 2019 Cartesi Pte. Ltd.\\n\\n// SPDX-License-Identifier: Apache-2.0\\n// Licensed under the Apache License, Version 2.0 (the \\\"License\\\"); you may not use\\n// this file except in compliance with the License. You may obtain a copy of the\\n// License at http://www.apache.org/licenses/LICENSE-2.0\\n\\n// Unless required by applicable law or agreed to in writing, software distributed\\n// under the License is distributed on an \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR\\n// CONDITIONS OF ANY KIND, either express or implied. See the License for the\\n// specific language governing permissions and limitations under the License.\\n\\n\\n\\npragma solidity ^0.7.0;\\n\\n/// @title RiscVConstants\\n/// @author Felipe Argento\\n/// @notice Defines getters for important constants\\nlibrary RiscVConstants {\\n    //iflags shifts\\n    function getIflagsHShift()  public pure returns(uint64) {return 0;}\\n    function getIflagsYShift()  public pure returns(uint64) {return 1;}\\n    function getIflagsXShift()  public pure returns(uint64) {return 2;}\\n    function getIflagsPrvShift()  public pure returns(uint64) {return 3;}\\n\\n    //iflags masks\\n    function getIflagsHMask()  public pure returns(uint64) {return uint64(1) << getIflagsHShift();}\\n    function getIflagsYMask()  public pure returns(uint64) {return uint64(1) << getIflagsYShift();}\\n    function getIflagsXMask()  public pure returns(uint64) {return uint64(1) << getIflagsXShift();}\\n    function getIflagsPrvMask()  public pure returns(uint64) {return uint64(3) << getIflagsPrvShift();}\\n\\n    //general purpose\\n    function getXlen() public pure returns(uint64) {return 64;}\\n    function getMxl()  public pure returns(uint64) {return 2;}\\n\\n    //privilege levels\\n    function getPrvU() public pure returns(uint64) {return 0;}\\n    function getPrvS() public pure returns(uint64) {return 1;}\\n    function getPrvH() public pure returns(uint64) {return 2;}\\n    function getPrvM() public pure returns(uint64) {return 3;}\\n\\n    //mstatus shifts\\n    function getMstatusUieShift()  public pure returns(uint64) {return 0;}\\n    function getMstatusSieShift()  public pure returns(uint64) {return 1;}\\n    function getMstatusHieShift()  public pure returns(uint64) {return 2;}\\n    function getMstatusMieShift()  public pure returns(uint64) {return 3;}\\n    function getMstatusUpieShift() public pure returns(uint64) {return 4;}\\n    function getMstatusSpieShift() public pure returns(uint64) {return 5;}\\n    function getMstatusMpieShift() public pure returns(uint64) {return 7;}\\n    function getMstatusSppShift()  public pure returns(uint64) {return 8;}\\n    function getMstatusMppShift()  public pure returns(uint64) {return 11;}\\n    function getMstatusFsShift()   public pure returns(uint64) {return 13;}\\n\\n    function getMstatusXsShift()   public pure returns(uint64) {return 15;}\\n    function getMstatusMprvShift() public pure returns(uint64) {return 17;}\\n    function getMstatusSumShift()  public pure returns(uint64) {return 18;}\\n    function getMstatusMxrShift()  public pure returns(uint64) {return 19;}\\n    function getMstatusTvmShift()  public pure returns(uint64) {return 20;}\\n    function getMstatusTwShift()   public pure returns(uint64) {return 21;}\\n    function getMstatusTsrShift()  public pure returns(uint64) {return 22;}\\n\\n\\n    function getMstatusUxlShift()  public pure returns(uint64) {return 32;}\\n    function getMstatusSxlShift()  public pure returns(uint64) {return 34;}\\n\\n    function getMstatusSdShift()   public pure returns(uint64) {return getXlen() - 1;}\\n\\n    //mstatus masks\\n    function getMstatusUieMask()  public pure returns(uint64) {return (uint64(1) << getMstatusUieShift());}\\n    function getMstatusSieMask()  public pure returns(uint64) {return uint64(1) << getMstatusSieShift();}\\n    function getMstatusMieMask()  public pure returns(uint64) {return uint64(1) << getMstatusMieShift();}\\n    function getMstatusUpieMask() public pure returns(uint64) {return uint64(1) << getMstatusUpieShift();}\\n    function getMstatusSpieMask() public pure returns(uint64) {return uint64(1) << getMstatusSpieShift();}\\n    function getMstatusMpieMask() public pure returns(uint64) {return uint64(1) << getMstatusMpieShift();}\\n    function getMstatusSppMask()  public pure returns(uint64) {return uint64(1) << getMstatusSppShift();}\\n    function getMstatusMppMask()  public pure returns(uint64) {return uint64(3) << getMstatusMppShift();}\\n    function getMstatusFsMask()   public pure returns(uint64) {return uint64(3) << getMstatusFsShift();}\\n    function getMstatusXsMask()   public pure returns(uint64) {return uint64(3) << getMstatusXsShift();}\\n    function getMstatusMprvMask() public pure returns(uint64) {return uint64(1) << getMstatusMprvShift();}\\n    function getMstatusSumMask()  public pure returns(uint64) {return uint64(1) << getMstatusSumShift();}\\n    function getMstatusMxrMask()  public pure returns(uint64) {return uint64(1) << getMstatusMxrShift();}\\n    function getMstatusTvmMask()  public pure returns(uint64) {return uint64(1) << getMstatusTvmShift();}\\n    function getMstatusTwMask()   public pure returns(uint64) {return uint64(1) << getMstatusTwShift();}\\n    function getMstatusTsrMask()  public pure returns(uint64) {return uint64(1) << getMstatusTsrShift();}\\n\\n    function getMstatusUxlMask()  public pure returns(uint64) {return uint64(3) << getMstatusUxlShift();}\\n    function getMstatusSxlMask()  public pure returns(uint64) {return uint64(3) << getMstatusSxlShift();}\\n    function getMstatusSdMask()   public pure returns(uint64) {return uint64(1) << getMstatusSdShift();}\\n\\n    // mstatus read/writes\\n    function getMstatusWMask() public pure returns(uint64) {\\n        return (\\n            getMstatusUieMask()  |\\n            getMstatusSieMask()  |\\n            getMstatusMieMask()  |\\n            getMstatusUpieMask() |\\n            getMstatusSpieMask() |\\n            getMstatusMpieMask() |\\n            getMstatusSppMask()  |\\n            getMstatusMppMask()  |\\n            getMstatusFsMask()   |\\n            getMstatusMprvMask() |\\n            getMstatusSumMask()  |\\n            getMstatusMxrMask()  |\\n            getMstatusTvmMask()  |\\n            getMstatusTwMask()   |\\n            getMstatusTsrMask()\\n        );\\n    }\\n\\n    function getMstatusRMask() public pure returns(uint64) {\\n        return (\\n            getMstatusUieMask()  |\\n            getMstatusSieMask()  |\\n            getMstatusMieMask()  |\\n            getMstatusUpieMask() |\\n            getMstatusSpieMask() |\\n            getMstatusMpieMask() |\\n            getMstatusSppMask()  |\\n            getMstatusMppMask()  |\\n            getMstatusFsMask()   |\\n            getMstatusMprvMask() |\\n            getMstatusSumMask()  |\\n            getMstatusMxrMask()  |\\n            getMstatusTvmMask()  |\\n            getMstatusTwMask()   |\\n            getMstatusTsrMask()  |\\n            getMstatusUxlMask()  |\\n            getMstatusSxlMask()  |\\n            getMstatusSdMask()\\n        );\\n    }\\n\\n    // sstatus read/writes\\n    function getSstatusWMask() public pure returns(uint64) {\\n        return (\\n            getMstatusUieMask()  |\\n            getMstatusSieMask()  |\\n            getMstatusUpieMask() |\\n            getMstatusSpieMask() |\\n            getMstatusSppMask()  |\\n            getMstatusFsMask()   |\\n            getMstatusSumMask()  |\\n            getMstatusMxrMask()\\n        );\\n    }\\n\\n    function getSstatusRMask() public pure returns(uint64) {\\n        return (\\n            getMstatusUieMask()  |\\n            getMstatusSieMask()  |\\n            getMstatusUpieMask() |\\n            getMstatusSpieMask() |\\n            getMstatusSppMask()  |\\n            getMstatusFsMask()   |\\n            getMstatusSumMask()  |\\n            getMstatusMxrMask()  |\\n            getMstatusUxlMask()  |\\n            getMstatusSdMask()\\n        );\\n    }\\n\\n    // mcause for exceptions\\n    function getMcauseInsnAddressMisaligned() public pure returns(uint64) {return 0x0;} ///< instruction address misaligned\\n    function getMcauseInsnAccessFault() public pure returns(uint64) {return 0x1;} ///< instruction access fault\\n    function getMcauseIllegalInsn() public pure returns(uint64) {return 0x2;} ///< illegal instruction\\n    function getMcauseBreakpoint() public pure returns(uint64) {return 0x3;} ///< breakpoint\\n    function getMcauseLoadAddressMisaligned() public pure returns(uint64) {return 0x4;} ///< load address misaligned\\n    function getMcauseLoadAccessFault() public pure returns(uint64) {return 0x5;} ///< load access fault\\n    function getMcauseStoreAmoAddressMisaligned() public pure returns(uint64) {return 0x6;} ///< store/amo address misaligned\\n    function getMcauseStoreAmoAccessFault() public pure returns(uint64) {return 0x7;} ///< store/amo access fault\\n    ///< environment call (+0: from u-mode, +1: from s-mode, +3: from m-mode)\\n    function getMcauseEcallBase() public pure returns(uint64) { return 0x8;}\\n    function getMcauseFetchPageFault() public pure returns(uint64) {return 0xc;} ///< instruction page fault\\n    function getMcauseLoadPageFault() public pure returns(uint64) {return 0xd;} ///< load page fault\\n    function getMcauseStoreAmoPageFault() public pure returns(uint64) {return 0xf;} ///< store/amo page fault\\n\\n    function getMcauseInterruptFlag() public pure returns(uint64) {return uint64(1) << (getXlen() - 1);} ///< interrupt flag\\n\\n    // mcounteren constants\\n    function getMcounterenCyShift() public pure returns(uint64) {return 0;}\\n    function getMcounterenTmShift() public pure returns(uint64) {return 1;}\\n    function getMcounterenIrShift() public pure returns(uint64) {return 2;}\\n\\n    function getMcounterenCyMask() public pure returns(uint64) {return uint64(1) << getMcounterenCyShift();}\\n    function getMcounterenTmMask() public pure returns(uint64) {return uint64(1) << getMcounterenTmShift();}\\n    function getMcounterenIrMask() public pure returns(uint64) {return uint64(1) << getMcounterenIrShift();}\\n\\n    function getMcounterenRwMask() public pure returns(uint64) {return getMcounterenCyMask() | getMcounterenTmMask() | getMcounterenIrMask();}\\n    function getScounterenRwMask() public pure returns(uint64) {return getMcounterenRwMask();}\\n\\n    //paging constants\\n    function getPgShift() public pure returns(uint64) {return 12;}\\n    function getPgMask()  public pure returns(uint64) {((uint64(1) << getPgShift()) - 1);}\\n\\n    function getPteVMask() public pure returns(uint64) {return (1 << 0);}\\n    function getPteUMask() public pure returns(uint64) {return (1 << 4);}\\n    function getPteAMask() public pure returns(uint64) {return (1 << 6);}\\n    function getPteDMask() public pure returns(uint64) {return (1 << 7);}\\n\\n    function getPteXwrReadShift() public pure returns(uint64) {return 0;}\\n    function getPteXwrWriteShift() public pure returns(uint64) {return 1;}\\n    function getPteXwrCodeShift() public pure returns(uint64) {return 2;}\\n\\n    // page masks\\n    function getPageNumberShift() public pure returns(uint64) {return 12;}\\n\\n    function getPageOffsetMask() public pure returns(uint64) {return ((uint64(1) << getPageNumberShift()) - 1);}\\n\\n    // mip shifts:\\n    function getMipUsipShift() public pure returns(uint64) {return 0;}\\n    function getMipSsipShift() public pure returns(uint64) {return 1;}\\n    function getMipMsipShift() public pure returns(uint64) {return 3;}\\n    function getMipUtipShift() public pure returns(uint64) {return 4;}\\n    function getMipStipShift() public pure returns(uint64) {return 5;}\\n    function getMipMtipShift() public pure returns(uint64) {return 7;}\\n    function getMipUeipShift() public pure returns(uint64) {return 8;}\\n    function getMipSeipShift() public pure returns(uint64) {return 9;}\\n    function getMipMeipShift() public pure returns(uint64) {return 11;}\\n\\n    function getMipUsipMask() public pure returns(uint64) {return uint64(1) << getMipUsipShift();}\\n    function getMipSsipMask() public pure returns(uint64) {return uint64(1) << getMipSsipShift();}\\n    function getMipMsipMask() public pure returns(uint64) {return uint64(1) << getMipMsipShift();}\\n    function getMipUtipMask() public pure returns(uint64) {return uint64(1) << getMipUtipShift();}\\n    function getMipStipMask() public pure returns(uint64) {return uint64(1) << getMipStipShift();}\\n    function getMipMtipMask() public pure returns(uint64) {return uint64(1) << getMipMtipShift();}\\n    function getMipUeipMask() public pure returns(uint64) {return uint64(1) << getMipUeipShift();}\\n    function getMipSeipMask() public pure returns(uint64) {return uint64(1) << getMipSeipShift();}\\n    function getMipMeipMask() public pure returns(uint64) {return uint64(1) << getMipMeipShift();}\\n}\\n\",\"keccak256\":\"0xbcb9348cf546206050eda0969c2fb2afb4208463d265dea15aaff26ba5dcc288\",\"license\":\"Apache-2.0\"},\"contracts/ShadowAddresses.sol\":{\"content\":\"// Copyright 2019 Cartesi Pte. Ltd.\\n\\n// SPDX-License-Identifier: Apache-2.0\\n// Licensed under the Apache License, Version 2.0 (the \\\"License\\\"); you may not use\\n// this file except in compliance with the License. You may obtain a copy of the\\n// License at http://www.apache.org/licenses/LICENSE-2.0\\n\\n// Unless required by applicable law or agreed to in writing, software distributed\\n// under the License is distributed on an \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR\\n// CONDITIONS OF ANY KIND, either express or implied. See the License for the\\n// specific language governing permissions and limitations under the License.\\n\\n\\n\\npragma solidity ^0.7.0;\\n\\n\\n/// @title ShadowAddresses\\n/// @author Felipe Argento\\n/// @notice Defines the processor state. Memory-mapped to the lowest 512 bytes in pm\\n/// @dev Defined on Cartesi techpaper version 1.02 - Section 3 - table 2 \\n/// Source: https://cartesi.io/cartesi_whitepaper.pdf \\nlibrary ShadowAddresses {\\n    uint64 constant PC         = 0x100;\\n    uint64 constant MVENDORID  = 0x108;\\n    uint64 constant MARCHID    = 0x110;\\n    uint64 constant MIMPID     = 0x118;\\n    uint64 constant MCYCLE     = 0x120;\\n    uint64 constant MINSTRET   = 0x128;\\n    uint64 constant MSTATUS    = 0x130;\\n    uint64 constant MTVEC      = 0x138;\\n    uint64 constant MSCRATCH   = 0x140;\\n    uint64 constant MEPC       = 0x148;\\n    uint64 constant MCAUSE     = 0x150;\\n    uint64 constant MTVAL      = 0x158;\\n    uint64 constant MISA       = 0x160;\\n    uint64 constant MIE        = 0x168;\\n    uint64 constant MIP        = 0x170;\\n    uint64 constant MEDELEG    = 0x178;\\n    uint64 constant MIDELEG    = 0x180;\\n    uint64 constant MCOUNTEREN = 0x188;\\n    uint64 constant STVEC      = 0x190;\\n    uint64 constant SSCRATCH   = 0x198;\\n    uint64 constant SEPC       = 0x1a0;\\n    uint64 constant SCAUSE     = 0x1a8;\\n    uint64 constant STVAL      = 0x1b0;\\n    uint64 constant SATP       = 0x1b8;\\n    uint64 constant SCOUNTEREN = 0x1c0;\\n    uint64 constant ILRSC      = 0x1c8;\\n    uint64 constant IFLAGS     = 0x1d0;\\n\\n    //getters - contracts cant access constants directly\\n    function getPc()         public pure returns(uint64) {return PC;}\\n    function getMvendorid()  public pure returns(uint64) {return MVENDORID;}\\n    function getMarchid()    public pure returns(uint64) {return MARCHID;}\\n    function getMimpid()     public pure returns(uint64) {return MIMPID;}\\n    function getMcycle()     public pure returns(uint64) {return MCYCLE;}\\n    function getMinstret()   public pure returns(uint64) {return MINSTRET;}\\n    function getMstatus()    public pure returns(uint64) {return MSTATUS;}\\n    function getMtvec()      public pure returns(uint64) {return MTVEC;}\\n    function getMscratch()   public pure returns(uint64) {return MSCRATCH;}\\n    function getMepc()       public pure returns(uint64) {return MEPC;}\\n    function getMcause()     public pure returns(uint64) {return MCAUSE;}\\n    function getMtval()      public pure returns(uint64) {return MTVAL;}\\n    function getMisa()       public pure returns(uint64) {return MISA;}\\n    function getMie()        public pure returns(uint64) {return MIE;}\\n    function getMip()        public pure returns(uint64) {return MIP;}\\n    function getMedeleg()    public pure returns(uint64) {return MEDELEG;}\\n    function getMideleg()    public pure returns(uint64) {return MIDELEG;}\\n    function getMcounteren() public pure returns(uint64) {return MCOUNTEREN;}\\n    function getStvec()      public pure returns(uint64) {return STVEC;}\\n    function getSscratch()   public pure returns(uint64) {return SSCRATCH;}\\n    function getSepc()       public pure returns(uint64) {return SEPC;}\\n    function getScause()     public pure returns(uint64) {return SCAUSE;}\\n    function getStval()      public pure returns(uint64) {return STVAL;}\\n    function getSatp()       public pure returns(uint64) {return SATP;}\\n    function getScounteren() public pure returns(uint64) {return SCOUNTEREN;}\\n    function getIlrsc()      public pure returns(uint64) {return ILRSC;}\\n    function getIflags()     public pure returns(uint64) {return IFLAGS;}\\n}\\n\",\"keccak256\":\"0xbfd187bab76a2802de777406cdddc9fe0cbf79ab8cb6f76075da7db664a9e9ae\",\"license\":\"Apache-2.0\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50612f55806100206000396000f3fe608060405234801561001057600080fd5b50600436106104495760003560e01c8063854dba4011610241578063b5b98ed41161013b578063dd5c4a14116100c3578063f7ac913d11610087578063f7ac913d14610c50578063f991158714610c58578063fa644af514610c7e578063fbdb975d14610ca4578063fd295abe14610cca57610449565b8063dd5c4a1414610bb0578063f21d94f814610bd6578063f2cf6ceb14610bfc578063f55c4d3814610c04578063f604edb814610c2a57610449565b8063cc92cbf71161010a578063cc92cbf714610b4c578063cecdae5314610b54578063d2be7b6d14610b7a578063d40d17c514610ba0578063daded5c214610ba857610449565b8063b5b98ed414610b0e578063becdc10d14610b16578063c133b7ff14610b1e578063cbc446b114610b2657610449565b80639c872d02116101c9578063aaed4f071161018d578063aaed4f0714610a75578063ab9779b714610a9b578063af63b2a814610ac1578063b2325aef14610ac9578063b27ec92014610aef57610449565b80639c872d0214610875578063a317ce9d1461089b578063a47594df146108a3578063a740dbc114610a4e578063a7458b9514610a5657610449565b80638e32f35e116102105780638e32f35e146108095780639485871b14610837578063968644f01461083f5780639b7021ce146108475780639c7b005d1461084f57610449565b8063854dba40146107ad57806386099c54146107b557806386676d43146107bd57806389365909146107e357610449565b806351bb3615116103525780636232e59c116102da5780636dc95c2e1161029e5780636dc95c2e146107235780636f6c0e7d1461075157806378c495741461075957806378ddee751461077f578063834aa4f6146107a557610449565b80636232e59c146106dd5780636475e34214610703578063650ca32b1461070b5780636a72b27d146107135780636cd24daf1461071b57610449565b80635790783711610321578063579078371461065b5780635af47ca7146106815780635dadd78a146106a75780635e5ca652146106af5780635f824bf9146106d557610449565b806351bb3615146105ff57806354749af314610607578063568b27021461062d578063575832df1461063557610449565b806328520b30116103d557806334970f18116103a457806334970f181461057c5780633a48bb561461058457806345057ed7146105a35780634ae9388b146105c957806350cec2d5146105d157610449565b806328520b301461052057806328751b36146105285780632ca2bd161461054e5780632e963a801461057457610449565b806311cf3a221161041c57806311cf3a22146104da57806315dd9c06146104e257806318e504db146105085780631bf2f73d146105105780631e5e61901461051857610449565b8063080aa5d11461044e5780630df3e295146104685780630f84c0461461049057806310d74c7d146104b4575b600080fd5b610456610d02565b60408051918252519081900360200190f35b61048e6004803603602081101561047e57600080fd5b50356001600160401b0316610d08565b005b610498610d84565b604080516001600160401b039092168252519081900360200190f35b61048e600480360360208110156104ca57600080fd5b50356001600160401b0316610e03565b610498610e4a565b61048e600480360360208110156104f857600080fd5b50356001600160401b0316610e93565b610498610eaf565b610498610ef8565b610498610f41565b610498610f8a565b61048e6004803603602081101561053e57600080fd5b50356001600160401b0316610fd3565b61048e6004803603602081101561056457600080fd5b50356001600160401b031661101a565b610498611061565b6104986110aa565b61048e6004803603602081101561059a57600080fd5b503515156110f3565b61048e600480360360208110156105b957600080fd5b50356001600160401b0316611235565b61049861124c565b610498600480360360408110156105e757600080fd5b506001600160401b0381358116916020013516611295565b61049861140b565b61048e6004803603602081101561061d57600080fd5b50356001600160401b0316611454565b610498611468565b61048e6004803603602081101561064b57600080fd5b50356001600160401b03166114b1565b61048e6004803603602081101561067157600080fd5b50356001600160401b03166114f8565b61048e6004803603602081101561069757600080fd5b50356001600160401b031661153f565b610498611586565b61048e600480360360208110156106c557600080fd5b50356001600160401b03166115cf565b610498611616565b610498600480360360208110156106f357600080fd5b50356001600160401b031661165f565b610498611673565b6104986116bc565b610498611705565b61049861174e565b61048e6004803603604081101561073957600080fd5b506001600160401b0381358116916020013516611797565b6104986117a4565b61048e6004803603602081101561076f57600080fd5b50356001600160401b03166117ed565b61048e6004803603602081101561079557600080fd5b50356001600160401b0316611834565b61049861187b565b6104986118c4565b61049861190d565b61048e600480360360208110156107d357600080fd5b50356001600160401b0316611a63565b61048e600480360360208110156107f957600080fd5b50356001600160401b0316611aaa565b61048e6004803603604081101561081f57600080fd5b506001600160401b0381358116916020013516611af1565b610498611bf3565b610498611c3c565b610498611d05565b61048e6004803603602081101561086557600080fd5b50356001600160401b0316611d4e565b61048e6004803603602081101561088b57600080fd5b50356001600160401b0316611d95565b610498611ddc565b61048e600480360360608110156108b957600080fd5b8101906020810181356401000000008111156108d457600080fd5b8201836020820111156108e657600080fd5b8035906020019184602083028401116401000000008311171561090857600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929594936020810193503591505064010000000081111561095857600080fd5b82018360208201111561096a57600080fd5b8035906020019184602083028401116401000000008311171561098c57600080fd5b91908080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525092959493602081019350359150506401000000008111156109dc57600080fd5b8201836020820111156109ee57600080fd5b80359060200191846020830284011164010000000083111715610a1057600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550611e25945050505050565b610498611eea565b61048e60048036036020811015610a6c57600080fd5b50351515611f33565b61048e60048036036020811015610a8b57600080fd5b50356001600160401b0316611fcd565b61048e60048036036020811015610ab157600080fd5b50356001600160401b0316612014565b61049861205b565b61048e60048036036020811015610adf57600080fd5b50356001600160401b03166120a4565b61048e60048036036020811015610b0557600080fd5b503515156120eb565b610498612185565b6104986121ce565b610498612217565b61048e60048036036020811015610b3c57600080fd5b50356001600160401b0316612260565b6104986122a7565b61048e60048036036020811015610b6a57600080fd5b50356001600160401b03166122f0565b61048e60048036036020811015610b9057600080fd5b50356001600160401b031661244f565b610498612496565b61049861255f565b61048e60048036036020811015610bc657600080fd5b50356001600160401b03166125a8565b61048e60048036036020811015610bec57600080fd5b50356001600160401b03166125ef565b610498612636565b61048e60048036036020811015610c1a57600080fd5b50356001600160401b031661267f565b61048e60048036036020811015610c4057600080fd5b50356001600160401b03166126c6565b61049861270d565b61048e60048036036020811015610c6e57600080fd5b50356001600160401b03166127d6565b61049860048036036020811015610c9457600080fd5b50356001600160401b031661281d565b61048e60048036036020811015610cba57600080fd5b50356001600160401b03166128b6565b61048e60048036036060811015610ce057600080fd5b506001600160401b0381358116916020810135821691604090910135166128fd565b60005490565b610d81734D7479bF76387f35D84B9f1BE586Aa83d9118294639a59734c6040518163ffffffff1660e01b815260040160206040518083038186803b158015610d4f57600080fd5b505af4158015610d63573d6000803e3d6000fd5b505050506040513d6020811015610d7957600080fd5b505182611af1565b50565b6000610dfe734D7479bF76387f35D84B9f1BE586Aa83d9118294636630ad876040518163ffffffff1660e01b815260040160206040518083038186803b158015610dcd57600080fd5b505af4158015610de1573d6000803e3d6000fd5b505050506040513d6020811015610df757600080fd5b505161281d565b905090565b610d81734D7479bF76387f35D84B9f1BE586Aa83d91182946372eb67d06040518163ffffffff1660e01b815260040160206040518083038186803b158015610d4f57600080fd5b6000610dfe734D7479bF76387f35D84B9f1BE586Aa83d9118294638fd6b7c46040518163ffffffff1660e01b815260040160206040518083038186803b158015610dcd57600080fd5b6000610e9d611ddc565b8219169050610eab81611fcd565b5050565b6000610dfe734D7479bF76387f35D84B9f1BE586Aa83d911829463734b96006040518163ffffffff1660e01b815260040160206040518083038186803b158015610dcd57600080fd5b6000610dfe734D7479bF76387f35D84B9f1BE586Aa83d911829463443fd5986040518163ffffffff1660e01b815260040160206040518083038186803b158015610dcd57600080fd5b6000610dfe734D7479bF76387f35D84B9f1BE586Aa83d911829463ca04595a6040518163ffffffff1660e01b815260040160206040518083038186803b158015610dcd57600080fd5b6000610dfe734D7479bF76387f35D84B9f1BE586Aa83d91182946372eb67d06040518163ffffffff1660e01b815260040160206040518083038186803b158015610dcd57600080fd5b610d81734D7479bF76387f35D84B9f1BE586Aa83d911829463ca04595a6040518163ffffffff1660e01b815260040160206040518083038186803b158015610d4f57600080fd5b610d81734D7479bF76387f35D84B9f1BE586Aa83d911829463d124bd136040518163ffffffff1660e01b815260040160206040518083038186803b158015610d4f57600080fd5b6000610dfe734D7479bF76387f35D84B9f1BE586Aa83d91182946329301cac6040518163ffffffff1660e01b815260040160206040518083038186803b158015610dcd57600080fd5b6000610dfe73fdFF3De6C36305319d756455843963080f38cb4263521819f56040518163ffffffff1660e01b815260040160206040518083038186803b158015610dcd57600080fd5b60006110fd612217565b9050811561117b577308367820CD9849A6FA6964c7cEf53C5C47fA5C0863e697ace96040518163ffffffff1660e01b815260040160206040518083038186803b15801561114957600080fd5b505af415801561115d573d6000803e3d6000fd5b505050506040513d602081101561117357600080fd5b5051176111ee565b7308367820CD9849A6FA6964c7cEf53C5C47fA5C0863e697ace96040518163ffffffff1660e01b815260040160206040518083038186803b1580156111bf57600080fd5b505af41580156111d3573d6000803e3d6000fd5b505050506040513d60208110156111e957600080fd5b505119165b610eab734D7479bF76387f35D84B9f1BE586Aa83d9118294632ffdabc56040518163ffffffff1660e01b815260040160206040518083038186803b158015610d4f57600080fd5b600061123f611ddc565b82179050610eab81611fcd565b6000610dfe734D7479bF76387f35D84B9f1BE586Aa83d911829463b255e9e46040518163ffffffff1660e01b815260040160206040518083038186803b158015610dcd57600080fd5b60006007198316808403826112a983612b44565b9050600073E3488789Be5B91633E332FA047fE8009898DD9D263bf1924c5846008026001600160401b03166001896001600160401b031660026001600160401b03160a036001600160401b0316901b6040518263ffffffff1660e01b815260040180826001600160401b0316815260200191505060206040518083038186803b15801561133557600080fd5b505af4158015611349573d6000803e3d6000fd5b505050506040513d602081101561135f57600080fd5b50516040805163bf1924c560e01b81526001600160401b03858416811660048301529151929350600886029091169173E3488789Be5B91633E332FA047fE8009898DD9D29163bf1924c5916024808301926020929190829003018186803b1580156113c957600080fd5b505af41580156113dd573d6000803e3d6000fd5b505050506040513d60208110156113f357600080fd5b50516001600160401b0316901c979650505050505050565b6000610dfe734D7479bF76387f35D84B9f1BE586Aa83d9118294637047f4df6040518163ffffffff1660e01b815260040160206040518083038186803b158015610dcd57600080fd5b61145d816122f0565b610d816000196125ef565b6000610dfe734D7479bF76387f35D84B9f1BE586Aa83d91182946345827f696040518163ffffffff1660e01b815260040160206040518083038186803b158015610dcd57600080fd5b610d81734D7479bF76387f35D84B9f1BE586Aa83d911829463e59cb5746040518163ffffffff1660e01b815260040160206040518083038186803b158015610d4f57600080fd5b610d81734D7479bF76387f35D84B9f1BE586Aa83d911829463734b96006040518163ffffffff1660e01b815260040160206040518083038186803b158015610d4f57600080fd5b610d81734D7479bF76387f35D84B9f1BE586Aa83d9118294639ff9932b6040518163ffffffff1660e01b815260040160206040518083038186803b158015610d4f57600080fd5b6000610dfe734D7479bF76387f35D84B9f1BE586Aa83d911829463e2e2e7126040518163ffffffff1660e01b815260040160206040518083038186803b158015610dcd57600080fd5b610d81734D7479bF76387f35D84B9f1BE586Aa83d911829463a43e290f6040518163ffffffff1660e01b815260040160206040518083038186803b158015610d4f57600080fd5b6000610dfe734D7479bF76387f35D84B9f1BE586Aa83d91182946392f5aa226040518163ffffffff1660e01b815260040160206040518083038186803b158015610dcd57600080fd5b600061166d8260080261281d565b92915050565b6000610dfe73BaDC34c0fc1233b68a4a486C227C495f82Be5eB663870981356040518163ffffffff1660e01b815260040160206040518083038186803b158015610dcd57600080fd5b6000610dfe734D7479bF76387f35D84B9f1BE586Aa83d911829463d41a5b596040518163ffffffff1660e01b815260040160206040518083038186803b158015610dcd57600080fd5b6000610dfe734D7479bF76387f35D84B9f1BE586Aa83d911829463e59cb5746040518163ffffffff1660e01b815260040160206040518083038186803b158015610dcd57600080fd5b6000610dfe734D7479bF76387f35D84B9f1BE586Aa83d911829463da3e8d7b6040518163ffffffff1660e01b815260040160206040518083038186803b158015610dcd57600080fd5b610eab8260080282611af1565b6000610dfe73fdFF3De6C36305319d756455843963080f38cb42636299ea3f6040518163ffffffff1660e01b815260040160206040518083038186803b158015610dcd57600080fd5b610d81734D7479bF76387f35D84B9f1BE586Aa83d91182946345827f696040518163ffffffff1660e01b815260040160206040518083038186803b158015610d4f57600080fd5b610d81734D7479bF76387f35D84B9f1BE586Aa83d911829463b255e9e46040518163ffffffff1660e01b815260040160206040518083038186803b158015610d4f57600080fd5b6000610dfe734D7479bF76387f35D84B9f1BE586Aa83d9118294634a4c35106040518163ffffffff1660e01b815260040160206040518083038186803b158015610dcd57600080fd5b6000610dfe734D7479bF76387f35D84B9f1BE586Aa83d911829463c585eede6040518163ffffffff1660e01b815260040160206040518083038186803b158015610dcd57600080fd5b60007308367820CD9849A6FA6964c7cEf53C5C47fA5C086317a0cac36040518163ffffffff1660e01b815260040160206040518083038186803b15801561195357600080fd5b505af4158015611967573d6000803e3d6000fd5b505050506040513d602081101561197d57600080fd5b5051604080516351a2ab4160e11b815290516001600160401b03909216917308367820CD9849A6FA6964c7cEf53C5C47fA5C089163a3455682916004808301926020929190829003018186803b1580156119d657600080fd5b505af41580156119ea573d6000803e3d6000fd5b505050506040513d6020811015611a0057600080fd5b505160408051632ffdabc560e01b81529051611a5291734D7479bF76387f35D84B9f1BE586Aa83d911829491632ffdabc591600480820192602092909190829003018186803b158015610dcd57600080fd5b166001600160401b0316901c905090565b610d81734D7479bF76387f35D84B9f1BE586Aa83d911829463e80d17516040518163ffffffff1660e01b815260040160206040518083038186803b158015610d4f57600080fd5b610d81734D7479bF76387f35D84B9f1BE586Aa83d9118294637047f4df6040518163ffffffff1660e01b815260040160206040518083038186803b158015610d4f57600080fd5b600073E3488789Be5B91633E332FA047fE8009898DD9D263bf1924c5836040518263ffffffff1660e01b815260040180826001600160401b0316815260200191505060206040518083038186803b158015611b4b57600080fd5b505af4158015611b5f573d6000803e3d6000fd5b505050506040513d6020811015611b7557600080fd5b505160c01b90506001600160c01b03198116611b92846000612b5a565b6001600160c01b03191614611bee576040805162461bcd60e51b815260206004820152601c60248201527f5772697474656e2076616c756520646f6573206e6f74206d6174636800000000604482015290519081900360640190fd5b505050565b6000610dfe734D7479bF76387f35D84B9f1BE586Aa83d911829463d124bd136040518163ffffffff1660e01b815260040160206040518083038186803b158015610dcd57600080fd5b60007308367820CD9849A6FA6964c7cEf53C5C47fA5C0863656b151f6040518163ffffffff1660e01b815260040160206040518083038186803b158015611c8257600080fd5b505af4158015611c96573d6000803e3d6000fd5b505050506040513d6020811015611cac57600080fd5b50516040805163fd198e5560e01b815290516001600160401b03909216917308367820CD9849A6FA6964c7cEf53C5C47fA5C089163fd198e55916004808301926020929190829003018186803b1580156119d657600080fd5b6000610dfe734D7479bF76387f35D84B9f1BE586Aa83d9118294639ff9932b6040518163ffffffff1660e01b815260040160206040518083038186803b158015610dcd57600080fd5b610d81734D7479bF76387f35D84B9f1BE586Aa83d91182946329301cac6040518163ffffffff1660e01b815260040160206040518083038186803b158015610d4f57600080fd5b610d81734D7479bF76387f35D84B9f1BE586Aa83d9118294638fd6b7c46040518163ffffffff1660e01b815260040160206040518083038186803b158015610d4f57600080fd5b6000610dfe734D7479bF76387f35D84B9f1BE586Aa83d911829463520aff6c6040518163ffffffff1660e01b815260040160206040518083038186803b158015610dcd57600080fd5b8151835114611e655760405162461bcd60e51b8152600401808060200182810382526027815260200180612ef96027913960400191505060405180910390fd5b8051835114611ea55760405162461bcd60e51b8152600401808060200182810382526027815260200180612ef96027913960400191505060405180910390fd5b600080558251611ebc906001906020860190612d05565b508151611ed0906002906020850190612dbd565b508051611ee4906003906020840190612e2a565b50505050565b6000610dfe734D7479bF76387f35D84B9f1BE586Aa83d9118294632935b8ce6040518163ffffffff1660e01b815260040160206040518083038186803b158015610dcd57600080fd5b6000611f3d612217565b90508115611f89577308367820CD9849A6FA6964c7cEf53C5C47fA5C0863fd198e556040518163ffffffff1660e01b815260040160206040518083038186803b15801561114957600080fd5b7308367820CD9849A6FA6964c7cEf53C5C47fA5C0863fd198e556040518163ffffffff1660e01b815260040160206040518083038186803b1580156111bf57600080fd5b610d81734D7479bF76387f35D84B9f1BE586Aa83d911829463520aff6c6040518163ffffffff1660e01b815260040160206040518083038186803b158015610d4f57600080fd5b610d81734D7479bF76387f35D84B9f1BE586Aa83d911829463443fd5986040518163ffffffff1660e01b815260040160206040518083038186803b158015610d4f57600080fd5b6000610dfe734D7479bF76387f35D84B9f1BE586Aa83d9118294639a59734c6040518163ffffffff1660e01b815260040160206040518083038186803b158015610dcd57600080fd5b610d8173fdFF3De6C36305319d756455843963080f38cb42630a279d716040518163ffffffff1660e01b815260040160206040518083038186803b158015610d4f57600080fd5b60006120f5612217565b90508115612141577308367820CD9849A6FA6964c7cEf53C5C47fA5C0863a34556826040518163ffffffff1660e01b815260040160206040518083038186803b15801561114957600080fd5b7308367820CD9849A6FA6964c7cEf53C5C47fA5C0863a34556826040518163ffffffff1660e01b815260040160206040518083038186803b1580156111bf57600080fd5b6000610dfe734D7479bF76387f35D84B9f1BE586Aa83d91182946342db36676040518163ffffffff1660e01b815260040160206040518083038186803b158015610dcd57600080fd5b6000610dfe734D7479bF76387f35D84B9f1BE586Aa83d911829463929127db6040518163ffffffff1660e01b815260040160206040518083038186803b158015610dcd57600080fd5b6000610dfe734D7479bF76387f35D84B9f1BE586Aa83d9118294632ffdabc56040518163ffffffff1660e01b815260040160206040518083038186803b158015610dcd57600080fd5b610d81734D7479bF76387f35D84B9f1BE586Aa83d9118294636630ad876040518163ffffffff1660e01b815260040160206040518083038186803b158015610d4f57600080fd5b6000610dfe734D7479bF76387f35D84B9f1BE586Aa83d911829463e80d17516040518163ffffffff1660e01b815260040160206040518083038186803b158015610dcd57600080fd5b60006122fa612217565b90507308367820CD9849A6FA6964c7cEf53C5C47fA5C0863910a52476040518163ffffffff1660e01b815260040160206040518083038186803b15801561234057600080fd5b505af4158015612354573d6000803e3d6000fd5b505050506040513d602081101561236a57600080fd5b50516040805163317d2bb560e01b815290516001600160401b0385811693169290921b917308367820CD9849A6FA6964c7cEf53C5C47fA5C089163317d2bb5916004808301926020929190829003018186803b1580156123c957600080fd5b505af41580156123dd573d6000803e3d6000fd5b505050506040513d60208110156123f357600080fd5b505160408051632ffdabc560e01b815290519119939093169190911791610eab91734D7479bF76387f35D84B9f1BE586Aa83d911829491632ffdabc5916004808301926020929190829003018186803b158015610d4f57600080fd5b610d81734D7479bF76387f35D84B9f1BE586Aa83d9118294632935b8ce6040518163ffffffff1660e01b815260040160206040518083038186803b158015610d4f57600080fd5b60007308367820CD9849A6FA6964c7cEf53C5C47fA5C0863e89d408d6040518163ffffffff1660e01b815260040160206040518083038186803b1580156124dc57600080fd5b505af41580156124f0573d6000803e3d6000fd5b505050506040513d602081101561250657600080fd5b50516040805163e697ace960e01b815290516001600160401b03909216917308367820CD9849A6FA6964c7cEf53C5C47fA5C089163e697ace9916004808301926020929190829003018186803b1580156119d657600080fd5b6000610dfe734D7479bF76387f35D84B9f1BE586Aa83d911829463a43e290f6040518163ffffffff1660e01b815260040160206040518083038186803b158015610dcd57600080fd5b610d8173fdFF3De6C36305319d756455843963080f38cb4263521819f56040518163ffffffff1660e01b815260040160206040518083038186803b158015610d4f57600080fd5b610d81734D7479bF76387f35D84B9f1BE586Aa83d911829463e2e2e7126040518163ffffffff1660e01b815260040160206040518083038186803b158015610d4f57600080fd5b6000610dfe73fdFF3De6C36305319d756455843963080f38cb42630a279d716040518163ffffffff1660e01b815260040160206040518083038186803b158015610dcd57600080fd5b610d81734D7479bF76387f35D84B9f1BE586Aa83d91182946342db36676040518163ffffffff1660e01b815260040160206040518083038186803b158015610d4f57600080fd5b610d81734D7479bF76387f35D84B9f1BE586Aa83d911829463da3e8d7b6040518163ffffffff1660e01b815260040160206040518083038186803b158015610d4f57600080fd5b60007308367820CD9849A6FA6964c7cEf53C5C47fA5C0863910a52476040518163ffffffff1660e01b815260040160206040518083038186803b15801561275357600080fd5b505af4158015612767573d6000803e3d6000fd5b505050506040513d602081101561277d57600080fd5b50516040805163317d2bb560e01b815290516001600160401b03909216917308367820CD9849A6FA6964c7cEf53C5C47fA5C089163317d2bb5916004808301926020929190829003018186803b1580156119d657600080fd5b610d81734D7479bF76387f35D84B9f1BE586Aa83d911829463d41a5b596040518163ffffffff1660e01b815260040160206040518083038186803b158015610d4f57600080fd5b600073E3488789Be5B91633E332FA047fE8009898DD9D263bf1924c5612844846001612b5a565b60c01c6040518263ffffffff1660e01b815260040180826001600160401b0316815260200191505060206040518083038186803b15801561288457600080fd5b505af4158015612898573d6000803e3d6000fd5b505050506040513d60208110156128ae57600080fd5b505192915050565b610d8173BaDC34c0fc1233b68a4a486C227C495f82Be5eB663870981356040518163ffffffff1660e01b815260040160206040518083038186803b158015610d4f57600080fd5b600060086001600160401b038316049050806001600160401b03166008141561292f5761292a8484611af1565b611ee4565b6007198416808503600061294283612b44565b9050600073E3488789Be5B91633E332FA047fE8009898DD9D263bf1924c5846008026001600160401b03166001896001600160401b031660026001600160401b03160a036001600160401b0316901b6040518263ffffffff1660e01b815260040180826001600160401b0316815260200191505060206040518083038186803b1580156129ce57600080fd5b505af41580156129e2573d6000803e3d6000fd5b505050506040513d60208110156129f857600080fd5b50516040805163bf1924c560e01b81526001600160401b0389811660020a600019018b16166004820152905191925060009173E3488789Be5B91633E332FA047fE8009898DD9D29163bf1924c5916024808301926020929190829003018186803b158015612a6557600080fd5b505af4158015612a79573d6000803e3d6000fd5b505050506040513d6020811015612a8f57600080fd5b50516040805163bf1924c560e01b81526001600160401b038084166008890282161c861988161790811660048301529151929350909173E3488789Be5B91633E332FA047fE8009898DD9D29163bf1924c5916024808301926020929190829003018186803b158015612b0057600080fd5b505af4158015612b14573d6000803e3d6000fd5b505050506040513d6020811015612b2a57600080fd5b50519050612b388682611af1565b50505050505050505050565b6000612b51826001612b5a565b60c01c92915050565b6000811515600360005481548110612b6e57fe5b90600052602060002090602091828204019190069054906101000a900460ff16151514612be2576040805162461bcd60e51b815260206004820152601f60248201527f41636365737320776173206e6f742074686520636f7272656374207479706500604482015290519081900360640190fd5b6000600160005481548110612bf357fe5b90600052602060002090600491828204019190066008029054906101000a90046001600160401b031690506000600260005481548110612c2f57fe5b60009182526020822060048204015482546001019092556003166008026101000a900460c01b90506007821615612cad576040805162461bcd60e51b815260206004820152601760248201527f506f736974696f6e206973206e6f7420616c69676e6564000000000000000000604482015290519081900360640190fd5b846001600160401b0316826001600160401b031614612cfd5760405162461bcd60e51b8152600401808060200182810382526026815260200180612ed36026913960400191505060405180910390fd5b949350505050565b82805482825590600052602060002090600301600490048101928215612dad5791602002820160005b83821115612d7857835183826101000a8154816001600160401b0302191690836001600160401b031602179055509260200192600801602081600701049283019260010302612d2e565b8015612dab5782816101000a8154906001600160401b030219169055600801602081600701049283019260010302612d78565b505b50612db9929150612ebd565b5090565b82805482825590600052602060002090600301600490048101928215612dad5791602002820160005b83821115612d7857835183826101000a8154816001600160401b03021916908360c01c02179055509260200192600801602081600701049283019260010302612de6565b82805482825590600052602060002090601f01602090048101928215612dad5791602002820160005b83821115612e9057835183826101000a81548160ff0219169083151502179055509260200192600101602081600001049283019260010302612e53565b8015612dab5782816101000a81549060ff0219169055600101602081600001049283019260010302612e90565b5b80821115612db95760008155600101612ebe56fe506f736974696f6e20616e642072656164206164647265737320646f206e6f74206d61746368526561642f77726974652061727261797320617265206e6f74207468652073616d652073697a65a2646970667358221220d8ad88147f407e1aa5f265625c1c1c5882c5f9367822640b6b9cae9958deedda64736f6c63430007040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106104495760003560e01c8063854dba4011610241578063b5b98ed41161013b578063dd5c4a14116100c3578063f7ac913d11610087578063f7ac913d14610c50578063f991158714610c58578063fa644af514610c7e578063fbdb975d14610ca4578063fd295abe14610cca57610449565b8063dd5c4a1414610bb0578063f21d94f814610bd6578063f2cf6ceb14610bfc578063f55c4d3814610c04578063f604edb814610c2a57610449565b8063cc92cbf71161010a578063cc92cbf714610b4c578063cecdae5314610b54578063d2be7b6d14610b7a578063d40d17c514610ba0578063daded5c214610ba857610449565b8063b5b98ed414610b0e578063becdc10d14610b16578063c133b7ff14610b1e578063cbc446b114610b2657610449565b80639c872d02116101c9578063aaed4f071161018d578063aaed4f0714610a75578063ab9779b714610a9b578063af63b2a814610ac1578063b2325aef14610ac9578063b27ec92014610aef57610449565b80639c872d0214610875578063a317ce9d1461089b578063a47594df146108a3578063a740dbc114610a4e578063a7458b9514610a5657610449565b80638e32f35e116102105780638e32f35e146108095780639485871b14610837578063968644f01461083f5780639b7021ce146108475780639c7b005d1461084f57610449565b8063854dba40146107ad57806386099c54146107b557806386676d43146107bd57806389365909146107e357610449565b806351bb3615116103525780636232e59c116102da5780636dc95c2e1161029e5780636dc95c2e146107235780636f6c0e7d1461075157806378c495741461075957806378ddee751461077f578063834aa4f6146107a557610449565b80636232e59c146106dd5780636475e34214610703578063650ca32b1461070b5780636a72b27d146107135780636cd24daf1461071b57610449565b80635790783711610321578063579078371461065b5780635af47ca7146106815780635dadd78a146106a75780635e5ca652146106af5780635f824bf9146106d557610449565b806351bb3615146105ff57806354749af314610607578063568b27021461062d578063575832df1461063557610449565b806328520b30116103d557806334970f18116103a457806334970f181461057c5780633a48bb561461058457806345057ed7146105a35780634ae9388b146105c957806350cec2d5146105d157610449565b806328520b301461052057806328751b36146105285780632ca2bd161461054e5780632e963a801461057457610449565b806311cf3a221161041c57806311cf3a22146104da57806315dd9c06146104e257806318e504db146105085780631bf2f73d146105105780631e5e61901461051857610449565b8063080aa5d11461044e5780630df3e295146104685780630f84c0461461049057806310d74c7d146104b4575b600080fd5b610456610d02565b60408051918252519081900360200190f35b61048e6004803603602081101561047e57600080fd5b50356001600160401b0316610d08565b005b610498610d84565b604080516001600160401b039092168252519081900360200190f35b61048e600480360360208110156104ca57600080fd5b50356001600160401b0316610e03565b610498610e4a565b61048e600480360360208110156104f857600080fd5b50356001600160401b0316610e93565b610498610eaf565b610498610ef8565b610498610f41565b610498610f8a565b61048e6004803603602081101561053e57600080fd5b50356001600160401b0316610fd3565b61048e6004803603602081101561056457600080fd5b50356001600160401b031661101a565b610498611061565b6104986110aa565b61048e6004803603602081101561059a57600080fd5b503515156110f3565b61048e600480360360208110156105b957600080fd5b50356001600160401b0316611235565b61049861124c565b610498600480360360408110156105e757600080fd5b506001600160401b0381358116916020013516611295565b61049861140b565b61048e6004803603602081101561061d57600080fd5b50356001600160401b0316611454565b610498611468565b61048e6004803603602081101561064b57600080fd5b50356001600160401b03166114b1565b61048e6004803603602081101561067157600080fd5b50356001600160401b03166114f8565b61048e6004803603602081101561069757600080fd5b50356001600160401b031661153f565b610498611586565b61048e600480360360208110156106c557600080fd5b50356001600160401b03166115cf565b610498611616565b610498600480360360208110156106f357600080fd5b50356001600160401b031661165f565b610498611673565b6104986116bc565b610498611705565b61049861174e565b61048e6004803603604081101561073957600080fd5b506001600160401b0381358116916020013516611797565b6104986117a4565b61048e6004803603602081101561076f57600080fd5b50356001600160401b03166117ed565b61048e6004803603602081101561079557600080fd5b50356001600160401b0316611834565b61049861187b565b6104986118c4565b61049861190d565b61048e600480360360208110156107d357600080fd5b50356001600160401b0316611a63565b61048e600480360360208110156107f957600080fd5b50356001600160401b0316611aaa565b61048e6004803603604081101561081f57600080fd5b506001600160401b0381358116916020013516611af1565b610498611bf3565b610498611c3c565b610498611d05565b61048e6004803603602081101561086557600080fd5b50356001600160401b0316611d4e565b61048e6004803603602081101561088b57600080fd5b50356001600160401b0316611d95565b610498611ddc565b61048e600480360360608110156108b957600080fd5b8101906020810181356401000000008111156108d457600080fd5b8201836020820111156108e657600080fd5b8035906020019184602083028401116401000000008311171561090857600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929594936020810193503591505064010000000081111561095857600080fd5b82018360208201111561096a57600080fd5b8035906020019184602083028401116401000000008311171561098c57600080fd5b91908080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525092959493602081019350359150506401000000008111156109dc57600080fd5b8201836020820111156109ee57600080fd5b80359060200191846020830284011164010000000083111715610a1057600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550611e25945050505050565b610498611eea565b61048e60048036036020811015610a6c57600080fd5b50351515611f33565b61048e60048036036020811015610a8b57600080fd5b50356001600160401b0316611fcd565b61048e60048036036020811015610ab157600080fd5b50356001600160401b0316612014565b61049861205b565b61048e60048036036020811015610adf57600080fd5b50356001600160401b03166120a4565b61048e60048036036020811015610b0557600080fd5b503515156120eb565b610498612185565b6104986121ce565b610498612217565b61048e60048036036020811015610b3c57600080fd5b50356001600160401b0316612260565b6104986122a7565b61048e60048036036020811015610b6a57600080fd5b50356001600160401b03166122f0565b61048e60048036036020811015610b9057600080fd5b50356001600160401b031661244f565b610498612496565b61049861255f565b61048e60048036036020811015610bc657600080fd5b50356001600160401b03166125a8565b61048e60048036036020811015610bec57600080fd5b50356001600160401b03166125ef565b610498612636565b61048e60048036036020811015610c1a57600080fd5b50356001600160401b031661267f565b61048e60048036036020811015610c4057600080fd5b50356001600160401b03166126c6565b61049861270d565b61048e60048036036020811015610c6e57600080fd5b50356001600160401b03166127d6565b61049860048036036020811015610c9457600080fd5b50356001600160401b031661281d565b61048e60048036036020811015610cba57600080fd5b50356001600160401b03166128b6565b61048e60048036036060811015610ce057600080fd5b506001600160401b0381358116916020810135821691604090910135166128fd565b60005490565b610d8173__$edd6a44efa4a8bdf57aa57ccba2bcfbb1d$__639a59734c6040518163ffffffff1660e01b815260040160206040518083038186803b158015610d4f57600080fd5b505af4158015610d63573d6000803e3d6000fd5b505050506040513d6020811015610d7957600080fd5b505182611af1565b50565b6000610dfe73__$edd6a44efa4a8bdf57aa57ccba2bcfbb1d$__636630ad876040518163ffffffff1660e01b815260040160206040518083038186803b158015610dcd57600080fd5b505af4158015610de1573d6000803e3d6000fd5b505050506040513d6020811015610df757600080fd5b505161281d565b905090565b610d8173__$edd6a44efa4a8bdf57aa57ccba2bcfbb1d$__6372eb67d06040518163ffffffff1660e01b815260040160206040518083038186803b158015610d4f57600080fd5b6000610dfe73__$edd6a44efa4a8bdf57aa57ccba2bcfbb1d$__638fd6b7c46040518163ffffffff1660e01b815260040160206040518083038186803b158015610dcd57600080fd5b6000610e9d611ddc565b8219169050610eab81611fcd565b5050565b6000610dfe73__$edd6a44efa4a8bdf57aa57ccba2bcfbb1d$__63734b96006040518163ffffffff1660e01b815260040160206040518083038186803b158015610dcd57600080fd5b6000610dfe73__$edd6a44efa4a8bdf57aa57ccba2bcfbb1d$__63443fd5986040518163ffffffff1660e01b815260040160206040518083038186803b158015610dcd57600080fd5b6000610dfe73__$edd6a44efa4a8bdf57aa57ccba2bcfbb1d$__63ca04595a6040518163ffffffff1660e01b815260040160206040518083038186803b158015610dcd57600080fd5b6000610dfe73__$edd6a44efa4a8bdf57aa57ccba2bcfbb1d$__6372eb67d06040518163ffffffff1660e01b815260040160206040518083038186803b158015610dcd57600080fd5b610d8173__$edd6a44efa4a8bdf57aa57ccba2bcfbb1d$__63ca04595a6040518163ffffffff1660e01b815260040160206040518083038186803b158015610d4f57600080fd5b610d8173__$edd6a44efa4a8bdf57aa57ccba2bcfbb1d$__63d124bd136040518163ffffffff1660e01b815260040160206040518083038186803b158015610d4f57600080fd5b6000610dfe73__$edd6a44efa4a8bdf57aa57ccba2bcfbb1d$__6329301cac6040518163ffffffff1660e01b815260040160206040518083038186803b158015610dcd57600080fd5b6000610dfe73__$96c0387300a4d16af366df01fc33f52e50$__63521819f56040518163ffffffff1660e01b815260040160206040518083038186803b158015610dcd57600080fd5b60006110fd612217565b9050811561117b5773__$6af7953b03ecb3cadd1ca9bb3675b9b8d6$__63e697ace96040518163ffffffff1660e01b815260040160206040518083038186803b15801561114957600080fd5b505af415801561115d573d6000803e3d6000fd5b505050506040513d602081101561117357600080fd5b5051176111ee565b73__$6af7953b03ecb3cadd1ca9bb3675b9b8d6$__63e697ace96040518163ffffffff1660e01b815260040160206040518083038186803b1580156111bf57600080fd5b505af41580156111d3573d6000803e3d6000fd5b505050506040513d60208110156111e957600080fd5b505119165b610eab73__$edd6a44efa4a8bdf57aa57ccba2bcfbb1d$__632ffdabc56040518163ffffffff1660e01b815260040160206040518083038186803b158015610d4f57600080fd5b600061123f611ddc565b82179050610eab81611fcd565b6000610dfe73__$edd6a44efa4a8bdf57aa57ccba2bcfbb1d$__63b255e9e46040518163ffffffff1660e01b815260040160206040518083038186803b158015610dcd57600080fd5b60006007198316808403826112a983612b44565b9050600073__$184ef4a65c614d890e6225597d290b0ed9$__63bf1924c5846008026001600160401b03166001896001600160401b031660026001600160401b03160a036001600160401b0316901b6040518263ffffffff1660e01b815260040180826001600160401b0316815260200191505060206040518083038186803b15801561133557600080fd5b505af4158015611349573d6000803e3d6000fd5b505050506040513d602081101561135f57600080fd5b50516040805163bf1924c560e01b81526001600160401b03858416811660048301529151929350600886029091169173__$184ef4a65c614d890e6225597d290b0ed9$__9163bf1924c5916024808301926020929190829003018186803b1580156113c957600080fd5b505af41580156113dd573d6000803e3d6000fd5b505050506040513d60208110156113f357600080fd5b50516001600160401b0316901c979650505050505050565b6000610dfe73__$edd6a44efa4a8bdf57aa57ccba2bcfbb1d$__637047f4df6040518163ffffffff1660e01b815260040160206040518083038186803b158015610dcd57600080fd5b61145d816122f0565b610d816000196125ef565b6000610dfe73__$edd6a44efa4a8bdf57aa57ccba2bcfbb1d$__6345827f696040518163ffffffff1660e01b815260040160206040518083038186803b158015610dcd57600080fd5b610d8173__$edd6a44efa4a8bdf57aa57ccba2bcfbb1d$__63e59cb5746040518163ffffffff1660e01b815260040160206040518083038186803b158015610d4f57600080fd5b610d8173__$edd6a44efa4a8bdf57aa57ccba2bcfbb1d$__63734b96006040518163ffffffff1660e01b815260040160206040518083038186803b158015610d4f57600080fd5b610d8173__$edd6a44efa4a8bdf57aa57ccba2bcfbb1d$__639ff9932b6040518163ffffffff1660e01b815260040160206040518083038186803b158015610d4f57600080fd5b6000610dfe73__$edd6a44efa4a8bdf57aa57ccba2bcfbb1d$__63e2e2e7126040518163ffffffff1660e01b815260040160206040518083038186803b158015610dcd57600080fd5b610d8173__$edd6a44efa4a8bdf57aa57ccba2bcfbb1d$__63a43e290f6040518163ffffffff1660e01b815260040160206040518083038186803b158015610d4f57600080fd5b6000610dfe73__$edd6a44efa4a8bdf57aa57ccba2bcfbb1d$__6392f5aa226040518163ffffffff1660e01b815260040160206040518083038186803b158015610dcd57600080fd5b600061166d8260080261281d565b92915050565b6000610dfe73__$3c056aa8a31fb3ce78f242f7ef99e26695$__63870981356040518163ffffffff1660e01b815260040160206040518083038186803b158015610dcd57600080fd5b6000610dfe73__$edd6a44efa4a8bdf57aa57ccba2bcfbb1d$__63d41a5b596040518163ffffffff1660e01b815260040160206040518083038186803b158015610dcd57600080fd5b6000610dfe73__$edd6a44efa4a8bdf57aa57ccba2bcfbb1d$__63e59cb5746040518163ffffffff1660e01b815260040160206040518083038186803b158015610dcd57600080fd5b6000610dfe73__$edd6a44efa4a8bdf57aa57ccba2bcfbb1d$__63da3e8d7b6040518163ffffffff1660e01b815260040160206040518083038186803b158015610dcd57600080fd5b610eab8260080282611af1565b6000610dfe73__$96c0387300a4d16af366df01fc33f52e50$__636299ea3f6040518163ffffffff1660e01b815260040160206040518083038186803b158015610dcd57600080fd5b610d8173__$edd6a44efa4a8bdf57aa57ccba2bcfbb1d$__6345827f696040518163ffffffff1660e01b815260040160206040518083038186803b158015610d4f57600080fd5b610d8173__$edd6a44efa4a8bdf57aa57ccba2bcfbb1d$__63b255e9e46040518163ffffffff1660e01b815260040160206040518083038186803b158015610d4f57600080fd5b6000610dfe73__$edd6a44efa4a8bdf57aa57ccba2bcfbb1d$__634a4c35106040518163ffffffff1660e01b815260040160206040518083038186803b158015610dcd57600080fd5b6000610dfe73__$edd6a44efa4a8bdf57aa57ccba2bcfbb1d$__63c585eede6040518163ffffffff1660e01b815260040160206040518083038186803b158015610dcd57600080fd5b600073__$6af7953b03ecb3cadd1ca9bb3675b9b8d6$__6317a0cac36040518163ffffffff1660e01b815260040160206040518083038186803b15801561195357600080fd5b505af4158015611967573d6000803e3d6000fd5b505050506040513d602081101561197d57600080fd5b5051604080516351a2ab4160e11b815290516001600160401b039092169173__$6af7953b03ecb3cadd1ca9bb3675b9b8d6$__9163a3455682916004808301926020929190829003018186803b1580156119d657600080fd5b505af41580156119ea573d6000803e3d6000fd5b505050506040513d6020811015611a0057600080fd5b505160408051632ffdabc560e01b81529051611a529173__$edd6a44efa4a8bdf57aa57ccba2bcfbb1d$__91632ffdabc591600480820192602092909190829003018186803b158015610dcd57600080fd5b166001600160401b0316901c905090565b610d8173__$edd6a44efa4a8bdf57aa57ccba2bcfbb1d$__63e80d17516040518163ffffffff1660e01b815260040160206040518083038186803b158015610d4f57600080fd5b610d8173__$edd6a44efa4a8bdf57aa57ccba2bcfbb1d$__637047f4df6040518163ffffffff1660e01b815260040160206040518083038186803b158015610d4f57600080fd5b600073__$184ef4a65c614d890e6225597d290b0ed9$__63bf1924c5836040518263ffffffff1660e01b815260040180826001600160401b0316815260200191505060206040518083038186803b158015611b4b57600080fd5b505af4158015611b5f573d6000803e3d6000fd5b505050506040513d6020811015611b7557600080fd5b505160c01b90506001600160c01b03198116611b92846000612b5a565b6001600160c01b03191614611bee576040805162461bcd60e51b815260206004820152601c60248201527f5772697474656e2076616c756520646f6573206e6f74206d6174636800000000604482015290519081900360640190fd5b505050565b6000610dfe73__$edd6a44efa4a8bdf57aa57ccba2bcfbb1d$__63d124bd136040518163ffffffff1660e01b815260040160206040518083038186803b158015610dcd57600080fd5b600073__$6af7953b03ecb3cadd1ca9bb3675b9b8d6$__63656b151f6040518163ffffffff1660e01b815260040160206040518083038186803b158015611c8257600080fd5b505af4158015611c96573d6000803e3d6000fd5b505050506040513d6020811015611cac57600080fd5b50516040805163fd198e5560e01b815290516001600160401b039092169173__$6af7953b03ecb3cadd1ca9bb3675b9b8d6$__9163fd198e55916004808301926020929190829003018186803b1580156119d657600080fd5b6000610dfe73__$edd6a44efa4a8bdf57aa57ccba2bcfbb1d$__639ff9932b6040518163ffffffff1660e01b815260040160206040518083038186803b158015610dcd57600080fd5b610d8173__$edd6a44efa4a8bdf57aa57ccba2bcfbb1d$__6329301cac6040518163ffffffff1660e01b815260040160206040518083038186803b158015610d4f57600080fd5b610d8173__$edd6a44efa4a8bdf57aa57ccba2bcfbb1d$__638fd6b7c46040518163ffffffff1660e01b815260040160206040518083038186803b158015610d4f57600080fd5b6000610dfe73__$edd6a44efa4a8bdf57aa57ccba2bcfbb1d$__63520aff6c6040518163ffffffff1660e01b815260040160206040518083038186803b158015610dcd57600080fd5b8151835114611e655760405162461bcd60e51b8152600401808060200182810382526027815260200180612ef96027913960400191505060405180910390fd5b8051835114611ea55760405162461bcd60e51b8152600401808060200182810382526027815260200180612ef96027913960400191505060405180910390fd5b600080558251611ebc906001906020860190612d05565b508151611ed0906002906020850190612dbd565b508051611ee4906003906020840190612e2a565b50505050565b6000610dfe73__$edd6a44efa4a8bdf57aa57ccba2bcfbb1d$__632935b8ce6040518163ffffffff1660e01b815260040160206040518083038186803b158015610dcd57600080fd5b6000611f3d612217565b90508115611f895773__$6af7953b03ecb3cadd1ca9bb3675b9b8d6$__63fd198e556040518163ffffffff1660e01b815260040160206040518083038186803b15801561114957600080fd5b73__$6af7953b03ecb3cadd1ca9bb3675b9b8d6$__63fd198e556040518163ffffffff1660e01b815260040160206040518083038186803b1580156111bf57600080fd5b610d8173__$edd6a44efa4a8bdf57aa57ccba2bcfbb1d$__63520aff6c6040518163ffffffff1660e01b815260040160206040518083038186803b158015610d4f57600080fd5b610d8173__$edd6a44efa4a8bdf57aa57ccba2bcfbb1d$__63443fd5986040518163ffffffff1660e01b815260040160206040518083038186803b158015610d4f57600080fd5b6000610dfe73__$edd6a44efa4a8bdf57aa57ccba2bcfbb1d$__639a59734c6040518163ffffffff1660e01b815260040160206040518083038186803b158015610dcd57600080fd5b610d8173__$96c0387300a4d16af366df01fc33f52e50$__630a279d716040518163ffffffff1660e01b815260040160206040518083038186803b158015610d4f57600080fd5b60006120f5612217565b905081156121415773__$6af7953b03ecb3cadd1ca9bb3675b9b8d6$__63a34556826040518163ffffffff1660e01b815260040160206040518083038186803b15801561114957600080fd5b73__$6af7953b03ecb3cadd1ca9bb3675b9b8d6$__63a34556826040518163ffffffff1660e01b815260040160206040518083038186803b1580156111bf57600080fd5b6000610dfe73__$edd6a44efa4a8bdf57aa57ccba2bcfbb1d$__6342db36676040518163ffffffff1660e01b815260040160206040518083038186803b158015610dcd57600080fd5b6000610dfe73__$edd6a44efa4a8bdf57aa57ccba2bcfbb1d$__63929127db6040518163ffffffff1660e01b815260040160206040518083038186803b158015610dcd57600080fd5b6000610dfe73__$edd6a44efa4a8bdf57aa57ccba2bcfbb1d$__632ffdabc56040518163ffffffff1660e01b815260040160206040518083038186803b158015610dcd57600080fd5b610d8173__$edd6a44efa4a8bdf57aa57ccba2bcfbb1d$__636630ad876040518163ffffffff1660e01b815260040160206040518083038186803b158015610d4f57600080fd5b6000610dfe73__$edd6a44efa4a8bdf57aa57ccba2bcfbb1d$__63e80d17516040518163ffffffff1660e01b815260040160206040518083038186803b158015610dcd57600080fd5b60006122fa612217565b905073__$6af7953b03ecb3cadd1ca9bb3675b9b8d6$__63910a52476040518163ffffffff1660e01b815260040160206040518083038186803b15801561234057600080fd5b505af4158015612354573d6000803e3d6000fd5b505050506040513d602081101561236a57600080fd5b50516040805163317d2bb560e01b815290516001600160401b0385811693169290921b9173__$6af7953b03ecb3cadd1ca9bb3675b9b8d6$__9163317d2bb5916004808301926020929190829003018186803b1580156123c957600080fd5b505af41580156123dd573d6000803e3d6000fd5b505050506040513d60208110156123f357600080fd5b505160408051632ffdabc560e01b815290519119939093169190911791610eab9173__$edd6a44efa4a8bdf57aa57ccba2bcfbb1d$__91632ffdabc5916004808301926020929190829003018186803b158015610d4f57600080fd5b610d8173__$edd6a44efa4a8bdf57aa57ccba2bcfbb1d$__632935b8ce6040518163ffffffff1660e01b815260040160206040518083038186803b158015610d4f57600080fd5b600073__$6af7953b03ecb3cadd1ca9bb3675b9b8d6$__63e89d408d6040518163ffffffff1660e01b815260040160206040518083038186803b1580156124dc57600080fd5b505af41580156124f0573d6000803e3d6000fd5b505050506040513d602081101561250657600080fd5b50516040805163e697ace960e01b815290516001600160401b039092169173__$6af7953b03ecb3cadd1ca9bb3675b9b8d6$__9163e697ace9916004808301926020929190829003018186803b1580156119d657600080fd5b6000610dfe73__$edd6a44efa4a8bdf57aa57ccba2bcfbb1d$__63a43e290f6040518163ffffffff1660e01b815260040160206040518083038186803b158015610dcd57600080fd5b610d8173__$96c0387300a4d16af366df01fc33f52e50$__63521819f56040518163ffffffff1660e01b815260040160206040518083038186803b158015610d4f57600080fd5b610d8173__$edd6a44efa4a8bdf57aa57ccba2bcfbb1d$__63e2e2e7126040518163ffffffff1660e01b815260040160206040518083038186803b158015610d4f57600080fd5b6000610dfe73__$96c0387300a4d16af366df01fc33f52e50$__630a279d716040518163ffffffff1660e01b815260040160206040518083038186803b158015610dcd57600080fd5b610d8173__$edd6a44efa4a8bdf57aa57ccba2bcfbb1d$__6342db36676040518163ffffffff1660e01b815260040160206040518083038186803b158015610d4f57600080fd5b610d8173__$edd6a44efa4a8bdf57aa57ccba2bcfbb1d$__63da3e8d7b6040518163ffffffff1660e01b815260040160206040518083038186803b158015610d4f57600080fd5b600073__$6af7953b03ecb3cadd1ca9bb3675b9b8d6$__63910a52476040518163ffffffff1660e01b815260040160206040518083038186803b15801561275357600080fd5b505af4158015612767573d6000803e3d6000fd5b505050506040513d602081101561277d57600080fd5b50516040805163317d2bb560e01b815290516001600160401b039092169173__$6af7953b03ecb3cadd1ca9bb3675b9b8d6$__9163317d2bb5916004808301926020929190829003018186803b1580156119d657600080fd5b610d8173__$edd6a44efa4a8bdf57aa57ccba2bcfbb1d$__63d41a5b596040518163ffffffff1660e01b815260040160206040518083038186803b158015610d4f57600080fd5b600073__$184ef4a65c614d890e6225597d290b0ed9$__63bf1924c5612844846001612b5a565b60c01c6040518263ffffffff1660e01b815260040180826001600160401b0316815260200191505060206040518083038186803b15801561288457600080fd5b505af4158015612898573d6000803e3d6000fd5b505050506040513d60208110156128ae57600080fd5b505192915050565b610d8173__$3c056aa8a31fb3ce78f242f7ef99e26695$__63870981356040518163ffffffff1660e01b815260040160206040518083038186803b158015610d4f57600080fd5b600060086001600160401b038316049050806001600160401b03166008141561292f5761292a8484611af1565b611ee4565b6007198416808503600061294283612b44565b9050600073__$184ef4a65c614d890e6225597d290b0ed9$__63bf1924c5846008026001600160401b03166001896001600160401b031660026001600160401b03160a036001600160401b0316901b6040518263ffffffff1660e01b815260040180826001600160401b0316815260200191505060206040518083038186803b1580156129ce57600080fd5b505af41580156129e2573d6000803e3d6000fd5b505050506040513d60208110156129f857600080fd5b50516040805163bf1924c560e01b81526001600160401b0389811660020a600019018b16166004820152905191925060009173__$184ef4a65c614d890e6225597d290b0ed9$__9163bf1924c5916024808301926020929190829003018186803b158015612a6557600080fd5b505af4158015612a79573d6000803e3d6000fd5b505050506040513d6020811015612a8f57600080fd5b50516040805163bf1924c560e01b81526001600160401b038084166008890282161c861988161790811660048301529151929350909173__$184ef4a65c614d890e6225597d290b0ed9$__9163bf1924c5916024808301926020929190829003018186803b158015612b0057600080fd5b505af4158015612b14573d6000803e3d6000fd5b505050506040513d6020811015612b2a57600080fd5b50519050612b388682611af1565b50505050505050505050565b6000612b51826001612b5a565b60c01c92915050565b6000811515600360005481548110612b6e57fe5b90600052602060002090602091828204019190069054906101000a900460ff16151514612be2576040805162461bcd60e51b815260206004820152601f60248201527f41636365737320776173206e6f742074686520636f7272656374207479706500604482015290519081900360640190fd5b6000600160005481548110612bf357fe5b90600052602060002090600491828204019190066008029054906101000a90046001600160401b031690506000600260005481548110612c2f57fe5b60009182526020822060048204015482546001019092556003166008026101000a900460c01b90506007821615612cad576040805162461bcd60e51b815260206004820152601760248201527f506f736974696f6e206973206e6f7420616c69676e6564000000000000000000604482015290519081900360640190fd5b846001600160401b0316826001600160401b031614612cfd5760405162461bcd60e51b8152600401808060200182810382526026815260200180612ed36026913960400191505060405180910390fd5b949350505050565b82805482825590600052602060002090600301600490048101928215612dad5791602002820160005b83821115612d7857835183826101000a8154816001600160401b0302191690836001600160401b031602179055509260200192600801602081600701049283019260010302612d2e565b8015612dab5782816101000a8154906001600160401b030219169055600801602081600701049283019260010302612d78565b505b50612db9929150612ebd565b5090565b82805482825590600052602060002090600301600490048101928215612dad5791602002820160005b83821115612d7857835183826101000a8154816001600160401b03021916908360c01c02179055509260200192600801602081600701049283019260010302612de6565b82805482825590600052602060002090601f01602090048101928215612dad5791602002820160005b83821115612e9057835183826101000a81548160ff0219169083151502179055509260200192600101602081600001049283019260010302612e53565b8015612dab5782816101000a81549060ff0219169055600101602081600001049283019260010302612e90565b5b80821115612db95760008155600101612ebe56fe506f736974696f6e20616e642072656164206164647265737320646f206e6f74206d61746368526561642f77726974652061727261797320617265206e6f74207468652073616d652073697a65a2646970667358221220d8ad88147f407e1aa5f265625c1c1c5882c5f9367822640b6b9cae9958deedda64736f6c63430007040033",
  "libraries": {
    "BitsManipulationLibrary": "0xE3488789Be5B91633E332FA047fE8009898DD9D2",
    "RiscVConstants": "0x08367820CD9849A6FA6964c7cEf53C5C47fA5C08",
    "ShadowAddresses": "0x4D7479bF76387f35D84B9f1BE586Aa83d9118294",
    "HTIF": "0xfdFF3De6C36305319d756455843963080f38cb42",
    "CLINT": "0xBaDC34c0fc1233b68a4a486C227C495f82Be5eB6"
  },
  "devdoc": {
    "author": "Felipe Argento",
    "details": "Every read performed by mi.memoryRead or mi.write should be followed by anendianess swap from little endian to big endian. This is the case becauseEVM is big endian but RiscV is little endian.Reference: riscv-spec-v2.2.pdf - Preface to Version 2.0Reference: Ethereum yellowpaper - Version 69351d5Appendix H. Virtual Machine Specification",
    "kind": "dev",
    "methods": {},
    "title": "MemoryInteractor",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "Bridge between Memory Manager and Step",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 5851,
        "contract": "contracts/MemoryInteractor.sol:MemoryInteractor",
        "label": "rwIndex",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 5854,
        "contract": "contracts/MemoryInteractor.sol:MemoryInteractor",
        "label": "rwPositions",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint64)dyn_storage"
      },
      {
        "astId": 5857,
        "contract": "contracts/MemoryInteractor.sol:MemoryInteractor",
        "label": "rwValues",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_bytes8)dyn_storage"
      },
      {
        "astId": 5860,
        "contract": "contracts/MemoryInteractor.sol:MemoryInteractor",
        "label": "isRead",
        "offset": 0,
        "slot": "3",
        "type": "t_array(t_bool)dyn_storage"
      }
    ],
    "types": {
      "t_array(t_bool)dyn_storage": {
        "base": "t_bool",
        "encoding": "dynamic_array",
        "label": "bool[]",
        "numberOfBytes": "32"
      },
      "t_array(t_bytes8)dyn_storage": {
        "base": "t_bytes8",
        "encoding": "dynamic_array",
        "label": "bytes8[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint64)dyn_storage": {
        "base": "t_uint64",
        "encoding": "dynamic_array",
        "label": "uint64[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes8": {
        "encoding": "inplace",
        "label": "bytes8",
        "numberOfBytes": "8"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}