{
  "address": "0xc75083C83Eb33323fAa909E10ecD8837aA8ae2FD",
  "abi": [],
  "transactionHash": "0x3d1df421f942f017e7fb224128f42d0d03c00e27ed7ac67a017cb1870e4d095a",
  "receipt": {
    "to": null,
    "from": "0xD63A9d27E7A573e28889A363310443Cba076D546",
    "contractAddress": "0xc75083C83Eb33323fAa909E10ecD8837aA8ae2FD",
    "transactionIndex": 0,
    "gasUsed": "12838672",
    "logsBloom": "0x
    "blockHash": "0x7ae7f28edf40e5a2a77c36255da82f8eb09569677a001d7f31e54552204a11fb",
    "transactionHash": "0x3d1df421f942f017e7fb224128f42d0d03c00e27ed7ac67a017cb1870e4d095a",
    "logs": [],
    "blockNumber": 10186319,
    "cumulativeGasUsed": "5853572",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "metadata": "{\"compiler\":{\"version\":\"0.7.4+commit.3f05b770\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"author\":\"Felipe Argento\",\"kind\":\"dev\",\"methods\":{\"executeCsrRW(MemoryInteractor,uint32,uint256)\":{\"details\":\"The specific instruction is decided by insncode, which defines the value to be written.\",\"params\":{\"insn\":\"Instruction\",\"insncode\":\"Specific instruction code\",\"mi\":\"MemoryInteractor with which Step function is interacting\"},\"returns\":{\"_0\":\"true if instruction was executed successfuly and false if its an illegal insn exception\"}},\"executeCsrSC(MemoryInteractor,uint32,uint256)\":{\"details\":\"The specific instruction is decided by insncode, which defines the value to be written\",\"params\":{\"insn\":\"Instruction\",\"insncode\":\"Specific instruction code\",\"mi\":\"MemoryInteractor with which Step function is interacting\"},\"returns\":{\"_0\":\"true if instruction was executed successfuly and false if its an illegal insn exception\"}},\"executeCsrSCI(MemoryInteractor,uint32,uint256)\":{\"details\":\"The specific instruction is decided by insncode, which defines the value to be written.\",\"params\":{\"insn\":\"Instruction\",\"insncode\":\"Specific instruction code\",\"mi\":\"MemoryInteractor with which Step function is interacting\"},\"returns\":{\"_0\":\"true if instruction was executed successfuly and false if its an illegal insn exception\"}}},\"title\":\"CSRExecute\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"executeCsrRW(MemoryInteractor,uint32,uint256)\":{\"notice\":\"Implementation of CSRRW and CSRRWI instructions\"},\"executeCsrSC(MemoryInteractor,uint32,uint256)\":{\"notice\":\"Implementation of CSRRS and CSRRC instructions\"},\"executeCsrSCI(MemoryInteractor,uint32,uint256)\":{\"notice\":\"Implementation of CSRRSI and CSRRCI instructions\"}},\"notice\":\"Implements CSR execute logic\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/CSRExecute.sol\":\"CSRExecute\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@cartesi/util/contracts/BitsManipulationLibrary.sol\":{\"content\":\"// Copyright 2020 Cartesi Pte. Ltd.\\n\\n// SPDX-License-Identifier: Apache-2.0\\n// Licensed under the Apache License, Version 2.0 (the \\\"License\\\"); you may not use\\n// this file except in compliance with the License. You may obtain a copy of the\\n// License at http://www.apache.org/licenses/LICENSE-2.0\\n\\n// Unless required by applicable law or agreed to in writing, software distributed\\n// under the License is distributed on an \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR\\n// CONDITIONS OF ANY KIND, either express or implied. See the License for the\\n// specific language governing permissions and limitations under the License.\\n\\n\\npragma solidity ^0.7.0;\\n\\n/// @title Bits Manipulation Library\\n/// @author Felipe Argento / Stephen Chen\\n/// @notice Implements bit manipulation helper functions\\nlibrary BitsManipulationLibrary {\\n\\n    /// @notice Sign extend a shorter signed value to the full int32\\n    /// @param number signed number to be extended\\n    /// @param wordSize number of bits of the signed number, ie, 8 for int8\\n    function int32SignExtension(int32 number, uint32 wordSize)\\n    public pure returns(int32)\\n    {\\n        uint32 uNumber = uint32(number);\\n        bool isNegative = ((uint64(1) << (wordSize - 1)) & uNumber) > 0;\\n        uint32 mask = ((uint32(2) ** wordSize) - 1);\\n\\n        if (isNegative) {\\n            uNumber = uNumber | ~mask;\\n        }\\n\\n        return int32(uNumber);\\n    }\\n\\n    /// @notice Sign extend a shorter signed value to the full uint64\\n    /// @param number signed number to be extended\\n    /// @param wordSize number of bits of the signed number, ie, 8 for int8\\n    function uint64SignExtension(uint64 number, uint64 wordSize)\\n    public pure returns(uint64)\\n    {\\n        uint64 uNumber = number;\\n        bool isNegative = ((uint64(1) << (wordSize - 1)) & uNumber) > 0;\\n        uint64 mask = ((uint64(2) ** wordSize) - 1);\\n\\n        if (isNegative) {\\n            uNumber = uNumber | ~mask;\\n        }\\n\\n        return uNumber;\\n    }\\n\\n    /// @notice Swap byte order of unsigned ints with 64 bytes\\n    /// @param num number to have bytes swapped\\n    function uint64SwapEndian(uint64 num) public pure returns(uint64) {\\n        uint64 output = ((num & 0x00000000000000ff) << 56)|\\n            ((num & 0x000000000000ff00) << 40)|\\n            ((num & 0x0000000000ff0000) << 24)|\\n            ((num & 0x00000000ff000000) << 8) |\\n            ((num & 0x000000ff00000000) >> 8) |\\n            ((num & 0x0000ff0000000000) >> 24)|\\n            ((num & 0x00ff000000000000) >> 40)|\\n            ((num & 0xff00000000000000) >> 56);\\n\\n        return output;\\n    }\\n\\n    /// @notice Swap byte order of unsigned ints with 32 bytes\\n    /// @param num number to have bytes swapped\\n    function uint32SwapEndian(uint32 num) public pure returns(uint32) {\\n        uint32 output = ((num >> 24) & 0xff) | ((num << 8) & 0xff0000) | ((num >> 8) & 0xff00) | ((num << 24) & 0xff000000);\\n        return output;\\n    }\\n}\\n\\n\",\"keccak256\":\"0x95b97e0ae364fb91a3fdcf8132e7b61c745c23dd4e5beb980f396c05a69bbd08\",\"license\":\"Apache-2.0\"},\"contracts/CLINT.sol\":{\"content\":\"// Copyright 2019 Cartesi Pte. Ltd.\\n\\n// SPDX-License-Identifier: Apache-2.0\\n// Licensed under the Apache License, Version 2.0 (the \\\"License\\\"); you may not use\\n// this file except in compliance with the License. You may obtain a copy of the\\n// License at http://www.apache.org/licenses/LICENSE-2.0\\n\\n// Unless required by applicable law or agreed to in writing, software distributed\\n// under the License is distributed on an \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR\\n// CONDITIONS OF ANY KIND, either express or implied. See the License for the\\n// specific language governing permissions and limitations under the License.\\n\\n\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"./MemoryInteractor.sol\\\";\\nimport \\\"./RiscVConstants.sol\\\";\\nimport \\\"./RealTimeClock.sol\\\";\\n\\n\\n/// @title CLINT\\n/// @author Felipe Argento\\n/// @notice Implements the Core Local Interruptor functionalities\\n/// @dev CLINT active addresses are 0x0200bff8(mtime) and 0x02004000(mtimecmp)\\n/// Reference: The Core of Cartesi, v1.02 - Section 3.2 - The Board\\nlibrary CLINT {\\n\\n    uint64 constant CLINT_MSIP0_ADDR = 0x02000000;\\n    uint64 constant CLINT_MTIMECMP_ADDR = 0x02004000;\\n    uint64 constant CLINT_MTIME_ADDR = 0x0200bff8;\\n\\n    /// @notice reads clint\\n    /// @param offset can be uint8, uint16, uint32 or uint64\\n    /// @param wordSize can be uint8, uint16, uint32 or uint64\\n    /// @return bool if read was successfull\\n    /// @return uint64 pval\\n    function clintRead(\\n        MemoryInteractor mi,\\n        uint64 offset,\\n        uint64 wordSize\\n    )\\n    public returns (bool, uint64)\\n    {\\n\\n        if (offset == CLINT_MSIP0_ADDR) {\\n            return clintReadMsip(mi, wordSize);\\n        } else if (offset == CLINT_MTIMECMP_ADDR) {\\n            return clintReadMtime(mi, wordSize);\\n        } else if (offset == CLINT_MTIME_ADDR) {\\n            return clintReadMtimecmp(mi, wordSize);\\n        } else {\\n            return (false, 0);\\n        }\\n    }\\n\\n    /// @notice write to clint\\n    /// @param mi Memory Interactor with which Step function is interacting.\\n    /// @param offset can be uint8, uint16, uint32 or uint64\\n    /// @param val to be written\\n    /// @param wordSize can be uint8, uint16, uint32 or uint64\\n    /// @return bool if write was successfull\\n    function clintWrite(\\n        MemoryInteractor mi,\\n        uint64 offset,\\n        uint64 val,\\n        uint64 wordSize)\\n    public returns (bool)\\n    {\\n        if (offset == CLINT_MSIP0_ADDR) {\\n            if (wordSize == 32) {\\n                if ((val & 1) != 0) {\\n                    mi.setMip(RiscVConstants.getMipMsipMask());\\n                } else {\\n                    mi.resetMip(RiscVConstants.getMipMsipMask());\\n                }\\n                return true;\\n            }\\n            return false;\\n        } else if (offset == CLINT_MTIMECMP_ADDR) {\\n            if (wordSize == 64) {\\n                mi.writeClintMtimecmp(val);\\n                mi.resetMip(RiscVConstants.getMipMsipMask());\\n                return true;\\n            }\\n            // partial mtimecmp is not supported\\n            return false;\\n        }\\n        return false;\\n    }\\n\\n    // internal functions\\n    function clintReadMsip(MemoryInteractor mi, uint64 wordSize)\\n    internal returns (bool, uint64)\\n    {\\n        if (wordSize == 32) {\\n            if ((mi.readMip() & RiscVConstants.getMipMsipMask()) == RiscVConstants.getMipMsipMask()) {\\n                return(true, 1);\\n            } else {\\n                return (true, 0);\\n            }\\n        }\\n        return (false, 0);\\n    }\\n\\n    function clintReadMtime(MemoryInteractor mi, uint64 wordSize)\\n    internal returns (bool, uint64)\\n    {\\n        if (wordSize == 64) {\\n            return (true, RealTimeClock.rtcCycleToTime(mi.readMcycle()));\\n        }\\n        return (false, 0);\\n    }\\n\\n    function clintReadMtimecmp(MemoryInteractor mi, uint64 wordSize)\\n    internal returns (bool, uint64)\\n    {\\n        if (wordSize == 64) {\\n            return (true, mi.readClintMtimecmp());\\n        }\\n        return (false, 0);\\n    }\\n\\n    // getters\\n    function getClintMtimecmp() public pure returns (uint64) {\\n        return CLINT_MTIMECMP_ADDR;\\n    }\\n}\\n\\n\\n\",\"keccak256\":\"0x89a1c4305fc05859156cbd73380aa63ce16a48aba24ce44d4b862b5f415d6362\",\"license\":\"Apache-2.0\"},\"contracts/CSR.sol\":{\"content\":\"// Copyright 2019 Cartesi Pte. Ltd.\\n\\n// SPDX-License-Identifier: Apache-2.0\\n// Licensed under the Apache License, Version 2.0 (the \\\"License\\\"); you may not use\\n// this file except in compliance with the License. You may obtain a copy of the\\n// License at http://www.apache.org/licenses/LICENSE-2.0\\n\\n// Unless required by applicable law or agreed to in writing, software distributed\\n// under the License is distributed on an \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR\\n// CONDITIONS OF ANY KIND, either express or implied. See the License for the\\n// specific language governing permissions and limitations under the License.\\n\\n\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"./MemoryInteractor.sol\\\";\\nimport \\\"./RiscVConstants.sol\\\";\\nimport \\\"./CSRReads.sol\\\";\\n\\n/// @title CSR\\n/// @author Felipe Argento\\n/// @notice Implements main CSR read and write logic\\nlibrary CSR {\\n\\n    //CSR addresses\\n    uint32 constant UCYCLE = 0xc00;\\n    uint32 constant UTIME = 0xc01;\\n    uint32 constant UINSTRET =  0xc02;\\n\\n    uint32 constant SSTATUS = 0x100;\\n    uint32 constant SIE = 0x104;\\n    uint32 constant STVEC = 0x105;\\n    uint32 constant SCOUNTEREN = 0x106;\\n\\n    uint32 constant SSCRATCH = 0x140;\\n    uint32 constant SEPC = 0x141;\\n    uint32 constant SCAUSE = 0x142;\\n    uint32 constant STVAL = 0x143;\\n    uint32 constant SIP = 0x144;\\n\\n    uint32 constant SATP = 0x180;\\n\\n    uint32 constant MVENDORID = 0xf11;\\n    uint32 constant MARCHID = 0xf12;\\n    uint32 constant MIMPID = 0xf13;\\n    uint32 constant MHARTID = 0xf14;\\n\\n    uint32 constant MSTATUS = 0x300;\\n    uint32 constant MISA = 0x301;\\n    uint32 constant MEDELEG = 0x302;\\n    uint32 constant MIDELEG = 0x303;\\n    uint32 constant MIE = 0x304;\\n    uint32 constant MTVEC = 0x305;\\n    uint32 constant MCOUNTEREN = 0x306;\\n\\n    uint32 constant MSCRATCH = 0x340;\\n    uint32 constant MEPC = 0x341;\\n    uint32 constant MCAUSE = 0x342;\\n    uint32 constant MTVAL = 0x343;\\n    uint32 constant MIP = 0x344;\\n\\n    uint32 constant MCYCLE = 0xb00;\\n    uint32 constant MINSTRET = 0xb02;\\n\\n    uint32 constant TSELECT = 0x7a0;\\n    uint32 constant TDATA1 = 0x7a1;\\n    uint32 constant TDATA2 = 0x7a2;\\n    uint32 constant TDATA3 = 0x7a3;\\n\\n    /// @notice Reads the value of a CSR given its address\\n    /// @dev If/else should change to binary search to increase performance\\n    /// @param mi MemoryInteractor with which Step function is interacting.\\n    /// @param csrAddr Address of CSR in file.\\n    /// @return Returns the status of the operation (true for success, false otherwise).\\n    /// @return Register value.\\n    function readCsr(MemoryInteractor mi, uint32 csrAddr)\\n    public returns (bool, uint64)\\n    {\\n        // Attemps to access a CSR without appropriate privilege level raises a\\n        // illegal instruction exception.\\n        // Reference: riscv-privileged-v1.10 - section 2.1 - page 7.\\n        if (csrPriv(csrAddr) > mi.readIflagsPrv()) {\\n            return(false, 0);\\n        }\\n        if (csrAddr == UCYCLE) {\\n            return CSRReads.readCsrCycle(mi, csrAddr);\\n        } else if (csrAddr == UINSTRET) {\\n            return CSRReads.readCsrInstret(mi, csrAddr);\\n        } else if (csrAddr == UTIME) {\\n            return CSRReads.readCsrTime(mi, csrAddr);\\n        } else if (csrAddr == SSTATUS) {\\n            return CSRReads.readCsrSstatus(mi);\\n        } else if (csrAddr == SIE) {\\n            return CSRReads.readCsrSie(mi);\\n        } else if (csrAddr == STVEC) {\\n            return CSRReads.readCsrStvec(mi);\\n        } else if (csrAddr == SCOUNTEREN) {\\n            return CSRReads.readCsrScounteren(mi);\\n        } else if (csrAddr == SSCRATCH) {\\n            return CSRReads.readCsrSscratch(mi);\\n        } else if (csrAddr == SEPC) {\\n            return CSRReads.readCsrSepc(mi);\\n        } else if (csrAddr == SCAUSE) {\\n            return CSRReads.readCsrScause(mi);\\n        } else if (csrAddr == STVAL) {\\n            return CSRReads.readCsrStval(mi);\\n        } else if (csrAddr == SIP) {\\n            return CSRReads.readCsrSip(mi);\\n        } else if (csrAddr == SATP) {\\n            return CSRReads.readCsrSatp(mi);\\n        } else if (csrAddr == MSTATUS) {\\n            return CSRReads.readCsrMstatus(mi);\\n        } else if (csrAddr == MISA) {\\n            return CSRReads.readCsrMisa(mi);\\n        } else if (csrAddr == MEDELEG) {\\n            return CSRReads.readCsrMedeleg(mi);\\n        } else if (csrAddr == MIDELEG) {\\n            return CSRReads.readCsrMideleg(mi);\\n        } else if (csrAddr == MIE) {\\n            return CSRReads.readCsrMie(mi);\\n        } else if (csrAddr == MTVEC) {\\n            return CSRReads.readCsrMtvec(mi);\\n        } else if (csrAddr == MCOUNTEREN) {\\n            return CSRReads.readCsrMcounteren(mi);\\n        } else if (csrAddr == MSCRATCH) {\\n            return CSRReads.readCsrMscratch(mi);\\n        } else if (csrAddr == MEPC) {\\n            return CSRReads.readCsrMepc(mi);\\n        } else if (csrAddr == MCAUSE) {\\n            return CSRReads.readCsrMcause(mi);\\n        } else if (csrAddr == MTVAL) {\\n            return CSRReads.readCsrMtval(mi);\\n        } else if (csrAddr == MIP) {\\n            return CSRReads.readCsrMip(mi);\\n        } else if (csrAddr == MCYCLE) {\\n            return CSRReads.readCsrMcycle(mi);\\n        } else if (csrAddr == MINSTRET) {\\n            return CSRReads.readCsrMinstret(mi);\\n        } else if (csrAddr == MVENDORID) {\\n            return CSRReads.readCsrMvendorid(mi);\\n        } else if (csrAddr == MARCHID) {\\n            return CSRReads.readCsrMarchid(mi);\\n        } else if (csrAddr == MIMPID) {\\n            return CSRReads.readCsrMimpid(mi);\\n        } else if (csrAddr == TSELECT || csrAddr == TDATA1 || csrAddr == TDATA2 || csrAddr == TDATA3 || csrAddr == MHARTID) {\\n            //All hardwired to zero\\n            return (true, 0);\\n        }\\n\\n        return CSRReads.readCsrFail();\\n    }\\n\\n    /// @notice Writes a value to a CSR given its address\\n    /// @dev If/else should change to binary search to increase performance\\n    /// @param mi MemoryInteractor with which Step function is interacting.\\n    /// @param csrAddr Address of CSR in file.\\n    /// @param val Value to be written;\\n    /// @return The status of the operation (true for success, false otherwise).\\n    function writeCsr(\\n        MemoryInteractor mi,\\n        uint32 csrAddr,\\n        uint64 val\\n    )\\n    public returns (bool)\\n    {\\n        // Attemps to access a CSR without appropriate privilege level raises a\\n        // illegal instruction exception.\\n        // Reference: riscv-privileged-v1.10 - section 2.1 - page 7.\\n        if (csrPriv(csrAddr) > mi.readIflagsPrv()) {\\n            return false;\\n        }\\n\\n        if (csrIsReadOnly(csrAddr)) {\\n            return false;\\n        }\\n\\n        if (csrAddr == SSTATUS) {\\n            uint64 cMstatus = mi.readMstatus();\\n            return writeCsrMstatus(mi, (cMstatus & ~RiscVConstants.getSstatusWMask()) | (val & RiscVConstants.getSstatusWMask()));\\n\\n        } else if (csrAddr == SIE) {\\n            uint64 mask = mi.readMideleg();\\n            uint64 cMie = mi.readMie();\\n\\n            mi.writeMie((cMie & ~mask) | (val & mask));\\n            return true;\\n        } else if (csrAddr == STVEC) {\\n            mi.writeStvec(val & uint64(~3));\\n            return true;\\n        } else if (csrAddr == SCOUNTEREN) {\\n            mi.writeScounteren(val & RiscVConstants.getScounterenRwMask());\\n            return true;\\n        } else if (csrAddr == SSCRATCH) {\\n            mi.writeSscratch(val);\\n            return true;\\n        } else if (csrAddr == SEPC) {\\n            mi.writeSepc(val & uint64(~3));\\n            return true;\\n        } else if (csrAddr == SCAUSE) {\\n            mi.writeScause(val);\\n            return true;\\n        } else if (csrAddr == STVAL) {\\n            mi.writeStval(val);\\n            return true;\\n        } else if (csrAddr == SIP) {\\n            uint64 cMask = mi.readMideleg();\\n            uint64 cMip = mi.readMip();\\n\\n            cMip = (cMip & ~cMask) | (val & cMask);\\n            mi.writeMip(cMip);\\n            return true;\\n        } else if (csrAddr == SATP) {\\n            uint64 cSatp = mi.readSatp();\\n            int mode = cSatp >> 60;\\n            int newMode = (val >> 60) & 0xf;\\n\\n            if (newMode == 0 || (newMode >= 8 && newMode <= 9)) {\\n                mode = newMode;\\n            }\\n            mi.writeSatp((val & ((uint64(1) << 44) - 1) | uint64(mode) << 60));\\n            return true;\\n\\n        } else if (csrAddr == MSTATUS) {\\n            return writeCsrMstatus(mi, val);\\n        } else if (csrAddr == MEDELEG) {\\n            uint64 mask = ((uint64(1) << (RiscVConstants.getMcauseStoreAmoPageFault() + 1)) - 1);\\n            mi.writeMedeleg((mi.readMedeleg() & ~mask) | (val & mask));\\n            return true;\\n        } else if (csrAddr == MIDELEG) {\\n            uint64 mask = RiscVConstants.getMipSsipMask() | RiscVConstants.getMipStipMask() | RiscVConstants.getMipSeipMask();\\n            mi.writeMideleg(((mi.readMideleg() & ~mask) | (val & mask)));\\n            return true;\\n        } else if (csrAddr == MIE) {\\n            uint64 mask = RiscVConstants.getMipMsipMask() | RiscVConstants.getMipMtipMask() | RiscVConstants.getMipSsipMask() | RiscVConstants.getMipStipMask() | RiscVConstants.getMipSeipMask();\\n\\n            mi.writeMie(((mi.readMie() & ~mask) | (val & mask)));\\n            return true;\\n        } else if (csrAddr == MTVEC) {\\n            mi.writeMtvec(val & uint64(~3));\\n            return true;\\n        } else if (csrAddr == MCOUNTEREN) {\\n            mi.writeMcounteren(val & RiscVConstants.getMcounterenRwMask());\\n            return true;\\n        } else if (csrAddr == MSCRATCH) {\\n            mi.writeMscratch(val);\\n            return true;\\n        } else if (csrAddr == MEPC) {\\n            mi.writeMepc(val & uint64(~3));\\n            return true;\\n        } else if (csrAddr == MCAUSE) {\\n            mi.writeMcause(val);\\n            return true;\\n        } else if (csrAddr == MTVAL) {\\n            mi.writeMtval(val);\\n            return true;\\n        } else if (csrAddr == MIP) {\\n            uint64 mask = RiscVConstants.getMipSsipMask() | RiscVConstants.getMipStipMask();\\n            uint64 cMip = mi.readMip();\\n\\n            cMip = (cMip & ~mask) | (val & mask);\\n\\n            mi.writeMip(cMip);\\n            return true;\\n        } else if (csrAddr == MCYCLE) {\\n            // We can't allow writes to mcycle because we use it to measure the progress in machine execution.\\n            // BBL enables all counters in both M- and S-modes\\n            // We instead raise an exception.\\n            return false;\\n        } else if (csrAddr == MINSTRET) {\\n            // In Spike, QEMU, and riscvemu, mcycle and minstret are the aliases for the same counter\\n            // QEMU calls exit (!) on writes to mcycle or minstret\\n            mi.writeMinstret(val-1); // The value will be incremented after the instruction is executed\\n            return true;\\n        } else if (csrAddr == TSELECT || csrAddr == TDATA1 || csrAddr == TDATA2 || csrAddr == TDATA3 || csrAddr == MISA) {\\n            // Ignore writes\\n            return (true);\\n        }\\n        return false;\\n    }\\n\\n    // Extract privilege level from CSR\\n    // Bits csr[9:8] encode the CSR's privilege level (i.e lowest privilege level\\n    // that can access that CSR.\\n    // Reference: riscv-privileged-v1.10 - section 2.1 - page 7.\\n    function csrPriv(uint32 csrAddr) internal pure returns(uint32) {\\n        return (csrAddr >> 8) & 3;\\n    }\\n\\n    // The standard RISC-V ISA sets aside a 12-bit encoding space (csr[11:0])\\n    // The top two bits (csr[11:10]) indicate whether the register is\\n    // read/write (00, 01, or 10) or read-only (11)\\n    // Reference: riscv-privileged-v1.10 - section 2.1 - page 7.\\n    function csrIsReadOnly(uint32 csrAddr) internal pure returns(bool) {\\n        return ((csrAddr & 0xc00) == 0xc00);\\n    }\\n\\n    function writeCsrMstatus(MemoryInteractor mi, uint64 val)\\n    internal returns(bool)\\n    {\\n        uint64 cMstatus = mi.readMstatus() & RiscVConstants.getMstatusRMask();\\n        // Modifiy  only bits that can be written to\\n        cMstatus = (cMstatus & ~RiscVConstants.getMstatusWMask()) | (val & RiscVConstants.getMstatusWMask());\\n        //Update the SD bit\\n        if ((cMstatus & RiscVConstants.getMstatusFsMask()) == RiscVConstants.getMstatusFsMask()) {\\n            cMstatus |= RiscVConstants.getMstatusSdMask();\\n        }\\n        mi.writeMstatus(cMstatus);\\n        return true;\\n    }\\n\\n}\\n\\n\",\"keccak256\":\"0x49fc81328191299fd24ac63e015d933af469067768a0cf777d3b4b9396e18617\",\"license\":\"Apache-2.0\"},\"contracts/CSRExecute.sol\":{\"content\":\"// Copyright 2019 Cartesi Pte. Ltd.\\n\\n// SPDX-License-Identifier: Apache-2.0\\n// Licensed under the Apache License, Version 2.0 (the \\\"License\\\"); you may not use\\n// this file except in compliance with the License. You may obtain a copy of the\\n// License at http://www.apache.org/licenses/LICENSE-2.0\\n\\n// Unless required by applicable law or agreed to in writing, software distributed\\n// under the License is distributed on an \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR\\n// CONDITIONS OF ANY KIND, either express or implied. See the License for the\\n// specific language governing permissions and limitations under the License.\\n\\n\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"./MemoryInteractor.sol\\\";\\nimport \\\"./CSR.sol\\\";\\n\\n/// @title CSRExecute\\n/// @author Felipe Argento\\n/// @notice Implements CSR execute logic\\nlibrary CSRExecute {\\n    uint256 constant CSRRS_CODE = 0;\\n    uint256 constant CSRRC_CODE = 1;\\n\\n    uint256 constant CSRRSI_CODE = 0;\\n    uint256 constant CSRRCI_CODE = 1;\\n\\n    /// @notice Implementation of CSRRS and CSRRC instructions\\n    /// @dev The specific instruction is decided by insncode, which defines the value to be written\\n    /// @param mi MemoryInteractor with which Step function is interacting\\n    /// @param insn Instruction\\n    /// @param insncode Specific instruction code\\n    /// @return true if instruction was executed successfuly and false if its an illegal insn exception\\n    function executeCsrSC(\\n        MemoryInteractor mi,\\n        uint32 insn,\\n        uint256 insncode\\n    )\\n    public returns (bool)\\n    {\\n        uint32 csrAddress = RiscVDecoder.insnIUimm(insn);\\n\\n        bool status = false;\\n        uint64 csrval = 0;\\n\\n        (status, csrval) = CSR.readCsr(mi, csrAddress);\\n\\n        if (!status) {\\n            //return raiseIllegalInsnException(mi, insn);\\n            return false;\\n        }\\n        uint32 rs1 = RiscVDecoder.insnRs1(insn);\\n        uint64 rs1val = mi.readX(rs1);\\n        uint32 rd = RiscVDecoder.insnRd(insn);\\n\\n        if (rd != 0) {\\n            mi.writeX(rd, csrval);\\n        }\\n\\n        uint64 execValue = 0;\\n        if (insncode == CSRRS_CODE) {\\n            execValue = executeCSRRS(csrval, rs1val);\\n        } else {\\n            // insncode == CSRRCCode\\n            execValue = executeCSRRC(csrval, rs1val);\\n        }\\n        if (rs1 != 0) {\\n            if (!CSR.writeCsr(\\n                mi,\\n                csrAddress,\\n                execValue\\n            )) {\\n                //return raiseIllegalInsnException(mi, insn);\\n                return false;\\n            }\\n        }\\n        //return advanceToNextInsn(mi, pc);\\n        return true;\\n    }\\n\\n    /// @notice Implementation of CSRRSI and CSRRCI instructions\\n    /// @dev The specific instruction is decided by insncode, which defines the value to be written.\\n    /// @param mi MemoryInteractor with which Step function is interacting\\n    /// @param insn Instruction\\n    /// @param insncode Specific instruction code\\n    /// @return true if instruction was executed successfuly and false if its an illegal insn exception\\n    function executeCsrSCI(\\n        MemoryInteractor mi,\\n        uint32 insn,\\n        uint256 insncode)\\n    public returns (bool)\\n    {\\n        uint32 csrAddress = RiscVDecoder.insnIUimm(insn);\\n\\n        bool status = false;\\n        uint64 csrval = 0;\\n\\n        (status, csrval) = CSR.readCsr(mi, csrAddress);\\n\\n        if (!status) {\\n            //return raiseIllegalInsnException(mi, insn);\\n            return false;\\n        }\\n        uint32 rs1 = RiscVDecoder.insnRs1(insn);\\n        uint32 rd = RiscVDecoder.insnRd(insn);\\n\\n        if (rd != 0) {\\n            mi.writeX(rd, csrval);\\n        }\\n\\n        uint64 execValue = 0;\\n        if (insncode == CSRRSI_CODE) {\\n            execValue = executeCSRRSI(csrval, rs1);\\n        } else {\\n            // insncode == CSRRCICode\\n            execValue = executeCSRRCI(csrval, rs1);\\n        }\\n\\n        if (rs1 != 0) {\\n            if (!CSR.writeCsr(\\n                mi,\\n                csrAddress,\\n                execValue\\n            )) {\\n                //return raiseIllegalInsnException(mi, insn);\\n                return false;\\n            }\\n        }\\n        //return advanceToNextInsn(mi, pc);\\n        return true;\\n    }\\n\\n    /// @notice Implementation of CSRRW and CSRRWI instructions\\n    /// @dev The specific instruction is decided by insncode, which defines the value to be written.\\n    /// @param mi MemoryInteractor with which Step function is interacting\\n    /// @param insn Instruction\\n    /// @param insncode Specific instruction code\\n    /// @return true if instruction was executed successfuly and false if its an illegal insn exception\\n    function executeCsrRW(\\n        MemoryInteractor mi,\\n        uint32 insn,\\n        uint256 insncode\\n    )\\n    public returns (bool)\\n    {\\n        uint32 csrAddress = RiscVDecoder.insnIUimm(insn);\\n\\n        bool status = true;\\n        uint64 csrval = 0;\\n        uint64 rs1val = 0;\\n\\n        uint32 rd = RiscVDecoder.insnRd(insn);\\n\\n        if (rd != 0) {\\n            (status, csrval) = CSR.readCsr(mi, csrAddress);\\n        }\\n\\n        if (!status) {\\n            //return raiseIllegalInsnException(mi, insn);\\n            return false;\\n        }\\n\\n        if (insncode == 0) {\\n            rs1val = executeCSRRW(mi, insn);\\n        } else {\\n            // insncode == 1\\n            rs1val = executeCSRRWI(insn);\\n        }\\n\\n        if (!CSR.writeCsr(\\n                mi,\\n                csrAddress,\\n                rs1val\\n        )) {\\n            //return raiseIllegalInsnException(mi, insn);\\n            return false;\\n        }\\n        if (rd != 0) {\\n            mi.writeX(rd, csrval);\\n        }\\n        //return advanceToNextInsn(mi, pc);\\n        return true;\\n    }\\n\\n    //internal functions\\n    function executeCSRRW(MemoryInteractor mi, uint32 insn)\\n    internal returns(uint64)\\n    {\\n        return mi.readX(RiscVDecoder.insnRs1(insn));\\n    }\\n\\n    function executeCSRRWI(uint32 insn) internal pure returns(uint64) {\\n        return uint64(RiscVDecoder.insnRs1(insn));\\n    }\\n\\n    function executeCSRRS(uint64 csr, uint64 rs1) internal pure returns(uint64) {\\n        return csr | rs1;\\n    }\\n\\n    function executeCSRRC(uint64 csr, uint64 rs1) internal pure returns(uint64) {\\n        return csr & ~rs1;\\n    }\\n\\n    function executeCSRRSI(uint64 csr, uint32 rs1) internal pure returns(uint64) {\\n        return csr | rs1;\\n    }\\n\\n    function executeCSRRCI(uint64 csr, uint32 rs1) internal pure returns(uint64) {\\n        return csr & ~rs1;\\n    }\\n}\\n\\n\",\"keccak256\":\"0x023ee4133dc6d3a93a88bef604d939f3bba137751b1b62df0884fdf60d0bdbb8\",\"license\":\"Apache-2.0\"},\"contracts/CSRReads.sol\":{\"content\":\"// Copyright 2019 Cartesi Pte. Ltd.\\n\\n// SPDX-License-Identifier: Apache-2.0\\n// Licensed under the Apache License, Version 2.0 (the \\\"License\\\"); you may not use\\n// this file except in compliance with the License. You may obtain a copy of the\\n// License at http://www.apache.org/licenses/LICENSE-2.0\\n\\n// Unless required by applicable law or agreed to in writing, software distributed\\n// under the License is distributed on an \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR\\n// CONDITIONS OF ANY KIND, either express or implied. See the License for the\\n// specific language governing permissions and limitations under the License.\\n\\n\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"./MemoryInteractor.sol\\\";\\nimport \\\"./RiscVConstants.sol\\\";\\nimport \\\"./RiscVDecoder.sol\\\";\\nimport \\\"./RealTimeClock.sol\\\";\\n\\n/// @title CSRReads\\n/// @author Felipe Argento\\n/// @notice Implements CSR read logic\\nlibrary CSRReads {\\n    function readCsrCycle(MemoryInteractor mi, uint32 csrAddr)\\n    internal returns(bool, uint64)\\n    {\\n        if (rdcounteren(mi, csrAddr)) {\\n            return (true, mi.readMcycle());\\n        } else {\\n            return (false, 0);\\n        }\\n    }\\n\\n    function readCsrInstret(MemoryInteractor mi, uint32 csrAddr)\\n    internal returns(bool, uint64)\\n    {\\n        if (rdcounteren(mi, csrAddr)) {\\n            return (true, mi.readMinstret());\\n        } else {\\n            return (false, 0);\\n        }\\n    }\\n\\n    function readCsrTime(MemoryInteractor mi, uint32 csrAddr)\\n    internal returns(bool, uint64)\\n    {\\n        if (rdcounteren(mi, csrAddr)) {\\n            uint64 mtime = RealTimeClock.rtcCycleToTime(mi.readMcycle());\\n            return (true, mtime);\\n        } else {\\n            return (false, 0);\\n        }\\n    }\\n\\n    function readCsrSstatus(MemoryInteractor mi)\\n    internal returns(bool, uint64)\\n    {\\n        return (true, mi.readMstatus() & RiscVConstants.getSstatusRMask());\\n    }\\n\\n    function readCsrSie(MemoryInteractor mi)\\n    internal returns(bool, uint64)\\n    {\\n        uint64 mie = mi.readMie();\\n        uint64 mideleg = mi.readMideleg();\\n\\n        return (true, mie & mideleg);\\n    }\\n\\n    function readCsrStvec(MemoryInteractor mi)\\n    internal returns(bool, uint64)\\n    {\\n        return (true, mi.readStvec());\\n    }\\n\\n    function readCsrScounteren(MemoryInteractor mi)\\n    internal returns(bool, uint64)\\n    {\\n        return (true, mi.readScounteren());\\n    }\\n\\n    function readCsrSscratch(MemoryInteractor mi)\\n    internal returns(bool, uint64)\\n    {\\n        return (true, mi.readSscratch());\\n    }\\n\\n    function readCsrSepc(MemoryInteractor mi)\\n    internal returns(bool, uint64)\\n    {\\n        return (true, mi.readSepc());\\n    }\\n\\n    function readCsrScause(MemoryInteractor mi)\\n    internal returns(bool, uint64)\\n    {\\n        return (true, mi.readScause());\\n    }\\n\\n    function readCsrStval(MemoryInteractor mi)\\n    internal returns(bool, uint64)\\n    {\\n        return (true, mi.readStval());\\n    }\\n\\n    function readCsrSip(MemoryInteractor mi)\\n    internal returns(bool, uint64)\\n    {\\n        uint64 mip = mi.readMip();\\n        uint64 mideleg = mi.readMideleg();\\n        return (true, mip & mideleg);\\n    }\\n\\n    function readCsrSatp(MemoryInteractor mi)\\n    internal returns(bool, uint64)\\n    {\\n        uint64 mstatus = mi.readMstatus();\\n        uint64 priv = mi.readIflagsPrv();\\n\\n        if (priv == RiscVConstants.getPrvS() && (mstatus & RiscVConstants.getMstatusTvmMask() != 0)) {\\n            return (false, 0);\\n        } else {\\n            return (true, mi.readSatp());\\n        }\\n    }\\n\\n    function readCsrMstatus(MemoryInteractor mi)\\n    internal returns(bool, uint64)\\n    {\\n        return (true, mi.readMstatus() & RiscVConstants.getMstatusRMask());\\n    }\\n\\n    function readCsrMisa(MemoryInteractor mi)\\n    internal returns(bool, uint64)\\n    {\\n        return (true, mi.readMisa());\\n    }\\n\\n    function readCsrMedeleg(MemoryInteractor mi)\\n    internal returns(bool, uint64)\\n    {\\n        return (true, mi.readMedeleg());\\n    }\\n\\n    function readCsrMideleg(MemoryInteractor mi)\\n    internal returns(bool, uint64)\\n    {\\n        return (true, mi.readMideleg());\\n    }\\n\\n    function readCsrMie(MemoryInteractor mi)\\n    internal returns(bool, uint64)\\n    {\\n        return (true, mi.readMie());\\n    }\\n\\n    function readCsrMtvec(MemoryInteractor mi)\\n    internal returns(bool, uint64)\\n    {\\n        return (true, mi.readMtvec());\\n    }\\n\\n    function readCsrMcounteren(MemoryInteractor mi)\\n    internal returns(bool, uint64)\\n    {\\n        return (true, mi.readMcounteren());\\n    }\\n\\n    function readCsrMscratch(MemoryInteractor mi)\\n    internal returns(bool, uint64)\\n    {\\n        return (true, mi.readMscratch());\\n    }\\n\\n    function readCsrMepc(MemoryInteractor mi)\\n    internal returns(bool, uint64)\\n    {\\n        return (true, mi.readMepc());\\n    }\\n\\n    function readCsrMcause(MemoryInteractor mi)\\n    internal returns(bool, uint64)\\n    {\\n        return (true, mi.readMcause());\\n    }\\n\\n    function readCsrMtval(MemoryInteractor mi)\\n    internal returns(bool, uint64)\\n    {\\n        return (true, mi.readMtval());\\n    }\\n\\n    function readCsrMip(MemoryInteractor mi)\\n    internal returns(bool, uint64)\\n    {\\n        return (true, mi.readMip());\\n    }\\n\\n    function readCsrMcycle(MemoryInteractor mi)\\n    internal returns(bool, uint64)\\n    {\\n        return (true, mi.readMcycle());\\n    }\\n\\n    function readCsrMinstret(MemoryInteractor mi)\\n    internal returns(bool, uint64)\\n    {\\n        return (true, mi.readMinstret());\\n    }\\n\\n    function readCsrMvendorid(MemoryInteractor mi)\\n    internal returns(bool, uint64)\\n    {\\n        return (true, mi.readMvendorid());\\n    }\\n\\n    function readCsrMarchid(MemoryInteractor mi)\\n    internal returns(bool, uint64)\\n    {\\n        return (true, mi.readMarchid());\\n    }\\n\\n    function readCsrMimpid(MemoryInteractor mi)\\n    internal returns(bool, uint64)\\n    {\\n        return (true, mi.readMimpid());\\n    }\\n\\n    function readCsrFail() internal pure returns(bool, uint64) {\\n        return (false, 0);\\n    }\\n\\n    // Check if counter is enabled. mcounteren control the availability of the\\n    // hardware performance monitoring counter to the next-lowest priv level.\\n    // Reference: riscv-privileged-v1.10 - section 3.1.17 - page 32.\\n    function rdcounteren(MemoryInteractor mi, uint32 csrAddr)\\n    internal returns (bool)\\n    {\\n        uint64 counteren = RiscVConstants.getMcounterenRwMask();\\n        uint64 priv = mi.readIflagsPrv();\\n\\n        if (priv < RiscVConstants.getPrvM()) {\\n            counteren &= mi.readMcounteren();\\n            if (priv < RiscVConstants.getPrvS()) {\\n                counteren &= mi.readScounteren();\\n            }\\n        }\\n        return (((counteren >> (csrAddr & 0x1f)) & 1) != 0);\\n    }\\n}\\n\",\"keccak256\":\"0x2382759c229a1575464520afa5d2c5a3abe2c5d527913c93fb797288598d5512\",\"license\":\"Apache-2.0\"},\"contracts/HTIF.sol\":{\"content\":\"// Copyright 2019 Cartesi Pte. Ltd.\\n\\n// SPDX-License-Identifier: Apache-2.0\\n// Licensed under the Apache License, Version 2.0 (the \\\"License\\\"); you may not use\\n// this file except in compliance with the License. You may obtain a copy of the\\n// License at http://www.apache.org/licenses/LICENSE-2.0\\n\\n// Unless required by applicable law or agreed to in writing, software distributed\\n// under the License is distributed on an \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR\\n// CONDITIONS OF ANY KIND, either express or implied. See the License for the\\n// specific language governing permissions and limitations under the License.\\n\\n\\n\\n// @title HTIF\\npragma solidity ^0.7.0;\\n\\nimport \\\"./MemoryInteractor.sol\\\";\\n\\n\\n/// @title HTIF\\n/// @author Felipe Argento\\n/// @notice Host-Target-Interface (HTIF) mediates communcation with external world.\\n/// @dev Its active addresses are 0x40000000(tohost) and 0x40000008(from host)\\n/// Reference: The Core of Cartesi, v1.02 - Section 3.2 - The Board\\nlibrary HTIF {\\n\\n    uint64 constant HTIF_TOHOST_ADDR_CONST = 0x40008000;\\n    uint64 constant HTIF_FROMHOST_ADDR_CONST = 0x40008008;\\n    uint64 constant HTIF_IYIELD_ADDR_CONST = 0x40008020;\\n\\n    // [c++] enum HTIF_devices\\n    uint64 constant HTIF_DEVICE_HALT = 0;        //< Used to halt machine\\n    uint64 constant HTIF_DEVICE_CONSOLE = 1;     //< Used for console input and output\\n    uint64 constant HTIF_DEVICE_YIELD = 2;       //< Used to yield control back to host\\n\\n    // [c++] enum HTIF_commands\\n    uint64 constant HTIF_HALT_HALT = 0;\\n    uint64 constant HTIF_CONSOLE_GETCHAR = 0;\\n    uint64 constant HTIF_CONSOLE_PUTCHAR = 1;\\n    uint64 constant HTIF_YIELD_PROGRESS = 0;\\n    uint64 constant HTIF_YIELD_ROLLUP = 1;\\n\\n    /// @notice reads htif\\n    /// @param mi Memory Interactor with which Step function is interacting.\\n    /// @param addr address to read from\\n    /// @param wordSize can be uint8, uint16, uint32 or uint64\\n    /// @return bool if read was successfull\\n    /// @return uint64 pval\\n    function htifRead(\\n        MemoryInteractor mi,\\n        uint64 addr,\\n        uint64 wordSize\\n    )\\n    public returns (bool, uint64)\\n    {\\n        // HTIF reads must be aligned and 8 bytes\\n        if (wordSize != 64 || (addr & 7) != 0) {\\n            return (false, 0);\\n        }\\n\\n        if (addr == HTIF_TOHOST_ADDR_CONST) {\\n            return (true, mi.readHtifTohost());\\n        } else if (addr == HTIF_FROMHOST_ADDR_CONST) {\\n            return (true, mi.readHtifFromhost());\\n        } else {\\n            return (false, 0);\\n        }\\n    }\\n\\n    /// @notice write htif\\n    /// @param mi Memory Interactor with which Step function is interacting.\\n    /// @param addr address to read from\\n    /// @param val value to be written\\n    /// @param wordSize can be uint8, uint16, uint32 or uint64\\n    /// @return bool if write was successfull\\n    function htifWrite(\\n        MemoryInteractor mi,\\n        uint64 addr,\\n        uint64 val,\\n        uint64 wordSize\\n    )\\n    public returns (bool)\\n    {\\n        // HTIF writes must be aligned and 8 bytes\\n        if (wordSize != 64 || (addr & 7) != 0) {\\n            return false;\\n        }\\n        if (addr == HTIF_TOHOST_ADDR_CONST) {\\n            return htifWriteTohost(mi, val);\\n        } else if (addr == HTIF_FROMHOST_ADDR_CONST) {\\n            mi.writeHtifFromhost(val);\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    // Internal functions\\n    function htifWriteFromhost(MemoryInteractor mi, uint64 val)\\n    internal returns (bool)\\n    {\\n        mi.writeHtifFromhost(val);\\n        // TO-DO: check if h is interactive? reset from host? pollConsole?\\n        return true;\\n    }\\n\\n    function htifWriteTohost(MemoryInteractor mi, uint64 tohost)\\n    internal returns (bool)\\n    {\\n        uint32 device = uint32(tohost >> 56);\\n        uint32 cmd = uint32((tohost >> 48) & 0xff);\\n        uint64 payload = uint32((tohost & (~(uint256(1) >> 16))));\\n\\n        mi.writeHtifTohost(tohost);\\n\\n        if (device == HTIF_DEVICE_HALT) {\\n            return htifHalt(\\n                mi,\\n                cmd,\\n                payload);\\n        } else if (device == HTIF_DEVICE_CONSOLE) {\\n            return htifConsole(\\n                mi,\\n                cmd,\\n                payload);\\n        } else if (device == HTIF_DEVICE_YIELD) {\\n            return htifYield(\\n                mi,\\n                cmd,\\n                payload);\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    function htifHalt(\\n        MemoryInteractor mi,\\n        uint64 cmd,\\n        uint64 payload)\\n    internal returns (bool)\\n    {\\n        if (cmd == HTIF_HALT_HALT && ((payload & 1) == 1) ) {\\n            //set iflags to halted\\n            mi.setIflagsH(true);\\n        }\\n        return true;\\n    }\\n\\n    function htifYield(\\n        MemoryInteractor mi,\\n        uint64 cmd,\\n        uint64 payload)\\n    internal returns (bool)\\n    {\\n        // If yield command is enabled, yield\\n        if ((mi.readHtifIYield() >> cmd) & 1 == 1) {\\n            mi.setIflagsY(true);\\n            mi.writeHtifFromhost((HTIF_DEVICE_YIELD << 56) | cmd << 48);\\n        }\\n\\n        return true;\\n    }\\n\\n    function htifConsole(\\n        MemoryInteractor mi,\\n        uint64 cmd,\\n        uint64 payload)\\n    internal returns (bool)\\n    {\\n        if (cmd == HTIF_CONSOLE_PUTCHAR) {\\n            htifPutchar(mi);\\n        } else if (cmd == HTIF_CONSOLE_GETCHAR) {\\n            htifGetchar(mi);\\n        } else {\\n            // Unknown HTIF console commands are silently ignored\\n            return true;\\n        }\\n    }\\n\\n    function htifPutchar(MemoryInteractor mi) internal\\n    returns (bool)\\n    {\\n        // TO-DO: what to do in the blockchain? Generate event?\\n        mi.writeHtifFromhost((HTIF_DEVICE_CONSOLE << 56) | uint64(HTIF_CONSOLE_PUTCHAR) << 48);\\n        return true;\\n    }\\n\\n    function htifGetchar(MemoryInteractor mi) internal\\n    returns (bool)\\n    {\\n        mi.writeHtifFromhost((HTIF_DEVICE_CONSOLE << 56) | uint64(HTIF_CONSOLE_GETCHAR) << 48);\\n        return true;\\n    }\\n\\n    // getters\\n    function getHtifToHostAddr() public pure returns (uint64) {\\n        return HTIF_TOHOST_ADDR_CONST;\\n    }\\n\\n    function getHtifFromHostAddr() public pure returns (uint64) {\\n        return HTIF_FROMHOST_ADDR_CONST;\\n    }\\n\\n    function getHtifIYieldAddr() public pure returns (uint64) {\\n        return HTIF_IYIELD_ADDR_CONST;\\n    }\\n\\n}\\n\",\"keccak256\":\"0x269d377ff4e5c3d0c65bb18d949f249c7e56ab2c208d8fb3f9376ac4d0b5f8f8\",\"license\":\"Apache-2.0\"},\"contracts/MemoryInteractor.sol\":{\"content\":\"// Copyright 2019 Cartesi Pte. Ltd.\\n\\n// SPDX-License-Identifier: Apache-2.0\\n// Licensed under the Apache License, Version 2.0 (the \\\"License\\\"); you may not use\\n// this file except in compliance with the License. You may obtain a copy of the\\n// License at http://www.apache.org/licenses/LICENSE-2.0\\n\\n// Unless required by applicable law or agreed to in writing, software distributed\\n// under the License is distributed on an \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR\\n// CONDITIONS OF ANY KIND, either express or implied. See the License for the\\n// specific language governing permissions and limitations under the License.\\n\\n\\n\\n/// @title MemoryInteractor.sol\\npragma solidity ^0.7.0;\\n\\nimport \\\"./ShadowAddresses.sol\\\";\\nimport \\\"./HTIF.sol\\\";\\nimport \\\"./CLINT.sol\\\";\\nimport \\\"./RiscVConstants.sol\\\";\\nimport \\\"@cartesi/util/contracts/BitsManipulationLibrary.sol\\\";\\n\\n/// @title MemoryInteractor\\n/// @author Felipe Argento\\n/// @notice Bridge between Memory Manager and Step\\n/// @dev Every read performed by mi.memoryRead or mi.write should be followed by an\\n/// @dev endianess swap from little endian to big endian. This is the case because\\n/// @dev EVM is big endian but RiscV is little endian.\\n/// @dev Reference: riscv-spec-v2.2.pdf - Preface to Version 2.0\\n/// @dev Reference: Ethereum yellowpaper - Version 69351d5\\n/// @dev    Appendix H. Virtual Machine Specification\\ncontract MemoryInteractor {\\n\\n    uint256 rwIndex; // read write index\\n    uint64[] rwPositions; // read write positions\\n    bytes8[] rwValues; // read write values\\n    bool[] isRead; // true if access is read, false if its write\\n\\n    function initializeMemory(\\n        uint64[] memory _rwPositions,\\n        bytes8[] memory _rwValues,\\n        bool[] memory _isRead\\n    ) virtual public\\n    {\\n        require(_rwPositions.length == _rwValues.length, \\\"Read/write arrays are not the same size\\\");\\n        require(_rwPositions.length == _isRead.length, \\\"Read/write arrays are not the same size\\\");\\n        rwIndex = 0;\\n        rwPositions = _rwPositions;\\n        rwValues = _rwValues;\\n        isRead = _isRead;\\n    }\\n\\n    function getRWIndex() public view returns (uint256) {\\n        return rwIndex;\\n    }\\n    // Reads\\n    function readX(uint64 registerIndex) public returns (uint64) {\\n        return memoryRead(registerIndex * 8);\\n    }\\n\\n    function readClintMtimecmp() public returns (uint64) {\\n        return memoryRead(CLINT.getClintMtimecmp());\\n    }\\n\\n    function readHtifFromhost() public returns (uint64) {\\n        return memoryRead(HTIF.getHtifFromHostAddr());\\n    }\\n\\n    function readHtifTohost() public returns (uint64) {\\n        return memoryRead(HTIF.getHtifToHostAddr());\\n    }\\n\\n    function readHtifIYield() public returns (uint64) {\\n        return memoryRead(HTIF.getHtifIYieldAddr());\\n    }\\n\\n    function readMie() public returns (uint64) {\\n        return memoryRead(ShadowAddresses.getMie());\\n    }\\n\\n    function readMcause() public returns (uint64) {\\n        return memoryRead(ShadowAddresses.getMcause());\\n    }\\n\\n    function readMinstret() public returns (uint64) {\\n        return memoryRead(ShadowAddresses.getMinstret());\\n    }\\n\\n    function readMcycle() public returns (uint64) {\\n        return memoryRead(ShadowAddresses.getMcycle());\\n    }\\n\\n    function readMcounteren() public returns (uint64) {\\n        return memoryRead(ShadowAddresses.getMcounteren());\\n    }\\n\\n    function readMepc() public returns (uint64) {\\n        return memoryRead(ShadowAddresses.getMepc());\\n    }\\n\\n    function readMip() public returns (uint64) {\\n        return memoryRead(ShadowAddresses.getMip());\\n    }\\n\\n    function readMtval() public returns (uint64) {\\n        return memoryRead(ShadowAddresses.getMtval());\\n    }\\n\\n    function readMvendorid() public returns (uint64) {\\n        return memoryRead(ShadowAddresses.getMvendorid());\\n    }\\n\\n    function readMarchid() public returns (uint64) {\\n        return memoryRead(ShadowAddresses.getMarchid());\\n    }\\n\\n    function readMimpid() public returns (uint64) {\\n        return memoryRead(ShadowAddresses.getMimpid());\\n    }\\n\\n    function readMscratch() public returns (uint64) {\\n        return memoryRead(ShadowAddresses.getMscratch());\\n    }\\n\\n    function readSatp() public returns (uint64) {\\n        return memoryRead(ShadowAddresses.getSatp());\\n    }\\n\\n    function readScause() public returns (uint64) {\\n        return memoryRead(ShadowAddresses.getScause());\\n    }\\n\\n    function readSepc() public returns (uint64) {\\n        return memoryRead(ShadowAddresses.getSepc());\\n    }\\n\\n    function readScounteren() public returns (uint64) {\\n        return memoryRead(ShadowAddresses.getScounteren());\\n    }\\n\\n    function readStval() public returns (uint64) {\\n        return memoryRead(ShadowAddresses.getStval());\\n    }\\n\\n    function readMideleg() public returns (uint64) {\\n        return memoryRead(ShadowAddresses.getMideleg());\\n    }\\n\\n    function readMedeleg() public returns (uint64) {\\n        return memoryRead(ShadowAddresses.getMedeleg());\\n    }\\n\\n    function readMtvec() public returns (uint64) {\\n        return memoryRead(ShadowAddresses.getMtvec());\\n    }\\n\\n    function readIlrsc() public returns (uint64) {\\n        return memoryRead(ShadowAddresses.getIlrsc());\\n    }\\n\\n    function readPc() public returns (uint64) {\\n        return memoryRead(ShadowAddresses.getPc());\\n    }\\n\\n    function readSscratch() public returns (uint64) {\\n        return memoryRead(ShadowAddresses.getSscratch());\\n    }\\n\\n    function readStvec() public returns (uint64) {\\n        return memoryRead(ShadowAddresses.getStvec());\\n    }\\n\\n    function readMstatus() public returns (uint64) {\\n        return memoryRead(ShadowAddresses.getMstatus());\\n    }\\n\\n    function readMisa() public returns (uint64) {\\n        return memoryRead(ShadowAddresses.getMisa());\\n    }\\n\\n    function readIflags() public returns (uint64) {\\n        return memoryRead(ShadowAddresses.getIflags());\\n    }\\n\\n    function readIflagsPrv() public returns (uint64) {\\n        return (memoryRead(ShadowAddresses.getIflags()) & RiscVConstants.getIflagsPrvMask()) >> RiscVConstants.getIflagsPrvShift();\\n    }\\n\\n    function readIflagsH() public returns (uint64) {\\n        return (memoryRead(ShadowAddresses.getIflags()) & RiscVConstants.getIflagsHMask()) >> RiscVConstants.getIflagsHShift();\\n    }\\n\\n    function readIflagsY() public returns (uint64) {\\n        return (memoryRead(ShadowAddresses.getIflags()) & RiscVConstants.getIflagsYMask()) >> RiscVConstants.getIflagsYShift();\\n    }\\n\\n    function readMemory(uint64 paddr, uint64 wordSize) public returns (uint64) {\\n        // get relative address from unaligned paddr\\n        uint64 closestStartAddr = paddr & uint64(~7);\\n        uint64 relAddr = paddr - closestStartAddr;\\n\\n        // value just like its on MM, without endianess swap\\n        uint64 val = pureMemoryRead(closestStartAddr);\\n\\n        // mask to clean a piece of the value that was on memory\\n        uint64 valueMask = BitsManipulationLibrary.uint64SwapEndian(((uint64(2) ** wordSize) - 1) << relAddr*8);\\n        val = BitsManipulationLibrary.uint64SwapEndian(val & valueMask) >> relAddr*8;\\n        return val;\\n    }\\n\\n    // Sets\\n    function setPriv(uint64 newPriv) public {\\n        writeIflagsPrv(newPriv);\\n        writeIlrsc(uint64(-1)); // invalidate reserved address\\n    }\\n\\n    function setIflagsI(bool idle) public {\\n        uint64 iflags = readIflags();\\n\\n        if (idle) {\\n            iflags = (iflags | RiscVConstants.getIflagsIMask());\\n        } else {\\n            iflags = (iflags & ~RiscVConstants.getIflagsIMask());\\n        }\\n\\n        memoryWrite(ShadowAddresses.getIflags(), iflags);\\n    }\\n\\n    function setMip(uint64 mask) public {\\n        uint64 mip = readMip();\\n        mip |= mask;\\n\\n        writeMip(mip);\\n\\n        setIflagsI(false);\\n    }\\n\\n    function resetMip(uint64 mask) public {\\n        uint64 mip = readMip();\\n        mip &= ~mask;\\n        writeMip(mip);\\n    }\\n\\n    // Writes\\n    function writeMie(uint64 value) public {\\n        memoryWrite(ShadowAddresses.getMie(), value);\\n    }\\n\\n    function writeStvec(uint64 value) public {\\n        memoryWrite(ShadowAddresses.getStvec(), value);\\n    }\\n\\n    function writeSscratch(uint64 value) public {\\n        memoryWrite(ShadowAddresses.getSscratch(), value);\\n    }\\n\\n    function writeMip(uint64 value) public {\\n        memoryWrite(ShadowAddresses.getMip(), value);\\n    }\\n\\n    function writeSatp(uint64 value) public {\\n        memoryWrite(ShadowAddresses.getSatp(), value);\\n    }\\n\\n    function writeMedeleg(uint64 value) public {\\n        memoryWrite(ShadowAddresses.getMedeleg(), value);\\n    }\\n\\n    function writeMideleg(uint64 value) public {\\n        memoryWrite(ShadowAddresses.getMideleg(), value);\\n    }\\n\\n    function writeMtvec(uint64 value) public {\\n        memoryWrite(ShadowAddresses.getMtvec(), value);\\n    }\\n\\n    function writeMcounteren(uint64 value) public {\\n        memoryWrite(ShadowAddresses.getMcounteren(), value);\\n    }\\n\\n    function writeMcycle(uint64 value) public {\\n        memoryWrite(ShadowAddresses.getMcycle(), value);\\n    }\\n\\n    function writeMinstret(uint64 value) public {\\n        memoryWrite(ShadowAddresses.getMinstret(), value);\\n    }\\n\\n    function writeMscratch(uint64 value) public {\\n        memoryWrite(ShadowAddresses.getMscratch(), value);\\n    }\\n\\n    function writeScounteren(uint64 value) public {\\n        memoryWrite(ShadowAddresses.getScounteren(), value);\\n    }\\n\\n    function writeScause(uint64 value) public {\\n        memoryWrite(ShadowAddresses.getScause(), value);\\n    }\\n\\n    function writeSepc(uint64 value) public {\\n        memoryWrite(ShadowAddresses.getSepc(), value);\\n    }\\n\\n    function writeStval(uint64 value) public {\\n        memoryWrite(ShadowAddresses.getStval(), value);\\n    }\\n\\n    function writeMstatus(uint64 value) public {\\n        memoryWrite(ShadowAddresses.getMstatus(), value);\\n    }\\n\\n    function writeMcause(uint64 value) public {\\n        memoryWrite(ShadowAddresses.getMcause(), value);\\n    }\\n\\n    function writeMepc(uint64 value) public {\\n        memoryWrite(ShadowAddresses.getMepc(), value);\\n    }\\n\\n    function writeMtval(uint64 value) public {\\n        memoryWrite(ShadowAddresses.getMtval(), value);\\n    }\\n\\n    function writePc(uint64 value) public {\\n        memoryWrite(ShadowAddresses.getPc(), value);\\n    }\\n\\n    function writeIlrsc(uint64 value) public {\\n        memoryWrite(ShadowAddresses.getIlrsc(), value);\\n    }\\n\\n    function writeClintMtimecmp(uint64 value) public {\\n        memoryWrite(CLINT.getClintMtimecmp(), value);\\n    }\\n\\n    function writeHtifFromhost(uint64 value) public {\\n        memoryWrite(HTIF.getHtifFromHostAddr(), value);\\n    }\\n\\n    function writeHtifTohost(uint64 value) public {\\n        memoryWrite(HTIF.getHtifToHostAddr(), value);\\n    }\\n\\n    function setIflagsH(bool halt) public {\\n        uint64 iflags = readIflags();\\n\\n        if (halt) {\\n            iflags = (iflags | RiscVConstants.getIflagsHMask());\\n        } else {\\n            iflags = (iflags & ~RiscVConstants.getIflagsHMask());\\n        }\\n\\n        memoryWrite(ShadowAddresses.getIflags(), iflags);\\n    }\\n\\n    function setIflagsY(bool isYield) public {\\n        uint64 iflags = readIflags();\\n\\n        if (isYield) {\\n            iflags = (iflags | RiscVConstants.getIflagsYMask());\\n        } else {\\n            iflags = (iflags & ~RiscVConstants.getIflagsYMask());\\n        }\\n\\n        memoryWrite(ShadowAddresses.getIflags(), iflags);\\n    }\\n\\n    function writeIflagsPrv(uint64 newPriv) public {\\n        uint64 iflags = readIflags();\\n\\n        // Clears bits 3 and 2 of iflags and use or to set new value\\n        iflags = (iflags & (~RiscVConstants.getIflagsPrvMask())) | (newPriv << RiscVConstants.getIflagsPrvShift());\\n\\n        memoryWrite(ShadowAddresses.getIflags(), iflags);\\n    }\\n\\n    function writeMemory(\\n        uint64 paddr,\\n        uint64 value,\\n        uint64 wordSize\\n    ) public\\n    {\\n        uint64 numberOfBytes = wordSize / 8;\\n\\n        if (numberOfBytes == 8) {\\n            memoryWrite(paddr, value);\\n        } else {\\n            // get relative address from unaligned paddr\\n            uint64 closestStartAddr = paddr & uint64(~7);\\n            uint64 relAddr = paddr - closestStartAddr;\\n\\n            // oldvalue just like its on MM, without endianess swap\\n            uint64 oldVal = pureMemoryRead(closestStartAddr);\\n\\n            // Mask to clean a piece of the value that was on memory\\n            uint64 valueMask = BitsManipulationLibrary.uint64SwapEndian(((uint64(2) ** wordSize) - 1) << relAddr*8);\\n\\n            // value is big endian, need to swap before further operation\\n            uint64 valueSwap = BitsManipulationLibrary.uint64SwapEndian(value & ((uint64(2) ** wordSize) - 1));\\n\\n            uint64 newvalue = ((oldVal & ~valueMask) | (valueSwap >> relAddr*8));\\n\\n            newvalue = BitsManipulationLibrary.uint64SwapEndian(newvalue);\\n            memoryWrite(closestStartAddr, newvalue);\\n        }\\n    }\\n\\n    function writeX(uint64 registerindex, uint64 value) public {\\n        memoryWrite(registerindex * 8, value);\\n    }\\n\\n    // Internal functions\\n    function memoryRead(uint64 _readAddress) public returns (uint64) {\\n        return BitsManipulationLibrary.uint64SwapEndian(\\n            uint64(memoryAccessManager(_readAddress, true))\\n        );\\n    }\\n\\n    function memoryWrite(uint64 _writeAddress, uint64 _value) virtual public {\\n        bytes8 bytesvalue = bytes8(BitsManipulationLibrary.uint64SwapEndian(_value));\\n        require(memoryAccessManager(_writeAddress, false) == bytesvalue, \\\"Written value does not match\\\");\\n    }\\n\\n    // Memory Write without endianess swap\\n    function pureMemoryWrite(uint64 _writeAddress, uint64 _value) virtual internal {\\n        require(\\n            memoryAccessManager(_writeAddress, false) == bytes8(_value),\\n            \\\"Written value does not match\\\"\\n        );\\n    }\\n\\n    // Memory Read without endianess swap\\n    function pureMemoryRead(uint64 _readAddress) internal returns (uint64) {\\n        return uint64(memoryAccessManager(_readAddress, true));\\n    }\\n\\n   // Private functions\\n\\n    // takes care of read/write access\\n    function memoryAccessManager(uint64 _address, bool _accessIsRead) internal virtual returns (bytes8) {\\n        require(isRead[rwIndex] == _accessIsRead, \\\"Access was not the correct type\\\");\\n\\n        uint64 position = rwPositions[rwIndex];\\n        bytes8 value = rwValues[rwIndex];\\n        rwIndex++;\\n\\n        require((position & 7) == 0, \\\"Position is not aligned\\\");\\n        require(position == _address, \\\"Position and read address do not match\\\");\\n\\n        return value;\\n    }\\n}\\n\\n\",\"keccak256\":\"0x172ace0eab16d875b5dc342bf9fd15aeca8a493a4e7b0ab6b1667ae22361e78f\",\"license\":\"Apache-2.0\"},\"contracts/RealTimeClock.sol\":{\"content\":\"// Copyright 2019 Cartesi Pte. Ltd.\\n\\n// SPDX-License-Identifier: Apache-2.0\\n// Licensed under the Apache License, Version 2.0 (the \\\"License\\\"); you may not use\\n// this file except in compliance with the License. You may obtain a copy of the\\n// License at http://www.apache.org/licenses/LICENSE-2.0\\n\\n// Unless required by applicable law or agreed to in writing, software distributed\\n// under the License is distributed on an \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR\\n// CONDITIONS OF ANY KIND, either express or implied. See the License for the\\n// specific language governing permissions and limitations under the License.\\n\\n\\n\\n/// @title RealTimeClock\\npragma solidity ^0.7.0;\\n\\n/// @title RealTimeClock\\n/// @author Felipe Argento\\n/// @notice Real Time clock simulator\\nlibrary RealTimeClock {\\n    uint64 constant RTC_FREQ_DIV = 100;\\n    \\n    /// @notice Converts from cycle count to time count\\n    /// @param cycle Cycle count\\n    /// @return Time count\\n    function rtcCycleToTime(uint64 cycle) public pure returns (uint64) {\\n        return cycle / RTC_FREQ_DIV;\\n    }\\n\\n    /// @notice Converts from time count to cycle count\\n    /// @param  time Time count\\n    /// @return Cycle count\\n    function rtcTimeToCycle(uint64 time) public pure returns (uint64) {\\n        return time * RTC_FREQ_DIV;\\n    }\\n}\\n\",\"keccak256\":\"0x07a038d80a3f50c9cb153f63ff8d251a5704a2cd1c74863c9f5aeeb0aee247fd\",\"license\":\"Apache-2.0\"},\"contracts/RiscVConstants.sol\":{\"content\":\"// Copyright 2019 Cartesi Pte. Ltd.\\n\\n// SPDX-License-Identifier: Apache-2.0\\n// Licensed under the Apache License, Version 2.0 (the \\\"License\\\"); you may not use\\n// this file except in compliance with the License. You may obtain a copy of the\\n// License at http://www.apache.org/licenses/LICENSE-2.0\\n\\n// Unless required by applicable law or agreed to in writing, software distributed\\n// under the License is distributed on an \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR\\n// CONDITIONS OF ANY KIND, either express or implied. See the License for the\\n// specific language governing permissions and limitations under the License.\\n\\n\\n\\npragma solidity ^0.7.0;\\n\\n/// @title RiscVConstants\\n/// @author Felipe Argento\\n/// @notice Defines getters for important constants\\nlibrary RiscVConstants {\\n    //iflags shifts\\n    function getIflagsHShift()  public pure returns(uint64) {return 0;}\\n    function getIflagsYShift()  public pure returns(uint64) {return 1;}\\n    function getIflagsIShift()  public pure returns(uint64) {return 2;}\\n    function getIflagsPrvShift()  public pure returns(uint64) {return 3;}\\n\\n    //iflags masks\\n    function getIflagsHMask()  public pure returns(uint64) {return uint64(1) << getIflagsHShift();}\\n    function getIflagsYMask()  public pure returns(uint64) {return uint64(1) << getIflagsYShift();}\\n    function getIflagsIMask()  public pure returns(uint64) {return uint64(1) << getIflagsIShift();}\\n    function getIflagsPrvMask()  public pure returns(uint64) {return uint64(3) << getIflagsPrvShift();}\\n\\n    //general purpose\\n    function getXlen() public pure returns(uint64) {return 64;}\\n    function getMxl()  public pure returns(uint64) {return 2;}\\n\\n    //privilege levels\\n    function getPrvU() public pure returns(uint64) {return 0;}\\n    function getPrvS() public pure returns(uint64) {return 1;}\\n    function getPrvH() public pure returns(uint64) {return 2;}\\n    function getPrvM() public pure returns(uint64) {return 3;}\\n\\n    //mstatus shifts\\n    function getMstatusUieShift()  public pure returns(uint64) {return 0;}\\n    function getMstatusSieShift()  public pure returns(uint64) {return 1;}\\n    function getMstatusHieShift()  public pure returns(uint64) {return 2;}\\n    function getMstatusMieShift()  public pure returns(uint64) {return 3;}\\n    function getMstatusUpieShift() public pure returns(uint64) {return 4;}\\n    function getMstatusSpieShift() public pure returns(uint64) {return 5;}\\n    function getMstatusMpieShift() public pure returns(uint64) {return 7;}\\n    function getMstatusSppShift()  public pure returns(uint64) {return 8;}\\n    function getMstatusMppShift()  public pure returns(uint64) {return 11;}\\n    function getMstatusFsShift()   public pure returns(uint64) {return 13;}\\n\\n    function getMstatusXsShift()   public pure returns(uint64) {return 15;}\\n    function getMstatusMprvShift() public pure returns(uint64) {return 17;}\\n    function getMstatusSumShift()  public pure returns(uint64) {return 18;}\\n    function getMstatusMxrShift()  public pure returns(uint64) {return 19;}\\n    function getMstatusTvmShift()  public pure returns(uint64) {return 20;}\\n    function getMstatusTwShift()   public pure returns(uint64) {return 21;}\\n    function getMstatusTsrShift()  public pure returns(uint64) {return 22;}\\n\\n\\n    function getMstatusUxlShift()  public pure returns(uint64) {return 32;}\\n    function getMstatusSxlShift()  public pure returns(uint64) {return 34;}\\n\\n    function getMstatusSdShift()   public pure returns(uint64) {return getXlen() - 1;}\\n\\n    //mstatus masks\\n    function getMstatusUieMask()  public pure returns(uint64) {return (uint64(1) << getMstatusUieShift());}\\n    function getMstatusSieMask()  public pure returns(uint64) {return uint64(1) << getMstatusSieShift();}\\n    function getMstatusMieMask()  public pure returns(uint64) {return uint64(1) << getMstatusMieShift();}\\n    function getMstatusUpieMask() public pure returns(uint64) {return uint64(1) << getMstatusUpieShift();}\\n    function getMstatusSpieMask() public pure returns(uint64) {return uint64(1) << getMstatusSpieShift();}\\n    function getMstatusMpieMask() public pure returns(uint64) {return uint64(1) << getMstatusMpieShift();}\\n    function getMstatusSppMask()  public pure returns(uint64) {return uint64(1) << getMstatusSppShift();}\\n    function getMstatusMppMask()  public pure returns(uint64) {return uint64(3) << getMstatusMppShift();}\\n    function getMstatusFsMask()   public pure returns(uint64) {return uint64(3) << getMstatusFsShift();}\\n    function getMstatusXsMask()   public pure returns(uint64) {return uint64(3) << getMstatusXsShift();}\\n    function getMstatusMprvMask() public pure returns(uint64) {return uint64(1) << getMstatusMprvShift();}\\n    function getMstatusSumMask()  public pure returns(uint64) {return uint64(1) << getMstatusSumShift();}\\n    function getMstatusMxrMask()  public pure returns(uint64) {return uint64(1) << getMstatusMxrShift();}\\n    function getMstatusTvmMask()  public pure returns(uint64) {return uint64(1) << getMstatusTvmShift();}\\n    function getMstatusTwMask()   public pure returns(uint64) {return uint64(1) << getMstatusTwShift();}\\n    function getMstatusTsrMask()  public pure returns(uint64) {return uint64(1) << getMstatusTsrShift();}\\n\\n    function getMstatusUxlMask()  public pure returns(uint64) {return uint64(3) << getMstatusUxlShift();}\\n    function getMstatusSxlMask()  public pure returns(uint64) {return uint64(3) << getMstatusSxlShift();}\\n    function getMstatusSdMask()   public pure returns(uint64) {return uint64(1) << getMstatusSdShift();}\\n\\n    // mstatus read/writes\\n    function getMstatusWMask() public pure returns(uint64) {\\n        return (\\n            getMstatusUieMask()  |\\n            getMstatusSieMask()  |\\n            getMstatusMieMask()  |\\n            getMstatusUpieMask() |\\n            getMstatusSpieMask() |\\n            getMstatusMpieMask() |\\n            getMstatusSppMask()  |\\n            getMstatusMppMask()  |\\n            getMstatusFsMask()   |\\n            getMstatusMprvMask() |\\n            getMstatusSumMask()  |\\n            getMstatusMxrMask()  |\\n            getMstatusTvmMask()  |\\n            getMstatusTwMask()   |\\n            getMstatusTsrMask()\\n        );\\n    }\\n\\n    function getMstatusRMask() public pure returns(uint64) {\\n        return (\\n            getMstatusUieMask()  |\\n            getMstatusSieMask()  |\\n            getMstatusMieMask()  |\\n            getMstatusUpieMask() |\\n            getMstatusSpieMask() |\\n            getMstatusMpieMask() |\\n            getMstatusSppMask()  |\\n            getMstatusMppMask()  |\\n            getMstatusFsMask()   |\\n            getMstatusMprvMask() |\\n            getMstatusSumMask()  |\\n            getMstatusMxrMask()  |\\n            getMstatusTvmMask()  |\\n            getMstatusTwMask()   |\\n            getMstatusTsrMask()  |\\n            getMstatusUxlMask()  |\\n            getMstatusSxlMask()  |\\n            getMstatusSdMask()\\n        );\\n    }\\n\\n    // sstatus read/writes\\n    function getSstatusWMask() public pure returns(uint64) {\\n        return (\\n            getMstatusUieMask()  |\\n            getMstatusSieMask()  |\\n            getMstatusUpieMask() |\\n            getMstatusSpieMask() |\\n            getMstatusSppMask()  |\\n            getMstatusFsMask()   |\\n            getMstatusSumMask()  |\\n            getMstatusMxrMask()\\n        );\\n    }\\n\\n    function getSstatusRMask() public pure returns(uint64) {\\n        return (\\n            getMstatusUieMask()  |\\n            getMstatusSieMask()  |\\n            getMstatusUpieMask() |\\n            getMstatusSpieMask() |\\n            getMstatusSppMask()  |\\n            getMstatusFsMask()   |\\n            getMstatusSumMask()  |\\n            getMstatusMxrMask()  |\\n            getMstatusUxlMask()  |\\n            getMstatusSdMask()\\n        );\\n    }\\n\\n    // mcause for exceptions\\n    function getMcauseInsnAddressMisaligned() public pure returns(uint64) {return 0x0;} ///< instruction address misaligned\\n    function getMcauseInsnAccessFault() public pure returns(uint64) {return 0x1;} ///< instruction access fault\\n    function getMcauseIllegalInsn() public pure returns(uint64) {return 0x2;} ///< illegal instruction\\n    function getMcauseBreakpoint() public pure returns(uint64) {return 0x3;} ///< breakpoint\\n    function getMcauseLoadAddressMisaligned() public pure returns(uint64) {return 0x4;} ///< load address misaligned\\n    function getMcauseLoadAccessFault() public pure returns(uint64) {return 0x5;} ///< load access fault\\n    function getMcauseStoreAmoAddressMisaligned() public pure returns(uint64) {return 0x6;} ///< store/amo address misaligned\\n    function getMcauseStoreAmoAccessFault() public pure returns(uint64) {return 0x7;} ///< store/amo access fault\\n    ///< environment call (+0: from u-mode, +1: from s-mode, +3: from m-mode)\\n    function getMcauseEcallBase() public pure returns(uint64) { return 0x8;}\\n    function getMcauseFetchPageFault() public pure returns(uint64) {return 0xc;} ///< instruction page fault\\n    function getMcauseLoadPageFault() public pure returns(uint64) {return 0xd;} ///< load page fault\\n    function getMcauseStoreAmoPageFault() public pure returns(uint64) {return 0xf;} ///< store/amo page fault\\n\\n    function getMcauseInterruptFlag() public pure returns(uint64) {return uint64(1) << (getXlen() - 1);} ///< interrupt flag\\n\\n    // mcounteren constants\\n    function getMcounterenCyShift() public pure returns(uint64) {return 0;}\\n    function getMcounterenTmShift() public pure returns(uint64) {return 1;}\\n    function getMcounterenIrShift() public pure returns(uint64) {return 2;}\\n\\n    function getMcounterenCyMask() public pure returns(uint64) {return uint64(1) << getMcounterenCyShift();}\\n    function getMcounterenTmMask() public pure returns(uint64) {return uint64(1) << getMcounterenTmShift();}\\n    function getMcounterenIrMask() public pure returns(uint64) {return uint64(1) << getMcounterenIrShift();}\\n\\n    function getMcounterenRwMask() public pure returns(uint64) {return getMcounterenCyMask() | getMcounterenTmMask() | getMcounterenIrMask();}\\n    function getScounterenRwMask() public pure returns(uint64) {return getMcounterenRwMask();}\\n\\n    //paging constants\\n    function getPgShift() public pure returns(uint64) {return 12;}\\n    function getPgMask()  public pure returns(uint64) {((uint64(1) << getPgShift()) - 1);}\\n\\n    function getPteVMask() public pure returns(uint64) {return (1 << 0);}\\n    function getPteUMask() public pure returns(uint64) {return (1 << 4);}\\n    function getPteAMask() public pure returns(uint64) {return (1 << 6);}\\n    function getPteDMask() public pure returns(uint64) {return (1 << 7);}\\n\\n    function getPteXwrReadShift() public pure returns(uint64) {return 0;}\\n    function getPteXwrWriteShift() public pure returns(uint64) {return 1;}\\n    function getPteXwrCodeShift() public pure returns(uint64) {return 2;}\\n\\n    // page masks\\n    function getPageNumberShift() public pure returns(uint64) {return 12;}\\n\\n    function getPageOffsetMask() public pure returns(uint64) {return ((uint64(1) << getPageNumberShift()) - 1);}\\n\\n    // mip shifts:\\n    function getMipUsipShift() public pure returns(uint64) {return 0;}\\n    function getMipSsipShift() public pure returns(uint64) {return 1;}\\n    function getMipMsipShift() public pure returns(uint64) {return 3;}\\n    function getMipUtipShift() public pure returns(uint64) {return 4;}\\n    function getMipStipShift() public pure returns(uint64) {return 5;}\\n    function getMipMtipShift() public pure returns(uint64) {return 7;}\\n    function getMipUeipShift() public pure returns(uint64) {return 8;}\\n    function getMipSeipShift() public pure returns(uint64) {return 9;}\\n    function getMipMeipShift() public pure returns(uint64) {return 11;}\\n\\n    function getMipUsipMask() public pure returns(uint64) {return uint64(1) << getMipUsipShift();}\\n    function getMipSsipMask() public pure returns(uint64) {return uint64(1) << getMipSsipShift();}\\n    function getMipMsipMask() public pure returns(uint64) {return uint64(1) << getMipMsipShift();}\\n    function getMipUtipMask() public pure returns(uint64) {return uint64(1) << getMipUtipShift();}\\n    function getMipStipMask() public pure returns(uint64) {return uint64(1) << getMipStipShift();}\\n    function getMipMtipMask() public pure returns(uint64) {return uint64(1) << getMipMtipShift();}\\n    function getMipUeipMask() public pure returns(uint64) {return uint64(1) << getMipUeipShift();}\\n    function getMipSeipMask() public pure returns(uint64) {return uint64(1) << getMipSeipShift();}\\n    function getMipMeipMask() public pure returns(uint64) {return uint64(1) << getMipMeipShift();}\\n}\\n\",\"keccak256\":\"0xfd9070a43036eb37831d90fd3770640225fe8fd31e0dbe93034b247933b9a9c1\",\"license\":\"Apache-2.0\"},\"contracts/RiscVDecoder.sol\":{\"content\":\"// Copyright 2019 Cartesi Pte. Ltd.\\n\\n// SPDX-License-Identifier: Apache-2.0\\n// Licensed under the Apache License, Version 2.0 (the \\\"License\\\"); you may not use\\n// this file except in compliance with the License. You may obtain a copy of the\\n// License at http://www.apache.org/licenses/LICENSE-2.0\\n\\n// Unless required by applicable law or agreed to in writing, software distributed\\n// under the License is distributed on an \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR\\n// CONDITIONS OF ANY KIND, either express or implied. See the License for the\\n// specific language governing permissions and limitations under the License.\\n\\n\\n\\n// @title RiscVDecoder\\npragma solidity ^0.7.0;\\n\\nimport \\\"@cartesi/util/contracts/BitsManipulationLibrary.sol\\\";\\n\\n/// @title RiscVDecoder\\n/// @author Felipe Argento\\n/// @notice Contract responsible for decoding the riscv's instructions\\n//      It applies different bitwise operations and masks to reach\\n//      specific positions and use that positions to identify the\\n//      correct function to be executed\\nlibrary RiscVDecoder {\\n    /// @notice Get the instruction's RD\\n    /// @param insn Instruction\\n    function insnRd(uint32 insn) public pure returns(uint32) {\\n        return (insn >> 7) & 0x1F;\\n    }\\n\\n    /// @notice Get the instruction's RS1\\n    /// @param insn Instruction\\n    function insnRs1(uint32 insn) public pure returns(uint32) {\\n        return (insn >> 15) & 0x1F;\\n    }\\n\\n    /// @notice Get the instruction's RS2\\n    /// @param insn Instruction\\n    function insnRs2(uint32 insn) public pure returns(uint32) {\\n        return (insn >> 20) & 0x1F;\\n    }\\n\\n    /// @notice Get the I-type instruction's immediate value\\n    /// @param insn Instruction\\n    function insnIImm(uint32 insn) public pure returns(int32) {\\n        return int32(insn) >> 20;\\n    }\\n\\n    /// @notice Get the I-type instruction's unsigned immediate value\\n    /// @param insn Instruction\\n    function insnIUimm(uint32 insn) public pure returns(uint32) {\\n        return insn >> 20;\\n    }\\n\\n    /// @notice Get the U-type instruction's immediate value\\n    /// @param insn Instruction\\n    function insnUImm(uint32 insn) public pure returns(int32) {\\n        return int32(insn & 0xfffff000);\\n    }\\n\\n    /// @notice Get the B-type instruction's immediate value\\n    /// @param insn Instruction\\n    function insnBImm(uint32 insn) public pure returns(int32) {\\n        int32 imm = int32(\\n            ((insn >> (31 - 12)) & (1 << 12)) |\\n            ((insn >> (25 - 5)) & 0x7e0) |\\n            ((insn >> (8 - 1)) & 0x1e) |\\n            ((insn << (11 - 7)) & (1 << 11))\\n        );\\n        return BitsManipulationLibrary.int32SignExtension(imm, 13);\\n    }\\n\\n    /// @notice Get the J-type instruction's immediate value\\n    /// @param insn Instruction\\n    function insnJImm(uint32 insn) public pure returns(int32) {\\n        int32 imm = int32(\\n            ((insn >> (31 - 20)) & (1 << 20)) |\\n            ((insn >> (21 - 1)) & 0x7fe) |\\n            ((insn >> (20 - 11)) & (1 << 11)) |\\n            (insn & 0xff000)\\n        );\\n        return BitsManipulationLibrary.int32SignExtension(imm, 21);\\n    }\\n\\n    /// @notice Get the S-type instruction's immediate value\\n    /// @param insn Instruction\\n    function insnSImm(uint32 insn) public pure returns(int32) {\\n        int32 imm = int32(((insn & 0xfe000000) >> (25 - 5)) | ((insn >> 7) & 0x1F));\\n        return BitsManipulationLibrary.int32SignExtension(imm, 12);\\n    }\\n\\n    /// @notice Get the instruction's opcode field\\n    /// @param insn Instruction\\n    function insnOpcode(uint32 insn) public pure returns (uint32) {\\n        return insn & 0x7F;\\n    }\\n\\n    /// @notice Get the instruction's funct3 field\\n    /// @param insn Instruction\\n    function insnFunct3(uint32 insn) public pure returns (uint32) {\\n        return (insn >> 12) & 0x07;\\n    }\\n\\n    /// @notice Get the concatenation of instruction's funct3 and funct7 fields\\n    /// @param insn Instruction\\n    function insnFunct3Funct7(uint32 insn) public pure returns (uint32) {\\n        return ((insn >> 5) & 0x380) | (insn >> 25);\\n    }\\n\\n    /// @notice Get the concatenation of instruction's funct3 and funct5 fields\\n    /// @param insn Instruction\\n    function insnFunct3Funct5(uint32 insn) public pure returns (uint32) {\\n        return ((insn >> 7) & 0xE0) | (insn >> 27);\\n    }\\n\\n    /// @notice Get the instruction's funct7 field\\n    /// @param insn Instruction\\n    function insnFunct7(uint32 insn) public pure returns (uint32) {\\n        return (insn >> 25) & 0x7F;\\n    }\\n\\n    /// @notice Get the instruction's funct6 field\\n    /// @param insn Instruction\\n    function insnFunct6(uint32 insn) public pure returns (uint32) {\\n        return (insn >> 26) & 0x3F;\\n    }\\n}\\n\",\"keccak256\":\"0xd908b1ffb6386732728562ea6cc57d5ffe71dc2134e8b0f79857882c8a3eac3c\",\"license\":\"Apache-2.0\"},\"contracts/ShadowAddresses.sol\":{\"content\":\"// Copyright 2019 Cartesi Pte. Ltd.\\n\\n// SPDX-License-Identifier: Apache-2.0\\n// Licensed under the Apache License, Version 2.0 (the \\\"License\\\"); you may not use\\n// this file except in compliance with the License. You may obtain a copy of the\\n// License at http://www.apache.org/licenses/LICENSE-2.0\\n\\n// Unless required by applicable law or agreed to in writing, software distributed\\n// under the License is distributed on an \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR\\n// CONDITIONS OF ANY KIND, either express or implied. See the License for the\\n// specific language governing permissions and limitations under the License.\\n\\n\\n\\npragma solidity ^0.7.0;\\n\\n\\n/// @title ShadowAddresses\\n/// @author Felipe Argento\\n/// @notice Defines the processor state. Memory-mapped to the lowest 512 bytes in pm\\n/// @dev Defined on Cartesi techpaper version 1.02 - Section 3 - table 2 \\n/// Source: https://cartesi.io/cartesi_whitepaper.pdf \\nlibrary ShadowAddresses {\\n    uint64 constant PC         = 0x100;\\n    uint64 constant MVENDORID  = 0x108;\\n    uint64 constant MARCHID    = 0x110;\\n    uint64 constant MIMPID     = 0x118;\\n    uint64 constant MCYCLE     = 0x120;\\n    uint64 constant MINSTRET   = 0x128;\\n    uint64 constant MSTATUS    = 0x130;\\n    uint64 constant MTVEC      = 0x138;\\n    uint64 constant MSCRATCH   = 0x140;\\n    uint64 constant MEPC       = 0x148;\\n    uint64 constant MCAUSE     = 0x150;\\n    uint64 constant MTVAL      = 0x158;\\n    uint64 constant MISA       = 0x160;\\n    uint64 constant MIE        = 0x168;\\n    uint64 constant MIP        = 0x170;\\n    uint64 constant MEDELEG    = 0x178;\\n    uint64 constant MIDELEG    = 0x180;\\n    uint64 constant MCOUNTEREN = 0x188;\\n    uint64 constant STVEC      = 0x190;\\n    uint64 constant SSCRATCH   = 0x198;\\n    uint64 constant SEPC       = 0x1a0;\\n    uint64 constant SCAUSE     = 0x1a8;\\n    uint64 constant STVAL      = 0x1b0;\\n    uint64 constant SATP       = 0x1b8;\\n    uint64 constant SCOUNTEREN = 0x1c0;\\n    uint64 constant ILRSC      = 0x1c8;\\n    uint64 constant IFLAGS     = 0x1d0;\\n\\n    //getters - contracts cant access constants directly\\n    function getPc()         public pure returns(uint64) {return PC;}\\n    function getMvendorid()  public pure returns(uint64) {return MVENDORID;}\\n    function getMarchid()    public pure returns(uint64) {return MARCHID;}\\n    function getMimpid()     public pure returns(uint64) {return MIMPID;}\\n    function getMcycle()     public pure returns(uint64) {return MCYCLE;}\\n    function getMinstret()   public pure returns(uint64) {return MINSTRET;}\\n    function getMstatus()    public pure returns(uint64) {return MSTATUS;}\\n    function getMtvec()      public pure returns(uint64) {return MTVEC;}\\n    function getMscratch()   public pure returns(uint64) {return MSCRATCH;}\\n    function getMepc()       public pure returns(uint64) {return MEPC;}\\n    function getMcause()     public pure returns(uint64) {return MCAUSE;}\\n    function getMtval()      public pure returns(uint64) {return MTVAL;}\\n    function getMisa()       public pure returns(uint64) {return MISA;}\\n    function getMie()        public pure returns(uint64) {return MIE;}\\n    function getMip()        public pure returns(uint64) {return MIP;}\\n    function getMedeleg()    public pure returns(uint64) {return MEDELEG;}\\n    function getMideleg()    public pure returns(uint64) {return MIDELEG;}\\n    function getMcounteren() public pure returns(uint64) {return MCOUNTEREN;}\\n    function getStvec()      public pure returns(uint64) {return STVEC;}\\n    function getSscratch()   public pure returns(uint64) {return SSCRATCH;}\\n    function getSepc()       public pure returns(uint64) {return SEPC;}\\n    function getScause()     public pure returns(uint64) {return SCAUSE;}\\n    function getStval()      public pure returns(uint64) {return STVAL;}\\n    function getSatp()       public pure returns(uint64) {return SATP;}\\n    function getScounteren() public pure returns(uint64) {return SCOUNTEREN;}\\n    function getIlrsc()      public pure returns(uint64) {return ILRSC;}\\n    function getIflags()     public pure returns(uint64) {return IFLAGS;}\\n}\\n\",\"keccak256\":\"0xbfd187bab76a2802de777406cdddc9fe0cbf79ab8cb6f76075da7db664a9e9ae\",\"license\":\"Apache-2.0\"}},\"version\":1}",
  "bytecode": "0x610e54610026600b82828239805160001a60731461001957fe5b30600052607381538281f3fe730000000000000000000000000000000000000000301460806040526004361061004b5760003560e01c80635ce28dae14610050578063805563a6146100a95780639f1cc199146100ee575b600080fd5b81801561005c57600080fd5b506100956004803603606081101561007357600080fd5b506001600160a01b038135169063ffffffff6020820135169060400135610133565b604080519115158252519081900360200190f35b8180156100b557600080fd5b50610095600480360360608110156100cc57600080fd5b506001600160a01b038135169063ffffffff60208201351690604001356104f2565b8180156100fa57600080fd5b506100956004803603606081101561011157600080fd5b506001600160a01b038135169063ffffffff602082013516906040013561082a565b600080733A7e1A06Dc3454A317b4e51fF80F0ff01aC2A21F63f9878072856040518263ffffffff1660e01b8152600401808263ffffffff16815260200191505060206040518083038186803b15801561018b57600080fd5b505af415801561019f573d6000803e3d6000fd5b505050506040513d60208110156101b557600080fd5b5051604080516343642b9560e11b81526001600160a01b038816600482015263ffffffff831660248201528151929350600092839273865C4497879744B211F3C52EcF6D309AD671b297926386c8572a9260448083019392829003018186803b15801561022157600080fd5b505af4158015610235573d6000803e3d6000fd5b505050506040513d604081101561024b57600080fd5b50805160209091015190925090508161026a57600093505050506104eb565b6000733A7e1A06Dc3454A317b4e51fF80F0ff01aC2A21F63287b44bf886040518263ffffffff1660e01b8152600401808263ffffffff16815260200191505060206040518083038186803b1580156102c157600080fd5b505af41580156102d5573d6000803e3d6000fd5b505050506040513d60208110156102eb57600080fd5b505160408051631ee0114960e21b815263ffffffff8a1660048201529051919250600091733A7e1A06Dc3454A317b4e51fF80F0ff01aC2A21F91637b804524916024808301926020929190829003018186803b15801561034a57600080fd5b505af415801561035e573d6000803e3d6000fd5b505050506040513d602081101561037457600080fd5b5051905063ffffffff8116156103fa57604080516336e4ae1760e11b815263ffffffff8316600482015267ffffffffffffffff8516602482015290516001600160a01b038b1691636dc95c2e91604480830192600092919082900301818387803b1580156103e157600080fd5b505af11580156103f5573d6000803e3d6000fd5b505050505b6000876104125761040b8484610c68565b905061041f565b61041c8484610c72565b90505b63ffffffff8316156104e05760408051632daa40a960e21b81526001600160a01b038c16600482015263ffffffff8816602482015267ffffffffffffffff83166044820152905173865C4497879744B211F3C52EcF6D309AD671b2979163b6a902a4916064808301926020929190829003018186803b1580156104a157600080fd5b505af41580156104b5573d6000803e3d6000fd5b505050506040513d60208110156104cb57600080fd5b50516104e057600096505050505050506104eb565b600196505050505050505b9392505050565b600080733A7e1A06Dc3454A317b4e51fF80F0ff01aC2A21F63f9878072856040518263ffffffff1660e01b8152600401808263ffffffff16815260200191505060206040518083038186803b15801561054a57600080fd5b505af415801561055e573d6000803e3d6000fd5b505050506040513d602081101561057457600080fd5b505160408051631ee0114960e21b815263ffffffff87166004820152905191925060019160009182918291733A7e1A06Dc3454A317b4e51fF80F0ff01aC2A21F91637b80452491602480820192602092909190829003018186803b1580156105db57600080fd5b505af41580156105ef573d6000803e3d6000fd5b505050506040513d602081101561060557600080fd5b5051905063ffffffff8116156106b057604080516343642b9560e11b81526001600160a01b038b16600482015263ffffffff87166024820152815173865C4497879744B211F3C52EcF6D309AD671b297926386c8572a9260448082019391829003018186803b15801561067757600080fd5b505af415801561068b573d6000803e3d6000fd5b505050506040513d60408110156106a157600080fd5b50805160209091015190945092505b836106c3576000955050505050506104eb565b866106d9576106d28989610c7d565b91506106e5565b6106e288610d86565b91505b60408051632daa40a960e21b81526001600160a01b038b16600482015263ffffffff8716602482015267ffffffffffffffff84166044820152905173865C4497879744B211F3C52EcF6D309AD671b2979163b6a902a4916064808301926020929190829003018186803b15801561075b57600080fd5b505af415801561076f573d6000803e3d6000fd5b505050506040513d602081101561078557600080fd5b5051610799576000955050505050506104eb565b63ffffffff81161561081b57604080516336e4ae1760e11b815263ffffffff8316600482015267ffffffffffffffff8516602482015290516001600160a01b038b1691636dc95c2e91604480830192600092919082900301818387803b15801561080257600080fd5b505af1158015610816573d6000803e3d6000fd5b505050505b50600198975050505050505050565b600080733A7e1A06Dc3454A317b4e51fF80F0ff01aC2A21F63f9878072856040518263ffffffff1660e01b8152600401808263ffffffff16815260200191505060206040518083038186803b15801561088257600080fd5b505af4158015610896573d6000803e3d6000fd5b505050506040513d60208110156108ac57600080fd5b5051604080516343642b9560e11b81526001600160a01b038816600482015263ffffffff831660248201528151929350600092839273865C4497879744B211F3C52EcF6D309AD671b297926386c8572a9260448083019392829003018186803b15801561091857600080fd5b505af415801561092c573d6000803e3d6000fd5b505050506040513d604081101561094257600080fd5b50805160209091015190925090508161096157600093505050506104eb565b6000733A7e1A06Dc3454A317b4e51fF80F0ff01aC2A21F63287b44bf886040518263ffffffff1660e01b8152600401808263ffffffff16815260200191505060206040518083038186803b1580156109b857600080fd5b505af41580156109cc573d6000803e3d6000fd5b505050506040513d60208110156109e257600080fd5b50516040805163188cb96760e21b815263ffffffff8316600482015290519192506000916001600160a01b038b1691636232e59c91602480830192602092919082900301818787803b158015610a3757600080fd5b505af1158015610a4b573d6000803e3d6000fd5b505050506040513d6020811015610a6157600080fd5b505160408051631ee0114960e21b815263ffffffff8b1660048201529051919250600091733A7e1A06Dc3454A317b4e51fF80F0ff01aC2A21F91637b804524916024808301926020929190829003018186803b158015610ac057600080fd5b505af4158015610ad4573d6000803e3d6000fd5b505050506040513d6020811015610aea57600080fd5b5051905063ffffffff811615610b7057604080516336e4ae1760e11b815263ffffffff8316600482015267ffffffffffffffff8616602482015290516001600160a01b038c1691636dc95c2e91604480830192600092919082900301818387803b158015610b5757600080fd5b505af1158015610b6b573d6000803e3d6000fd5b505050505b600088610b8857610b818584610e15565b9050610b95565b610b928584610e19565b90505b63ffffffff841615610c575760408051632daa40a960e21b81526001600160a01b038d16600482015263ffffffff8916602482015267ffffffffffffffff83166044820152905173865C4497879744B211F3C52EcF6D309AD671b2979163b6a902a4916064808301926020929190829003018186803b158015610c1757600080fd5b505af4158015610c2b573d6000803e3d6000fd5b505050506040513d6020811015610c4157600080fd5b5051610c575760009750505050505050506104eb565b5060019a9950505050505050505050565b63ffffffff161790565b191663ffffffff1690565b6000826001600160a01b0316636232e59c733A7e1A06Dc3454A317b4e51fF80F0ff01aC2A21F63287b44bf856040518263ffffffff1660e01b8152600401808263ffffffff16815260200191505060206040518083038186803b158015610ce357600080fd5b505af4158015610cf7573d6000803e3d6000fd5b505050506040513d6020811015610d0d57600080fd5b5051604080516001600160e01b031960e085901b16815263ffffffff90921660048301525160248083019260209291908290030181600087803b158015610d5357600080fd5b505af1158015610d67573d6000803e3d6000fd5b505050506040513d6020811015610d7d57600080fd5b50519392505050565b6000733A7e1A06Dc3454A317b4e51fF80F0ff01aC2A21F63287b44bf836040518263ffffffff1660e01b8152600401808263ffffffff16815260200191505060206040518083038186803b158015610ddd57600080fd5b505af4158015610df1573d6000803e3d6000fd5b505050506040513d6020811015610e0757600080fd5b505163ffffffff1692915050565b1790565b19169056fea26469706673582212200939b2c1c3a3783957bba945b9320e7b7e02764efce2675182c1e11ca659f0ec64736f6c63430007040033",
  "deployedBytecode": "0x730000000000000000000000000000000000000000301460806040526004361061004b5760003560e01c80635ce28dae14610050578063805563a6146100a95780639f1cc199146100ee575b600080fd5b81801561005c57600080fd5b506100956004803603606081101561007357600080fd5b506001600160a01b038135169063ffffffff6020820135169060400135610133565b604080519115158252519081900360200190f35b8180156100b557600080fd5b50610095600480360360608110156100cc57600080fd5b506001600160a01b038135169063ffffffff60208201351690604001356104f2565b8180156100fa57600080fd5b506100956004803603606081101561011157600080fd5b506001600160a01b038135169063ffffffff602082013516906040013561082a565b60008073__$1ab68dcaeb0d61096d66d8aa9a04b20861$__63f9878072856040518263ffffffff1660e01b8152600401808263ffffffff16815260200191505060206040518083038186803b15801561018b57600080fd5b505af415801561019f573d6000803e3d6000fd5b505050506040513d60208110156101b557600080fd5b5051604080516343642b9560e11b81526001600160a01b038816600482015263ffffffff831660248201528151929350600092839273__$5ae57dd8e663cec607dc5d0b588e738109$__926386c8572a9260448083019392829003018186803b15801561022157600080fd5b505af4158015610235573d6000803e3d6000fd5b505050506040513d604081101561024b57600080fd5b50805160209091015190925090508161026a57600093505050506104eb565b600073__$1ab68dcaeb0d61096d66d8aa9a04b20861$__63287b44bf886040518263ffffffff1660e01b8152600401808263ffffffff16815260200191505060206040518083038186803b1580156102c157600080fd5b505af41580156102d5573d6000803e3d6000fd5b505050506040513d60208110156102eb57600080fd5b505160408051631ee0114960e21b815263ffffffff8a166004820152905191925060009173__$1ab68dcaeb0d61096d66d8aa9a04b20861$__91637b804524916024808301926020929190829003018186803b15801561034a57600080fd5b505af415801561035e573d6000803e3d6000fd5b505050506040513d602081101561037457600080fd5b5051905063ffffffff8116156103fa57604080516336e4ae1760e11b815263ffffffff8316600482015267ffffffffffffffff8516602482015290516001600160a01b038b1691636dc95c2e91604480830192600092919082900301818387803b1580156103e157600080fd5b505af11580156103f5573d6000803e3d6000fd5b505050505b6000876104125761040b8484610c68565b905061041f565b61041c8484610c72565b90505b63ffffffff8316156104e05760408051632daa40a960e21b81526001600160a01b038c16600482015263ffffffff8816602482015267ffffffffffffffff83166044820152905173__$5ae57dd8e663cec607dc5d0b588e738109$__9163b6a902a4916064808301926020929190829003018186803b1580156104a157600080fd5b505af41580156104b5573d6000803e3d6000fd5b505050506040513d60208110156104cb57600080fd5b50516104e057600096505050505050506104eb565b600196505050505050505b9392505050565b60008073__$1ab68dcaeb0d61096d66d8aa9a04b20861$__63f9878072856040518263ffffffff1660e01b8152600401808263ffffffff16815260200191505060206040518083038186803b15801561054a57600080fd5b505af415801561055e573d6000803e3d6000fd5b505050506040513d602081101561057457600080fd5b505160408051631ee0114960e21b815263ffffffff8716600482015290519192506001916000918291829173__$1ab68dcaeb0d61096d66d8aa9a04b20861$__91637b80452491602480820192602092909190829003018186803b1580156105db57600080fd5b505af41580156105ef573d6000803e3d6000fd5b505050506040513d602081101561060557600080fd5b5051905063ffffffff8116156106b057604080516343642b9560e11b81526001600160a01b038b16600482015263ffffffff87166024820152815173__$5ae57dd8e663cec607dc5d0b588e738109$__926386c8572a9260448082019391829003018186803b15801561067757600080fd5b505af415801561068b573d6000803e3d6000fd5b505050506040513d60408110156106a157600080fd5b50805160209091015190945092505b836106c3576000955050505050506104eb565b866106d9576106d28989610c7d565b91506106e5565b6106e288610d86565b91505b60408051632daa40a960e21b81526001600160a01b038b16600482015263ffffffff8716602482015267ffffffffffffffff84166044820152905173__$5ae57dd8e663cec607dc5d0b588e738109$__9163b6a902a4916064808301926020929190829003018186803b15801561075b57600080fd5b505af415801561076f573d6000803e3d6000fd5b505050506040513d602081101561078557600080fd5b5051610799576000955050505050506104eb565b63ffffffff81161561081b57604080516336e4ae1760e11b815263ffffffff8316600482015267ffffffffffffffff8516602482015290516001600160a01b038b1691636dc95c2e91604480830192600092919082900301818387803b15801561080257600080fd5b505af1158015610816573d6000803e3d6000fd5b505050505b50600198975050505050505050565b60008073__$1ab68dcaeb0d61096d66d8aa9a04b20861$__63f9878072856040518263ffffffff1660e01b8152600401808263ffffffff16815260200191505060206040518083038186803b15801561088257600080fd5b505af4158015610896573d6000803e3d6000fd5b505050506040513d60208110156108ac57600080fd5b5051604080516343642b9560e11b81526001600160a01b038816600482015263ffffffff831660248201528151929350600092839273__$5ae57dd8e663cec607dc5d0b588e738109$__926386c8572a9260448083019392829003018186803b15801561091857600080fd5b505af415801561092c573d6000803e3d6000fd5b505050506040513d604081101561094257600080fd5b50805160209091015190925090508161096157600093505050506104eb565b600073__$1ab68dcaeb0d61096d66d8aa9a04b20861$__63287b44bf886040518263ffffffff1660e01b8152600401808263ffffffff16815260200191505060206040518083038186803b1580156109b857600080fd5b505af41580156109cc573d6000803e3d6000fd5b505050506040513d60208110156109e257600080fd5b50516040805163188cb96760e21b815263ffffffff8316600482015290519192506000916001600160a01b038b1691636232e59c91602480830192602092919082900301818787803b158015610a3757600080fd5b505af1158015610a4b573d6000803e3d6000fd5b505050506040513d6020811015610a6157600080fd5b505160408051631ee0114960e21b815263ffffffff8b166004820152905191925060009173__$1ab68dcaeb0d61096d66d8aa9a04b20861$__91637b804524916024808301926020929190829003018186803b158015610ac057600080fd5b505af4158015610ad4573d6000803e3d6000fd5b505050506040513d6020811015610aea57600080fd5b5051905063ffffffff811615610b7057604080516336e4ae1760e11b815263ffffffff8316600482015267ffffffffffffffff8616602482015290516001600160a01b038c1691636dc95c2e91604480830192600092919082900301818387803b158015610b5757600080fd5b505af1158015610b6b573d6000803e3d6000fd5b505050505b600088610b8857610b818584610e15565b9050610b95565b610b928584610e19565b90505b63ffffffff841615610c575760408051632daa40a960e21b81526001600160a01b038d16600482015263ffffffff8916602482015267ffffffffffffffff83166044820152905173__$5ae57dd8e663cec607dc5d0b588e738109$__9163b6a902a4916064808301926020929190829003018186803b158015610c1757600080fd5b505af4158015610c2b573d6000803e3d6000fd5b505050506040513d6020811015610c4157600080fd5b5051610c575760009750505050505050506104eb565b5060019a9950505050505050505050565b63ffffffff161790565b191663ffffffff1690565b6000826001600160a01b0316636232e59c73__$1ab68dcaeb0d61096d66d8aa9a04b20861$__63287b44bf856040518263ffffffff1660e01b8152600401808263ffffffff16815260200191505060206040518083038186803b158015610ce357600080fd5b505af4158015610cf7573d6000803e3d6000fd5b505050506040513d6020811015610d0d57600080fd5b5051604080516001600160e01b031960e085901b16815263ffffffff90921660048301525160248083019260209291908290030181600087803b158015610d5357600080fd5b505af1158015610d67573d6000803e3d6000fd5b505050506040513d6020811015610d7d57600080fd5b50519392505050565b600073__$1ab68dcaeb0d61096d66d8aa9a04b20861$__63287b44bf836040518263ffffffff1660e01b8152600401808263ffffffff16815260200191505060206040518083038186803b158015610ddd57600080fd5b505af4158015610df1573d6000803e3d6000fd5b505050506040513d6020811015610e0757600080fd5b505163ffffffff1692915050565b1790565b19169056fea26469706673582212200939b2c1c3a3783957bba945b9320e7b7e02764efce2675182c1e11ca659f0ec64736f6c63430007040033",
  "libraries": {
    "RiscVDecoder": "0x3A7e1A06Dc3454A317b4e51fF80F0ff01aC2A21F",
    "RiscVConstants": "0x1e60809D44f791Fdc8250b45863bCeC656bE247e",
    "RealTimeClock": "0x15D3A8746148295f90F8F8904EA61fD01d14E73c",
    "CSRReads": "0x484658F29211c015109523BE59DE1811B407E54B",
    "CSR": "0x865C4497879744B211F3C52EcF6D309AD671b297"
  },
  "devdoc": {
    "author": "Felipe Argento",
    "kind": "dev",
    "methods": {
      "executeCsrRW(MemoryInteractor,uint32,uint256)": {
        "details": "The specific instruction is decided by insncode, which defines the value to be written.",
        "params": {
          "insn": "Instruction",
          "insncode": "Specific instruction code",
          "mi": "MemoryInteractor with which Step function is interacting"
        },
        "returns": {
          "_0": "true if instruction was executed successfuly and false if its an illegal insn exception"
        }
      },
      "executeCsrSC(MemoryInteractor,uint32,uint256)": {
        "details": "The specific instruction is decided by insncode, which defines the value to be written",
        "params": {
          "insn": "Instruction",
          "insncode": "Specific instruction code",
          "mi": "MemoryInteractor with which Step function is interacting"
        },
        "returns": {
          "_0": "true if instruction was executed successfuly and false if its an illegal insn exception"
        }
      },
      "executeCsrSCI(MemoryInteractor,uint32,uint256)": {
        "details": "The specific instruction is decided by insncode, which defines the value to be written.",
        "params": {
          "insn": "Instruction",
          "insncode": "Specific instruction code",
          "mi": "MemoryInteractor with which Step function is interacting"
        },
        "returns": {
          "_0": "true if instruction was executed successfuly and false if its an illegal insn exception"
        }
      }
    },
    "title": "CSRExecute",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "executeCsrRW(MemoryInteractor,uint32,uint256)": {
        "notice": "Implementation of CSRRW and CSRRWI instructions"
      },
      "executeCsrSC(MemoryInteractor,uint32,uint256)": {
        "notice": "Implementation of CSRRS and CSRRC instructions"
      },
      "executeCsrSCI(MemoryInteractor,uint32,uint256)": {
        "notice": "Implementation of CSRRSI and CSRRCI instructions"
      }
    },
    "notice": "Implements CSR execute logic",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}