{
  "address": "0xe5e7a2cDcf78E397FF6B9f6a70339a4536Bbc1FA",
  "abi": [
    {
      "inputs": [],
      "name": "getMcauseBreakpoint",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMcauseEcallBase",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMcauseFetchPageFault",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMcauseIllegalInsn",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMcauseInsnAccessFault",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMcauseInsnAddressMisaligned",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMcauseInterruptFlag",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMcauseLoadAccessFault",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMcauseLoadAddressMisaligned",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMcauseLoadPageFault",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMcauseStoreAmoAccessFault",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMcauseStoreAmoAddressMisaligned",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMcauseStoreAmoPageFault",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0xdea9a3c2dcf554900f3ce730e1f9ce2159becf296f6999b81710d9ed14f1d86c",
  "receipt": {
    "to": null,
    "from": "0xD63A9d27E7A573e28889A363310443Cba076D546",
    "contractAddress": "0xe5e7a2cDcf78E397FF6B9f6a70339a4536Bbc1FA",
    "transactionIndex": 0,
    "gasUsed": "44311879",
    "logsBloom": "0x
    "blockHash": "0xfe05700cdde480f8634244c53f63ac99de1853fd01faeeb489f4190baf38d2dd",
    "transactionHash": "0xdea9a3c2dcf554900f3ce730e1f9ce2159becf296f6999b81710d9ed14f1d86c",
    "logs": [],
    "blockNumber": 6124775,
    "cumulativeGasUsed": "34013859",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "metadata": "{\"compiler\":{\"version\":\"0.7.4+commit.3f05b770\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"getMcauseBreakpoint\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMcauseEcallBase\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMcauseFetchPageFault\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMcauseIllegalInsn\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMcauseInsnAccessFault\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMcauseInsnAddressMisaligned\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMcauseInterruptFlag\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMcauseLoadAccessFault\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMcauseLoadAddressMisaligned\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMcauseLoadPageFault\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMcauseStoreAmoAccessFault\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMcauseStoreAmoAddressMisaligned\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMcauseStoreAmoPageFault\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Felipe Argento\",\"kind\":\"dev\",\"methods\":{\"raiseException(MemoryInteractor,uint64,uint64)\":{\"params\":{\"cause\":\"Exception (or interrupt) mcause (or scause).\",\"mi\":\"Memory Interactor with which Step function is interacting.\",\"tval\":\"Associated tval.\"}}},\"title\":\"Exceptions\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"raiseException(MemoryInteractor,uint64,uint64)\":{\"notice\":\"Raise an exception (or interrupt).\"}},\"notice\":\"Implements raise exception behavior and mcause getters\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Exceptions.sol\":\"Exceptions\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@cartesi/util/contracts/BitsManipulationLibrary.sol\":{\"content\":\"// Copyright 2020 Cartesi Pte. Ltd.\\n\\n// SPDX-License-Identifier: Apache-2.0\\n// Licensed under the Apache License, Version 2.0 (the \\\"License\\\"); you may not use\\n// this file except in compliance with the License. You may obtain a copy of the\\n// License at http://www.apache.org/licenses/LICENSE-2.0\\n\\n// Unless required by applicable law or agreed to in writing, software distributed\\n// under the License is distributed on an \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR\\n// CONDITIONS OF ANY KIND, either express or implied. See the License for the\\n// specific language governing permissions and limitations under the License.\\n\\n\\npragma solidity ^0.7.0;\\n\\n/// @title Bits Manipulation Library\\n/// @author Felipe Argento / Stephen Chen\\n/// @notice Implements bit manipulation helper functions\\nlibrary BitsManipulationLibrary {\\n\\n    /// @notice Sign extend a shorter signed value to the full int32\\n    /// @param number signed number to be extended\\n    /// @param wordSize number of bits of the signed number, ie, 8 for int8\\n    function int32SignExtension(int32 number, uint32 wordSize)\\n    public pure returns(int32)\\n    {\\n        uint32 uNumber = uint32(number);\\n        bool isNegative = ((uint64(1) << (wordSize - 1)) & uNumber) > 0;\\n        uint32 mask = ((uint32(2) ** wordSize) - 1);\\n\\n        if (isNegative) {\\n            uNumber = uNumber | ~mask;\\n        }\\n\\n        return int32(uNumber);\\n    }\\n\\n    /// @notice Sign extend a shorter signed value to the full uint64\\n    /// @param number signed number to be extended\\n    /// @param wordSize number of bits of the signed number, ie, 8 for int8\\n    function uint64SignExtension(uint64 number, uint64 wordSize)\\n    public pure returns(uint64)\\n    {\\n        uint64 uNumber = number;\\n        bool isNegative = ((uint64(1) << (wordSize - 1)) & uNumber) > 0;\\n        uint64 mask = ((uint64(2) ** wordSize) - 1);\\n\\n        if (isNegative) {\\n            uNumber = uNumber | ~mask;\\n        }\\n\\n        return uNumber;\\n    }\\n\\n    /// @notice Swap byte order of unsigned ints with 64 bytes\\n    /// @param num number to have bytes swapped\\n    function uint64SwapEndian(uint64 num) public pure returns(uint64) {\\n        uint64 output = ((num & 0x00000000000000ff) << 56)|\\n            ((num & 0x000000000000ff00) << 40)|\\n            ((num & 0x0000000000ff0000) << 24)|\\n            ((num & 0x00000000ff000000) << 8) |\\n            ((num & 0x000000ff00000000) >> 8) |\\n            ((num & 0x0000ff0000000000) >> 24)|\\n            ((num & 0x00ff000000000000) >> 40)|\\n            ((num & 0xff00000000000000) >> 56);\\n\\n        return output;\\n    }\\n\\n    /// @notice Swap byte order of unsigned ints with 32 bytes\\n    /// @param num number to have bytes swapped\\n    function uint32SwapEndian(uint32 num) public pure returns(uint32) {\\n        uint32 output = ((num >> 24) & 0xff) | ((num << 8) & 0xff0000) | ((num >> 8) & 0xff00) | ((num << 24) & 0xff000000);\\n        return output;\\n    }\\n}\\n\\n\",\"keccak256\":\"0x95b97e0ae364fb91a3fdcf8132e7b61c745c23dd4e5beb980f396c05a69bbd08\",\"license\":\"Apache-2.0\"},\"contracts/CLINT.sol\":{\"content\":\"// Copyright 2019 Cartesi Pte. Ltd.\\n\\n// SPDX-License-Identifier: Apache-2.0\\n// Licensed under the Apache License, Version 2.0 (the \\\"License\\\"); you may not use\\n// this file except in compliance with the License. You may obtain a copy of the\\n// License at http://www.apache.org/licenses/LICENSE-2.0\\n\\n// Unless required by applicable law or agreed to in writing, software distributed\\n// under the License is distributed on an \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR\\n// CONDITIONS OF ANY KIND, either express or implied. See the License for the\\n// specific language governing permissions and limitations under the License.\\n\\n\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"./MemoryInteractor.sol\\\";\\nimport \\\"./RiscVConstants.sol\\\";\\nimport \\\"./RealTimeClock.sol\\\";\\n\\n\\n/// @title CLINT\\n/// @author Felipe Argento\\n/// @notice Implements the Core Local Interruptor functionalities\\n/// @dev CLINT active addresses are 0x0200bff8(mtime) and 0x02004000(mtimecmp)\\n/// Reference: The Core of Cartesi, v1.02 - Section 3.2 - The Board\\nlibrary CLINT {\\n\\n    uint64 constant CLINT_MSIP0_ADDR = 0x02000000;\\n    uint64 constant CLINT_MTIMECMP_ADDR = 0x02004000;\\n    uint64 constant CLINT_MTIME_ADDR = 0x0200bff8;\\n\\n    /// @notice reads clint\\n    /// @param offset can be uint8, uint16, uint32 or uint64\\n    /// @param wordSize can be uint8, uint16, uint32 or uint64\\n    /// @return bool if read was successfull\\n    /// @return uint64 pval\\n    function clintRead(\\n        MemoryInteractor mi,\\n        uint64 offset,\\n        uint64 wordSize\\n    )\\n    public returns (bool, uint64)\\n    {\\n\\n        if (offset == CLINT_MSIP0_ADDR) {\\n            return clintReadMsip(mi, wordSize);\\n        } else if (offset == CLINT_MTIMECMP_ADDR) {\\n            return clintReadMtime(mi, wordSize);\\n        } else if (offset == CLINT_MTIME_ADDR) {\\n            return clintReadMtimecmp(mi, wordSize);\\n        } else {\\n            return (false, 0);\\n        }\\n    }\\n\\n    /// @notice write to clint\\n    /// @param mi Memory Interactor with which Step function is interacting.\\n    /// @param offset can be uint8, uint16, uint32 or uint64\\n    /// @param val to be written\\n    /// @param wordSize can be uint8, uint16, uint32 or uint64\\n    /// @return bool if write was successfull\\n    function clintWrite(\\n        MemoryInteractor mi,\\n        uint64 offset,\\n        uint64 val,\\n        uint64 wordSize)\\n    public returns (bool)\\n    {\\n        if (offset == CLINT_MSIP0_ADDR) {\\n            if (wordSize == 32) {\\n                if ((val & 1) != 0) {\\n                    mi.setMip(RiscVConstants.getMipMsipMask());\\n                } else {\\n                    mi.resetMip(RiscVConstants.getMipMsipMask());\\n                }\\n                return true;\\n            }\\n            return false;\\n        } else if (offset == CLINT_MTIMECMP_ADDR) {\\n            if (wordSize == 64) {\\n                mi.writeClintMtimecmp(val);\\n                mi.resetMip(RiscVConstants.getMipMsipMask());\\n                return true;\\n            }\\n            // partial mtimecmp is not supported\\n            return false;\\n        }\\n        return false;\\n    }\\n\\n    // internal functions\\n    function clintReadMsip(MemoryInteractor mi, uint64 wordSize)\\n    internal returns (bool, uint64)\\n    {\\n        if (wordSize == 32) {\\n            if ((mi.readMip() & RiscVConstants.getMipMsipMask()) == RiscVConstants.getMipMsipMask()) {\\n                return(true, 1);\\n            } else {\\n                return (true, 0);\\n            }\\n        }\\n        return (false, 0);\\n    }\\n\\n    function clintReadMtime(MemoryInteractor mi, uint64 wordSize)\\n    internal returns (bool, uint64)\\n    {\\n        if (wordSize == 64) {\\n            return (true, RealTimeClock.rtcCycleToTime(mi.readMcycle()));\\n        }\\n        return (false, 0);\\n    }\\n\\n    function clintReadMtimecmp(MemoryInteractor mi, uint64 wordSize)\\n    internal returns (bool, uint64)\\n    {\\n        if (wordSize == 64) {\\n            return (true, mi.readClintMtimecmp());\\n        }\\n        return (false, 0);\\n    }\\n\\n    // getters\\n    function getClintMtimecmp() public pure returns (uint64) {\\n        return CLINT_MTIMECMP_ADDR;\\n    }\\n}\\n\\n\\n\",\"keccak256\":\"0x89a1c4305fc05859156cbd73380aa63ce16a48aba24ce44d4b862b5f415d6362\",\"license\":\"Apache-2.0\"},\"contracts/Exceptions.sol\":{\"content\":\"// Copyright 2019 Cartesi Pte. Ltd.\\n\\n// SPDX-License-Identifier: Apache-2.0\\n// Licensed under the Apache License, Version 2.0 (the \\\"License\\\"); you may not use\\n// this file except in compliance with the License. You may obtain a copy of the\\n// License at http://www.apache.org/licenses/LICENSE-2.0\\n\\n// Unless required by applicable law or agreed to in writing, software distributed\\n// under the License is distributed on an \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR\\n// CONDITIONS OF ANY KIND, either express or implied. See the License for the\\n// specific language governing permissions and limitations under the License.\\n\\n\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"./MemoryInteractor.sol\\\";\\nimport \\\"./RiscVConstants.sol\\\";\\n\\n/// @title Exceptions\\n/// @author Felipe Argento\\n/// @notice Implements raise exception behavior and mcause getters\\nlibrary Exceptions {\\n\\n    /// @notice Raise an exception (or interrupt).\\n    /// @param mi Memory Interactor with which Step function is interacting.\\n    /// @param cause Exception (or interrupt) mcause (or scause).\\n    /// @param tval Associated tval.\\n    function raiseException(\\n        MemoryInteractor mi,\\n        uint64 cause,\\n        uint64 tval)\\n    public\\n    {\\n        // All traps are handled in machine-mode, by default. Mideleg or Medeleg provide\\n        // bits to indicate if the interruption/exception should be taken care of by\\n        // lower privilege levels.\\n        // Medeleg -> Machine Exception Delegation register\\n        // Mideleg -> Machine Interrupt Delegation register\\n        // Reference: riscv-privileged-v1.9.1.pdf - Section 3.1.12, page 28.\\n        uint64 deleg = 0;\\n        uint64 priv = mi.readIflagsPrv();\\n\\n        if (priv <= RiscVConstants.getPrvS()) {\\n            if ((cause & getMcauseInterruptFlag()) != 0) {\\n                // If exception was caused by an interruption the delegated information is\\n                // stored on mideleg register.\\n\\n                // Clear the MCAUSE_INTERRUPT_FLAG() bit before shifting\\n                deleg = (mi.readMideleg() >> (cause & uint64(RiscVConstants.getXlen() - 1))) & 1;\\n            } else {\\n                //If not, information is in the medeleg register\\n                deleg = (mi.readMedeleg() >> cause) & 1;\\n            }\\n        }\\n        if (deleg != 0) {\\n            //is in S mode\\n\\n            // SCAUSE - Supervisor Cause Register\\n            // Register containg Interrupt bit (shows if the exception was cause by an interrupt\\n            // and the Exception code, that identifies the last exception\\n            // The execption codes can be seen at table 4.1\\n            // Reference: riscv-privileged-v1.9.1.pdf - Section 4.1.8, page 51.\\n            mi.writeScause(cause);\\n\\n            // SEPC - Supervisor Exception Program Counter\\n            // When a trap is taken, sepc is written with the address of the instruction\\n            // the encountered the exception.\\n            // Reference: riscv-privileged-v1.9.1.pdf - Section 4.1.7, page 50.\\n            mi.writeSepc(mi.readPc());\\n\\n            // STVAL - Supervisor Trap Value\\n            // stval is written with exception-specific information, when a trap is\\n            // taken into S-Mode. The specific values can be found in Reference.\\n            // Reference: riscv-privileged-v1.10.pdf - Section 4.1.11, page 55.\\n            mi.writeStval(tval);\\n\\n            // MSTATUS - Machine Status Register\\n            // keeps track of and controls hart's current operating state.\\n            // Reference: riscv-privileged-v1.10.pdf - Section 3.1.16, page 19.\\n            uint64 mstatus = mi.readMstatus();\\n\\n            // The SPIE bit indicates whether supervisor interrupts were enabled prior\\n            // to trapping into supervisor mode. When a trap is taken into supervisor\\n            // mode, SPIE is set to SIE, and SIE is set to 0. When an SRET instruction\\n            // is executed, SIE is set to SPIE, then SPIE is set to 1.\\n            // Reference: riscv-privileged-v1.10.pdf - Section 4.1.1, page 19.\\n            mstatus = (mstatus & ~RiscVConstants.getMstatusSpieMask()) | (((mstatus >> RiscVConstants.getPrvS()) & 1) << RiscVConstants.getMstatusSpieShift());\\n\\n            // The SPP bit indicates the privilege level at which a hart was executing\\n            // before entering supervisor mode. When a trap is taken, SPP is set to 0\\n            // if the trap originated from user mode, or 1 otherwise.\\n            // Reference: riscv-privileged-v1.10.pdf - Section 4.1.1, page 49.\\n            mstatus = (mstatus & ~RiscVConstants.getMstatusSppMask()) | (priv << RiscVConstants.getMstatusSppShift());\\n\\n            // The SIE bit enables or disables all interrupts in supervisor mode.\\n            // When SIE is clear, interrupts are not taken while in supervisor mode.\\n            // When the hart is running in user-mode, the value in SIE is ignored, and\\n            // supervisor-level interrupts are enabled. The supervisor can disable\\n            // indivdual interrupt sources using the sie register.\\n            // Reference: riscv-privileged-v1.10.pdf - Section 4.1.1, page 50.\\n            mstatus &= ~RiscVConstants.getMstatusSieMask();\\n\\n            mi.writeMstatus(mstatus);\\n\\n            // TO-DO: Check gas cost to delegate function to library - if its zero the\\n            // if check should move to setPriv()\\n            if (priv != RiscVConstants.getPrvS()) {\\n                mi.setPriv(RiscVConstants.getPrvS());\\n            }\\n            // SVEC - Supervisor Trap Vector Base Address Register\\n            mi.writePc(mi.readStvec());\\n        } else {\\n            // is in M mode\\n            mi.writeMcause(cause);\\n            mi.writeMepc(mi.readPc());\\n            mi.writeMtval(tval);\\n            uint64 mstatus = mi.readMstatus();\\n\\n            mstatus = (mstatus & ~RiscVConstants.getMstatusMpieMask()) | (((mstatus >> RiscVConstants.getPrvM()) & 1) << RiscVConstants.getMstatusMpieShift());\\n            mstatus = (mstatus & ~RiscVConstants.getMstatusMppMask()) | (priv << RiscVConstants.getMstatusMppShift());\\n\\n            mstatus &= ~RiscVConstants.getMstatusMieMask();\\n            mi.writeMstatus(mstatus);\\n\\n            // TO-DO: Check gas cost to delegate function to library - if its zero the\\n            // if check should move to setPriv()\\n            if (priv != RiscVConstants.getPrvM()) {\\n                mi.setPriv(RiscVConstants.getPrvM());\\n            }\\n            mi.writePc(mi.readMtvec());\\n        }\\n    }\\n\\n    function getMcauseInsnAddressMisaligned() public pure returns(uint64) {return 0x0;}\\n    function getMcauseInsnAccessFault() public pure returns(uint64) {return 0x1;}\\n    function getMcauseIllegalInsn() public pure returns(uint64) {return 0x2;}\\n    function getMcauseBreakpoint() public pure returns(uint64) {return 0x3;}\\n    function getMcauseLoadAddressMisaligned() public pure returns(uint64) {return 0x4;}\\n    function getMcauseLoadAccessFault() public pure returns(uint64) {return 0x5;}\\n    function getMcauseStoreAmoAddressMisaligned () public pure returns(uint64) {return 0x6;}\\n    function getMcauseStoreAmoAccessFault() public pure returns(uint64) {return 0x7;}\\n    function getMcauseEcallBase() public pure returns(uint64) {return 0x8;}\\n    function getMcauseFetchPageFault() public pure returns(uint64) {return 0xc;}\\n    function getMcauseLoadPageFault() public pure returns(uint64) {return 0xd;}\\n    function getMcauseStoreAmoPageFault() public pure returns(uint64) {return 0xf;}\\n\\n    function getMcauseInterruptFlag() public pure returns(uint64) {return uint64(1) << uint64(RiscVConstants.getXlen() - 1);}\\n\\n}\\n\",\"keccak256\":\"0x3fa269090a0139e917f0ad30d087b26329db05b90edea5e08366843dd993064e\",\"license\":\"Apache-2.0\"},\"contracts/HTIF.sol\":{\"content\":\"// Copyright 2019 Cartesi Pte. Ltd.\\n\\n// SPDX-License-Identifier: Apache-2.0\\n// Licensed under the Apache License, Version 2.0 (the \\\"License\\\"); you may not use\\n// this file except in compliance with the License. You may obtain a copy of the\\n// License at http://www.apache.org/licenses/LICENSE-2.0\\n\\n// Unless required by applicable law or agreed to in writing, software distributed\\n// under the License is distributed on an \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR\\n// CONDITIONS OF ANY KIND, either express or implied. See the License for the\\n// specific language governing permissions and limitations under the License.\\n\\n\\n\\n// @title HTIF\\npragma solidity ^0.7.0;\\n\\nimport \\\"./MemoryInteractor.sol\\\";\\n\\n\\n/// @title HTIF\\n/// @author Felipe Argento\\n/// @notice Host-Target-Interface (HTIF) mediates communcation with external world.\\n/// @dev Its active addresses are 0x40000000(tohost) and 0x40000008(from host)\\n/// Reference: The Core of Cartesi, v1.02 - Section 3.2 - The Board\\nlibrary HTIF {\\n\\n    uint64 constant HTIF_TOHOST_ADDR_CONST = 0x40008000;\\n    uint64 constant HTIF_FROMHOST_ADDR_CONST = 0x40008008;\\n    uint64 constant HTIF_IYIELD_ADDR_CONST = 0x40008020;\\n\\n    // [c++] enum HTIF_devices\\n    uint64 constant HTIF_DEVICE_HALT = 0;        //< Used to halt machine\\n    uint64 constant HTIF_DEVICE_CONSOLE = 1;     //< Used for console input and output\\n    uint64 constant HTIF_DEVICE_YIELD = 2;       //< Used to yield control back to host\\n\\n    // [c++] enum HTIF_commands\\n    uint64 constant HTIF_HALT_HALT = 0;\\n    uint64 constant HTIF_CONSOLE_GETCHAR = 0;\\n    uint64 constant HTIF_CONSOLE_PUTCHAR = 1;\\n    uint64 constant HTIF_YIELD_PROGRESS = 0;\\n    uint64 constant HTIF_YIELD_ROLLUP = 1;\\n\\n    /// @notice reads htif\\n    /// @param mi Memory Interactor with which Step function is interacting.\\n    /// @param addr address to read from\\n    /// @param wordSize can be uint8, uint16, uint32 or uint64\\n    /// @return bool if read was successfull\\n    /// @return uint64 pval\\n    function htifRead(\\n        MemoryInteractor mi,\\n        uint64 addr,\\n        uint64 wordSize\\n    )\\n    public returns (bool, uint64)\\n    {\\n        // HTIF reads must be aligned and 8 bytes\\n        if (wordSize != 64 || (addr & 7) != 0) {\\n            return (false, 0);\\n        }\\n\\n        if (addr == HTIF_TOHOST_ADDR_CONST) {\\n            return (true, mi.readHtifTohost());\\n        } else if (addr == HTIF_FROMHOST_ADDR_CONST) {\\n            return (true, mi.readHtifFromhost());\\n        } else {\\n            return (false, 0);\\n        }\\n    }\\n\\n    /// @notice write htif\\n    /// @param mi Memory Interactor with which Step function is interacting.\\n    /// @param addr address to read from\\n    /// @param val value to be written\\n    /// @param wordSize can be uint8, uint16, uint32 or uint64\\n    /// @return bool if write was successfull\\n    function htifWrite(\\n        MemoryInteractor mi,\\n        uint64 addr,\\n        uint64 val,\\n        uint64 wordSize\\n    )\\n    public returns (bool)\\n    {\\n        // HTIF writes must be aligned and 8 bytes\\n        if (wordSize != 64 || (addr & 7) != 0) {\\n            return false;\\n        }\\n        if (addr == HTIF_TOHOST_ADDR_CONST) {\\n            return htifWriteTohost(mi, val);\\n        } else if (addr == HTIF_FROMHOST_ADDR_CONST) {\\n            mi.writeHtifFromhost(val);\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    // Internal functions\\n    function htifWriteFromhost(MemoryInteractor mi, uint64 val)\\n    internal returns (bool)\\n    {\\n        mi.writeHtifFromhost(val);\\n        // TO-DO: check if h is interactive? reset from host? pollConsole?\\n        return true;\\n    }\\n\\n    function htifWriteTohost(MemoryInteractor mi, uint64 tohost)\\n    internal returns (bool)\\n    {\\n        uint32 device = uint32(tohost >> 56);\\n        uint32 cmd = uint32((tohost >> 48) & 0xff);\\n        uint64 payload = uint32((tohost & (~(uint256(1) >> 16))));\\n\\n        mi.writeHtifTohost(tohost);\\n\\n        if (device == HTIF_DEVICE_HALT) {\\n            return htifHalt(\\n                mi,\\n                cmd,\\n                payload);\\n        } else if (device == HTIF_DEVICE_CONSOLE) {\\n            return htifConsole(\\n                mi,\\n                cmd,\\n                payload);\\n        } else if (device == HTIF_DEVICE_YIELD) {\\n            return htifYield(\\n                mi,\\n                cmd,\\n                payload);\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    function htifHalt(\\n        MemoryInteractor mi,\\n        uint64 cmd,\\n        uint64 payload)\\n    internal returns (bool)\\n    {\\n        if (cmd == HTIF_HALT_HALT && ((payload & 1) == 1) ) {\\n            //set iflags to halted\\n            mi.setIflagsH(true);\\n        }\\n        return true;\\n    }\\n\\n    function htifYield(\\n        MemoryInteractor mi,\\n        uint64 cmd,\\n        uint64 payload)\\n    internal returns (bool)\\n    {\\n        // If yield command is enabled, yield\\n        if ((mi.readHtifIYield() >> cmd) & 1 == 1) {\\n            mi.setIflagsY(true);\\n            mi.writeHtifFromhost((HTIF_DEVICE_YIELD << 56) | cmd << 48);\\n        }\\n\\n        return true;\\n    }\\n\\n    function htifConsole(\\n        MemoryInteractor mi,\\n        uint64 cmd,\\n        uint64 payload)\\n    internal returns (bool)\\n    {\\n        if (cmd == HTIF_CONSOLE_PUTCHAR) {\\n            htifPutchar(mi);\\n        } else if (cmd == HTIF_CONSOLE_GETCHAR) {\\n            htifGetchar(mi);\\n        } else {\\n            // Unknown HTIF console commands are silently ignored\\n            return true;\\n        }\\n    }\\n\\n    function htifPutchar(MemoryInteractor mi) internal\\n    returns (bool)\\n    {\\n        // TO-DO: what to do in the blockchain? Generate event?\\n        mi.writeHtifFromhost((HTIF_DEVICE_CONSOLE << 56) | uint64(HTIF_CONSOLE_PUTCHAR) << 48);\\n        return true;\\n    }\\n\\n    function htifGetchar(MemoryInteractor mi) internal\\n    returns (bool)\\n    {\\n        mi.writeHtifFromhost((HTIF_DEVICE_CONSOLE << 56) | uint64(HTIF_CONSOLE_GETCHAR) << 48);\\n        return true;\\n    }\\n\\n    // getters\\n    function getHtifToHostAddr() public pure returns (uint64) {\\n        return HTIF_TOHOST_ADDR_CONST;\\n    }\\n\\n    function getHtifFromHostAddr() public pure returns (uint64) {\\n        return HTIF_FROMHOST_ADDR_CONST;\\n    }\\n\\n    function getHtifIYieldAddr() public pure returns (uint64) {\\n        return HTIF_IYIELD_ADDR_CONST;\\n    }\\n\\n}\\n\",\"keccak256\":\"0x269d377ff4e5c3d0c65bb18d949f249c7e56ab2c208d8fb3f9376ac4d0b5f8f8\",\"license\":\"Apache-2.0\"},\"contracts/MemoryInteractor.sol\":{\"content\":\"// Copyright 2019 Cartesi Pte. Ltd.\\n\\n// SPDX-License-Identifier: Apache-2.0\\n// Licensed under the Apache License, Version 2.0 (the \\\"License\\\"); you may not use\\n// this file except in compliance with the License. You may obtain a copy of the\\n// License at http://www.apache.org/licenses/LICENSE-2.0\\n\\n// Unless required by applicable law or agreed to in writing, software distributed\\n// under the License is distributed on an \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR\\n// CONDITIONS OF ANY KIND, either express or implied. See the License for the\\n// specific language governing permissions and limitations under the License.\\n\\n\\n\\n/// @title MemoryInteractor.sol\\npragma solidity ^0.7.0;\\n\\nimport \\\"./ShadowAddresses.sol\\\";\\nimport \\\"./HTIF.sol\\\";\\nimport \\\"./CLINT.sol\\\";\\nimport \\\"./RiscVConstants.sol\\\";\\nimport \\\"@cartesi/util/contracts/BitsManipulationLibrary.sol\\\";\\n\\n/// @title MemoryInteractor\\n/// @author Felipe Argento\\n/// @notice Bridge between Memory Manager and Step\\n/// @dev Every read performed by mi.memoryRead or mi.write should be followed by an\\n/// @dev endianess swap from little endian to big endian. This is the case because\\n/// @dev EVM is big endian but RiscV is little endian.\\n/// @dev Reference: riscv-spec-v2.2.pdf - Preface to Version 2.0\\n/// @dev Reference: Ethereum yellowpaper - Version 69351d5\\n/// @dev    Appendix H. Virtual Machine Specification\\ncontract MemoryInteractor {\\n\\n    uint256 rwIndex; // read write index\\n    uint64[] rwPositions; // read write positions\\n    bytes8[] rwValues; // read write values\\n    bool[] isRead; // true if access is read, false if its write\\n\\n    function initializeMemory(\\n        uint64[] memory _rwPositions,\\n        bytes8[] memory _rwValues,\\n        bool[] memory _isRead\\n    ) virtual public\\n    {\\n        require(_rwPositions.length == _rwValues.length, \\\"Read/write arrays are not the same size\\\");\\n        require(_rwPositions.length == _isRead.length, \\\"Read/write arrays are not the same size\\\");\\n        rwIndex = 0;\\n        rwPositions = _rwPositions;\\n        rwValues = _rwValues;\\n        isRead = _isRead;\\n    }\\n\\n    function getRWIndex() public view returns (uint256) {\\n        return rwIndex;\\n    }\\n    // Reads\\n    function readX(uint64 registerIndex) public returns (uint64) {\\n        return memoryRead(registerIndex * 8);\\n    }\\n\\n    function readClintMtimecmp() public returns (uint64) {\\n        return memoryRead(CLINT.getClintMtimecmp());\\n    }\\n\\n    function readHtifFromhost() public returns (uint64) {\\n        return memoryRead(HTIF.getHtifFromHostAddr());\\n    }\\n\\n    function readHtifTohost() public returns (uint64) {\\n        return memoryRead(HTIF.getHtifToHostAddr());\\n    }\\n\\n    function readHtifIYield() public returns (uint64) {\\n        return memoryRead(HTIF.getHtifIYieldAddr());\\n    }\\n\\n    function readMie() public returns (uint64) {\\n        return memoryRead(ShadowAddresses.getMie());\\n    }\\n\\n    function readMcause() public returns (uint64) {\\n        return memoryRead(ShadowAddresses.getMcause());\\n    }\\n\\n    function readMinstret() public returns (uint64) {\\n        return memoryRead(ShadowAddresses.getMinstret());\\n    }\\n\\n    function readMcycle() public returns (uint64) {\\n        return memoryRead(ShadowAddresses.getMcycle());\\n    }\\n\\n    function readMcounteren() public returns (uint64) {\\n        return memoryRead(ShadowAddresses.getMcounteren());\\n    }\\n\\n    function readMepc() public returns (uint64) {\\n        return memoryRead(ShadowAddresses.getMepc());\\n    }\\n\\n    function readMip() public returns (uint64) {\\n        return memoryRead(ShadowAddresses.getMip());\\n    }\\n\\n    function readMtval() public returns (uint64) {\\n        return memoryRead(ShadowAddresses.getMtval());\\n    }\\n\\n    function readMvendorid() public returns (uint64) {\\n        return memoryRead(ShadowAddresses.getMvendorid());\\n    }\\n\\n    function readMarchid() public returns (uint64) {\\n        return memoryRead(ShadowAddresses.getMarchid());\\n    }\\n\\n    function readMimpid() public returns (uint64) {\\n        return memoryRead(ShadowAddresses.getMimpid());\\n    }\\n\\n    function readMscratch() public returns (uint64) {\\n        return memoryRead(ShadowAddresses.getMscratch());\\n    }\\n\\n    function readSatp() public returns (uint64) {\\n        return memoryRead(ShadowAddresses.getSatp());\\n    }\\n\\n    function readScause() public returns (uint64) {\\n        return memoryRead(ShadowAddresses.getScause());\\n    }\\n\\n    function readSepc() public returns (uint64) {\\n        return memoryRead(ShadowAddresses.getSepc());\\n    }\\n\\n    function readScounteren() public returns (uint64) {\\n        return memoryRead(ShadowAddresses.getScounteren());\\n    }\\n\\n    function readStval() public returns (uint64) {\\n        return memoryRead(ShadowAddresses.getStval());\\n    }\\n\\n    function readMideleg() public returns (uint64) {\\n        return memoryRead(ShadowAddresses.getMideleg());\\n    }\\n\\n    function readMedeleg() public returns (uint64) {\\n        return memoryRead(ShadowAddresses.getMedeleg());\\n    }\\n\\n    function readMtvec() public returns (uint64) {\\n        return memoryRead(ShadowAddresses.getMtvec());\\n    }\\n\\n    function readIlrsc() public returns (uint64) {\\n        return memoryRead(ShadowAddresses.getIlrsc());\\n    }\\n\\n    function readPc() public returns (uint64) {\\n        return memoryRead(ShadowAddresses.getPc());\\n    }\\n\\n    function readSscratch() public returns (uint64) {\\n        return memoryRead(ShadowAddresses.getSscratch());\\n    }\\n\\n    function readStvec() public returns (uint64) {\\n        return memoryRead(ShadowAddresses.getStvec());\\n    }\\n\\n    function readMstatus() public returns (uint64) {\\n        return memoryRead(ShadowAddresses.getMstatus());\\n    }\\n\\n    function readMisa() public returns (uint64) {\\n        return memoryRead(ShadowAddresses.getMisa());\\n    }\\n\\n    function readIflags() public returns (uint64) {\\n        return memoryRead(ShadowAddresses.getIflags());\\n    }\\n\\n    function readIflagsPrv() public returns (uint64) {\\n        return (memoryRead(ShadowAddresses.getIflags()) & RiscVConstants.getIflagsPrvMask()) >> RiscVConstants.getIflagsPrvShift();\\n    }\\n\\n    function readIflagsH() public returns (uint64) {\\n        return (memoryRead(ShadowAddresses.getIflags()) & RiscVConstants.getIflagsHMask()) >> RiscVConstants.getIflagsHShift();\\n    }\\n\\n    function readIflagsY() public returns (uint64) {\\n        return (memoryRead(ShadowAddresses.getIflags()) & RiscVConstants.getIflagsYMask()) >> RiscVConstants.getIflagsYShift();\\n    }\\n\\n    function readMemory(uint64 paddr, uint64 wordSize) public returns (uint64) {\\n        // get relative address from unaligned paddr\\n        uint64 closestStartAddr = paddr & uint64(~7);\\n        uint64 relAddr = paddr - closestStartAddr;\\n\\n        // value just like its on MM, without endianess swap\\n        uint64 val = pureMemoryRead(closestStartAddr);\\n\\n        // mask to clean a piece of the value that was on memory\\n        uint64 valueMask = BitsManipulationLibrary.uint64SwapEndian(((uint64(2) ** wordSize) - 1) << relAddr*8);\\n        val = BitsManipulationLibrary.uint64SwapEndian(val & valueMask) >> relAddr*8;\\n        return val;\\n    }\\n\\n    // Sets\\n    function setPriv(uint64 newPriv) public {\\n        writeIflagsPrv(newPriv);\\n        writeIlrsc(uint64(-1)); // invalidate reserved address\\n    }\\n\\n    function setIflagsI(bool idle) public {\\n        uint64 iflags = readIflags();\\n\\n        if (idle) {\\n            iflags = (iflags | RiscVConstants.getIflagsIMask());\\n        } else {\\n            iflags = (iflags & ~RiscVConstants.getIflagsIMask());\\n        }\\n\\n        memoryWrite(ShadowAddresses.getIflags(), iflags);\\n    }\\n\\n    function setMip(uint64 mask) public {\\n        uint64 mip = readMip();\\n        mip |= mask;\\n\\n        writeMip(mip);\\n\\n        setIflagsI(false);\\n    }\\n\\n    function resetMip(uint64 mask) public {\\n        uint64 mip = readMip();\\n        mip &= ~mask;\\n        writeMip(mip);\\n    }\\n\\n    // Writes\\n    function writeMie(uint64 value) public {\\n        memoryWrite(ShadowAddresses.getMie(), value);\\n    }\\n\\n    function writeStvec(uint64 value) public {\\n        memoryWrite(ShadowAddresses.getStvec(), value);\\n    }\\n\\n    function writeSscratch(uint64 value) public {\\n        memoryWrite(ShadowAddresses.getSscratch(), value);\\n    }\\n\\n    function writeMip(uint64 value) public {\\n        memoryWrite(ShadowAddresses.getMip(), value);\\n    }\\n\\n    function writeSatp(uint64 value) public {\\n        memoryWrite(ShadowAddresses.getSatp(), value);\\n    }\\n\\n    function writeMedeleg(uint64 value) public {\\n        memoryWrite(ShadowAddresses.getMedeleg(), value);\\n    }\\n\\n    function writeMideleg(uint64 value) public {\\n        memoryWrite(ShadowAddresses.getMideleg(), value);\\n    }\\n\\n    function writeMtvec(uint64 value) public {\\n        memoryWrite(ShadowAddresses.getMtvec(), value);\\n    }\\n\\n    function writeMcounteren(uint64 value) public {\\n        memoryWrite(ShadowAddresses.getMcounteren(), value);\\n    }\\n\\n    function writeMcycle(uint64 value) public {\\n        memoryWrite(ShadowAddresses.getMcycle(), value);\\n    }\\n\\n    function writeMinstret(uint64 value) public {\\n        memoryWrite(ShadowAddresses.getMinstret(), value);\\n    }\\n\\n    function writeMscratch(uint64 value) public {\\n        memoryWrite(ShadowAddresses.getMscratch(), value);\\n    }\\n\\n    function writeScounteren(uint64 value) public {\\n        memoryWrite(ShadowAddresses.getScounteren(), value);\\n    }\\n\\n    function writeScause(uint64 value) public {\\n        memoryWrite(ShadowAddresses.getScause(), value);\\n    }\\n\\n    function writeSepc(uint64 value) public {\\n        memoryWrite(ShadowAddresses.getSepc(), value);\\n    }\\n\\n    function writeStval(uint64 value) public {\\n        memoryWrite(ShadowAddresses.getStval(), value);\\n    }\\n\\n    function writeMstatus(uint64 value) public {\\n        memoryWrite(ShadowAddresses.getMstatus(), value);\\n    }\\n\\n    function writeMcause(uint64 value) public {\\n        memoryWrite(ShadowAddresses.getMcause(), value);\\n    }\\n\\n    function writeMepc(uint64 value) public {\\n        memoryWrite(ShadowAddresses.getMepc(), value);\\n    }\\n\\n    function writeMtval(uint64 value) public {\\n        memoryWrite(ShadowAddresses.getMtval(), value);\\n    }\\n\\n    function writePc(uint64 value) public {\\n        memoryWrite(ShadowAddresses.getPc(), value);\\n    }\\n\\n    function writeIlrsc(uint64 value) public {\\n        memoryWrite(ShadowAddresses.getIlrsc(), value);\\n    }\\n\\n    function writeClintMtimecmp(uint64 value) public {\\n        memoryWrite(CLINT.getClintMtimecmp(), value);\\n    }\\n\\n    function writeHtifFromhost(uint64 value) public {\\n        memoryWrite(HTIF.getHtifFromHostAddr(), value);\\n    }\\n\\n    function writeHtifTohost(uint64 value) public {\\n        memoryWrite(HTIF.getHtifToHostAddr(), value);\\n    }\\n\\n    function setIflagsH(bool halt) public {\\n        uint64 iflags = readIflags();\\n\\n        if (halt) {\\n            iflags = (iflags | RiscVConstants.getIflagsHMask());\\n        } else {\\n            iflags = (iflags & ~RiscVConstants.getIflagsHMask());\\n        }\\n\\n        memoryWrite(ShadowAddresses.getIflags(), iflags);\\n    }\\n\\n    function setIflagsY(bool isYield) public {\\n        uint64 iflags = readIflags();\\n\\n        if (isYield) {\\n            iflags = (iflags | RiscVConstants.getIflagsYMask());\\n        } else {\\n            iflags = (iflags & ~RiscVConstants.getIflagsYMask());\\n        }\\n\\n        memoryWrite(ShadowAddresses.getIflags(), iflags);\\n    }\\n\\n    function writeIflagsPrv(uint64 newPriv) public {\\n        uint64 iflags = readIflags();\\n\\n        // Clears bits 3 and 2 of iflags and use or to set new value\\n        iflags = (iflags & (~RiscVConstants.getIflagsPrvMask())) | (newPriv << RiscVConstants.getIflagsPrvShift());\\n\\n        memoryWrite(ShadowAddresses.getIflags(), iflags);\\n    }\\n\\n    function writeMemory(\\n        uint64 paddr,\\n        uint64 value,\\n        uint64 wordSize\\n    ) public\\n    {\\n        uint64 numberOfBytes = wordSize / 8;\\n\\n        if (numberOfBytes == 8) {\\n            memoryWrite(paddr, value);\\n        } else {\\n            // get relative address from unaligned paddr\\n            uint64 closestStartAddr = paddr & uint64(~7);\\n            uint64 relAddr = paddr - closestStartAddr;\\n\\n            // oldvalue just like its on MM, without endianess swap\\n            uint64 oldVal = pureMemoryRead(closestStartAddr);\\n\\n            // Mask to clean a piece of the value that was on memory\\n            uint64 valueMask = BitsManipulationLibrary.uint64SwapEndian(((uint64(2) ** wordSize) - 1) << relAddr*8);\\n\\n            // value is big endian, need to swap before further operation\\n            uint64 valueSwap = BitsManipulationLibrary.uint64SwapEndian(value & ((uint64(2) ** wordSize) - 1));\\n\\n            uint64 newvalue = ((oldVal & ~valueMask) | (valueSwap >> relAddr*8));\\n\\n            newvalue = BitsManipulationLibrary.uint64SwapEndian(newvalue);\\n            memoryWrite(closestStartAddr, newvalue);\\n        }\\n    }\\n\\n    function writeX(uint64 registerindex, uint64 value) public {\\n        memoryWrite(registerindex * 8, value);\\n    }\\n\\n    // Internal functions\\n    function memoryRead(uint64 _readAddress) public returns (uint64) {\\n        return BitsManipulationLibrary.uint64SwapEndian(\\n            uint64(memoryAccessManager(_readAddress, true))\\n        );\\n    }\\n\\n    function memoryWrite(uint64 _writeAddress, uint64 _value) virtual public {\\n        bytes8 bytesvalue = bytes8(BitsManipulationLibrary.uint64SwapEndian(_value));\\n        require(memoryAccessManager(_writeAddress, false) == bytesvalue, \\\"Written value does not match\\\");\\n    }\\n\\n    // Memory Write without endianess swap\\n    function pureMemoryWrite(uint64 _writeAddress, uint64 _value) virtual internal {\\n        require(\\n            memoryAccessManager(_writeAddress, false) == bytes8(_value),\\n            \\\"Written value does not match\\\"\\n        );\\n    }\\n\\n    // Memory Read without endianess swap\\n    function pureMemoryRead(uint64 _readAddress) internal returns (uint64) {\\n        return uint64(memoryAccessManager(_readAddress, true));\\n    }\\n\\n   // Private functions\\n\\n    // takes care of read/write access\\n    function memoryAccessManager(uint64 _address, bool _accessIsRead) internal virtual returns (bytes8) {\\n        require(isRead[rwIndex] == _accessIsRead, \\\"Access was not the correct type\\\");\\n\\n        uint64 position = rwPositions[rwIndex];\\n        bytes8 value = rwValues[rwIndex];\\n        rwIndex++;\\n\\n        require((position & 7) == 0, \\\"Position is not aligned\\\");\\n        require(position == _address, \\\"Position and read address do not match\\\");\\n\\n        return value;\\n    }\\n}\\n\\n\",\"keccak256\":\"0x172ace0eab16d875b5dc342bf9fd15aeca8a493a4e7b0ab6b1667ae22361e78f\",\"license\":\"Apache-2.0\"},\"contracts/RealTimeClock.sol\":{\"content\":\"// Copyright 2019 Cartesi Pte. Ltd.\\n\\n// SPDX-License-Identifier: Apache-2.0\\n// Licensed under the Apache License, Version 2.0 (the \\\"License\\\"); you may not use\\n// this file except in compliance with the License. You may obtain a copy of the\\n// License at http://www.apache.org/licenses/LICENSE-2.0\\n\\n// Unless required by applicable law or agreed to in writing, software distributed\\n// under the License is distributed on an \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR\\n// CONDITIONS OF ANY KIND, either express or implied. See the License for the\\n// specific language governing permissions and limitations under the License.\\n\\n\\n\\n/// @title RealTimeClock\\npragma solidity ^0.7.0;\\n\\n/// @title RealTimeClock\\n/// @author Felipe Argento\\n/// @notice Real Time clock simulator\\nlibrary RealTimeClock {\\n    uint64 constant RTC_FREQ_DIV = 100;\\n    \\n    /// @notice Converts from cycle count to time count\\n    /// @param cycle Cycle count\\n    /// @return Time count\\n    function rtcCycleToTime(uint64 cycle) public pure returns (uint64) {\\n        return cycle / RTC_FREQ_DIV;\\n    }\\n\\n    /// @notice Converts from time count to cycle count\\n    /// @param  time Time count\\n    /// @return Cycle count\\n    function rtcTimeToCycle(uint64 time) public pure returns (uint64) {\\n        return time * RTC_FREQ_DIV;\\n    }\\n}\\n\",\"keccak256\":\"0x07a038d80a3f50c9cb153f63ff8d251a5704a2cd1c74863c9f5aeeb0aee247fd\",\"license\":\"Apache-2.0\"},\"contracts/RiscVConstants.sol\":{\"content\":\"// Copyright 2019 Cartesi Pte. Ltd.\\n\\n// SPDX-License-Identifier: Apache-2.0\\n// Licensed under the Apache License, Version 2.0 (the \\\"License\\\"); you may not use\\n// this file except in compliance with the License. You may obtain a copy of the\\n// License at http://www.apache.org/licenses/LICENSE-2.0\\n\\n// Unless required by applicable law or agreed to in writing, software distributed\\n// under the License is distributed on an \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR\\n// CONDITIONS OF ANY KIND, either express or implied. See the License for the\\n// specific language governing permissions and limitations under the License.\\n\\n\\n\\npragma solidity ^0.7.0;\\n\\n/// @title RiscVConstants\\n/// @author Felipe Argento\\n/// @notice Defines getters for important constants\\nlibrary RiscVConstants {\\n    //iflags shifts\\n    function getIflagsHShift()  public pure returns(uint64) {return 0;}\\n    function getIflagsYShift()  public pure returns(uint64) {return 1;}\\n    function getIflagsIShift()  public pure returns(uint64) {return 2;}\\n    function getIflagsPrvShift()  public pure returns(uint64) {return 3;}\\n\\n    //iflags masks\\n    function getIflagsHMask()  public pure returns(uint64) {return uint64(1) << getIflagsHShift();}\\n    function getIflagsYMask()  public pure returns(uint64) {return uint64(1) << getIflagsYShift();}\\n    function getIflagsIMask()  public pure returns(uint64) {return uint64(1) << getIflagsIShift();}\\n    function getIflagsPrvMask()  public pure returns(uint64) {return uint64(3) << getIflagsPrvShift();}\\n\\n    //general purpose\\n    function getXlen() public pure returns(uint64) {return 64;}\\n    function getMxl()  public pure returns(uint64) {return 2;}\\n\\n    //privilege levels\\n    function getPrvU() public pure returns(uint64) {return 0;}\\n    function getPrvS() public pure returns(uint64) {return 1;}\\n    function getPrvH() public pure returns(uint64) {return 2;}\\n    function getPrvM() public pure returns(uint64) {return 3;}\\n\\n    //mstatus shifts\\n    function getMstatusUieShift()  public pure returns(uint64) {return 0;}\\n    function getMstatusSieShift()  public pure returns(uint64) {return 1;}\\n    function getMstatusHieShift()  public pure returns(uint64) {return 2;}\\n    function getMstatusMieShift()  public pure returns(uint64) {return 3;}\\n    function getMstatusUpieShift() public pure returns(uint64) {return 4;}\\n    function getMstatusSpieShift() public pure returns(uint64) {return 5;}\\n    function getMstatusMpieShift() public pure returns(uint64) {return 7;}\\n    function getMstatusSppShift()  public pure returns(uint64) {return 8;}\\n    function getMstatusMppShift()  public pure returns(uint64) {return 11;}\\n    function getMstatusFsShift()   public pure returns(uint64) {return 13;}\\n\\n    function getMstatusXsShift()   public pure returns(uint64) {return 15;}\\n    function getMstatusMprvShift() public pure returns(uint64) {return 17;}\\n    function getMstatusSumShift()  public pure returns(uint64) {return 18;}\\n    function getMstatusMxrShift()  public pure returns(uint64) {return 19;}\\n    function getMstatusTvmShift()  public pure returns(uint64) {return 20;}\\n    function getMstatusTwShift()   public pure returns(uint64) {return 21;}\\n    function getMstatusTsrShift()  public pure returns(uint64) {return 22;}\\n\\n\\n    function getMstatusUxlShift()  public pure returns(uint64) {return 32;}\\n    function getMstatusSxlShift()  public pure returns(uint64) {return 34;}\\n\\n    function getMstatusSdShift()   public pure returns(uint64) {return getXlen() - 1;}\\n\\n    //mstatus masks\\n    function getMstatusUieMask()  public pure returns(uint64) {return (uint64(1) << getMstatusUieShift());}\\n    function getMstatusSieMask()  public pure returns(uint64) {return uint64(1) << getMstatusSieShift();}\\n    function getMstatusMieMask()  public pure returns(uint64) {return uint64(1) << getMstatusMieShift();}\\n    function getMstatusUpieMask() public pure returns(uint64) {return uint64(1) << getMstatusUpieShift();}\\n    function getMstatusSpieMask() public pure returns(uint64) {return uint64(1) << getMstatusSpieShift();}\\n    function getMstatusMpieMask() public pure returns(uint64) {return uint64(1) << getMstatusMpieShift();}\\n    function getMstatusSppMask()  public pure returns(uint64) {return uint64(1) << getMstatusSppShift();}\\n    function getMstatusMppMask()  public pure returns(uint64) {return uint64(3) << getMstatusMppShift();}\\n    function getMstatusFsMask()   public pure returns(uint64) {return uint64(3) << getMstatusFsShift();}\\n    function getMstatusXsMask()   public pure returns(uint64) {return uint64(3) << getMstatusXsShift();}\\n    function getMstatusMprvMask() public pure returns(uint64) {return uint64(1) << getMstatusMprvShift();}\\n    function getMstatusSumMask()  public pure returns(uint64) {return uint64(1) << getMstatusSumShift();}\\n    function getMstatusMxrMask()  public pure returns(uint64) {return uint64(1) << getMstatusMxrShift();}\\n    function getMstatusTvmMask()  public pure returns(uint64) {return uint64(1) << getMstatusTvmShift();}\\n    function getMstatusTwMask()   public pure returns(uint64) {return uint64(1) << getMstatusTwShift();}\\n    function getMstatusTsrMask()  public pure returns(uint64) {return uint64(1) << getMstatusTsrShift();}\\n\\n    function getMstatusUxlMask()  public pure returns(uint64) {return uint64(3) << getMstatusUxlShift();}\\n    function getMstatusSxlMask()  public pure returns(uint64) {return uint64(3) << getMstatusSxlShift();}\\n    function getMstatusSdMask()   public pure returns(uint64) {return uint64(1) << getMstatusSdShift();}\\n\\n    // mstatus read/writes\\n    function getMstatusWMask() public pure returns(uint64) {\\n        return (\\n            getMstatusUieMask()  |\\n            getMstatusSieMask()  |\\n            getMstatusMieMask()  |\\n            getMstatusUpieMask() |\\n            getMstatusSpieMask() |\\n            getMstatusMpieMask() |\\n            getMstatusSppMask()  |\\n            getMstatusMppMask()  |\\n            getMstatusFsMask()   |\\n            getMstatusMprvMask() |\\n            getMstatusSumMask()  |\\n            getMstatusMxrMask()  |\\n            getMstatusTvmMask()  |\\n            getMstatusTwMask()   |\\n            getMstatusTsrMask()\\n        );\\n    }\\n\\n    function getMstatusRMask() public pure returns(uint64) {\\n        return (\\n            getMstatusUieMask()  |\\n            getMstatusSieMask()  |\\n            getMstatusMieMask()  |\\n            getMstatusUpieMask() |\\n            getMstatusSpieMask() |\\n            getMstatusMpieMask() |\\n            getMstatusSppMask()  |\\n            getMstatusMppMask()  |\\n            getMstatusFsMask()   |\\n            getMstatusMprvMask() |\\n            getMstatusSumMask()  |\\n            getMstatusMxrMask()  |\\n            getMstatusTvmMask()  |\\n            getMstatusTwMask()   |\\n            getMstatusTsrMask()  |\\n            getMstatusUxlMask()  |\\n            getMstatusSxlMask()  |\\n            getMstatusSdMask()\\n        );\\n    }\\n\\n    // sstatus read/writes\\n    function getSstatusWMask() public pure returns(uint64) {\\n        return (\\n            getMstatusUieMask()  |\\n            getMstatusSieMask()  |\\n            getMstatusUpieMask() |\\n            getMstatusSpieMask() |\\n            getMstatusSppMask()  |\\n            getMstatusFsMask()   |\\n            getMstatusSumMask()  |\\n            getMstatusMxrMask()\\n        );\\n    }\\n\\n    function getSstatusRMask() public pure returns(uint64) {\\n        return (\\n            getMstatusUieMask()  |\\n            getMstatusSieMask()  |\\n            getMstatusUpieMask() |\\n            getMstatusSpieMask() |\\n            getMstatusSppMask()  |\\n            getMstatusFsMask()   |\\n            getMstatusSumMask()  |\\n            getMstatusMxrMask()  |\\n            getMstatusUxlMask()  |\\n            getMstatusSdMask()\\n        );\\n    }\\n\\n    // mcause for exceptions\\n    function getMcauseInsnAddressMisaligned() public pure returns(uint64) {return 0x0;} ///< instruction address misaligned\\n    function getMcauseInsnAccessFault() public pure returns(uint64) {return 0x1;} ///< instruction access fault\\n    function getMcauseIllegalInsn() public pure returns(uint64) {return 0x2;} ///< illegal instruction\\n    function getMcauseBreakpoint() public pure returns(uint64) {return 0x3;} ///< breakpoint\\n    function getMcauseLoadAddressMisaligned() public pure returns(uint64) {return 0x4;} ///< load address misaligned\\n    function getMcauseLoadAccessFault() public pure returns(uint64) {return 0x5;} ///< load access fault\\n    function getMcauseStoreAmoAddressMisaligned() public pure returns(uint64) {return 0x6;} ///< store/amo address misaligned\\n    function getMcauseStoreAmoAccessFault() public pure returns(uint64) {return 0x7;} ///< store/amo access fault\\n    ///< environment call (+0: from u-mode, +1: from s-mode, +3: from m-mode)\\n    function getMcauseEcallBase() public pure returns(uint64) { return 0x8;}\\n    function getMcauseFetchPageFault() public pure returns(uint64) {return 0xc;} ///< instruction page fault\\n    function getMcauseLoadPageFault() public pure returns(uint64) {return 0xd;} ///< load page fault\\n    function getMcauseStoreAmoPageFault() public pure returns(uint64) {return 0xf;} ///< store/amo page fault\\n\\n    function getMcauseInterruptFlag() public pure returns(uint64) {return uint64(1) << (getXlen() - 1);} ///< interrupt flag\\n\\n    // mcounteren constants\\n    function getMcounterenCyShift() public pure returns(uint64) {return 0;}\\n    function getMcounterenTmShift() public pure returns(uint64) {return 1;}\\n    function getMcounterenIrShift() public pure returns(uint64) {return 2;}\\n\\n    function getMcounterenCyMask() public pure returns(uint64) {return uint64(1) << getMcounterenCyShift();}\\n    function getMcounterenTmMask() public pure returns(uint64) {return uint64(1) << getMcounterenTmShift();}\\n    function getMcounterenIrMask() public pure returns(uint64) {return uint64(1) << getMcounterenIrShift();}\\n\\n    function getMcounterenRwMask() public pure returns(uint64) {return getMcounterenCyMask() | getMcounterenTmMask() | getMcounterenIrMask();}\\n    function getScounterenRwMask() public pure returns(uint64) {return getMcounterenRwMask();}\\n\\n    //paging constants\\n    function getPgShift() public pure returns(uint64) {return 12;}\\n    function getPgMask()  public pure returns(uint64) {((uint64(1) << getPgShift()) - 1);}\\n\\n    function getPteVMask() public pure returns(uint64) {return (1 << 0);}\\n    function getPteUMask() public pure returns(uint64) {return (1 << 4);}\\n    function getPteAMask() public pure returns(uint64) {return (1 << 6);}\\n    function getPteDMask() public pure returns(uint64) {return (1 << 7);}\\n\\n    function getPteXwrReadShift() public pure returns(uint64) {return 0;}\\n    function getPteXwrWriteShift() public pure returns(uint64) {return 1;}\\n    function getPteXwrCodeShift() public pure returns(uint64) {return 2;}\\n\\n    // page masks\\n    function getPageNumberShift() public pure returns(uint64) {return 12;}\\n\\n    function getPageOffsetMask() public pure returns(uint64) {return ((uint64(1) << getPageNumberShift()) - 1);}\\n\\n    // mip shifts:\\n    function getMipUsipShift() public pure returns(uint64) {return 0;}\\n    function getMipSsipShift() public pure returns(uint64) {return 1;}\\n    function getMipMsipShift() public pure returns(uint64) {return 3;}\\n    function getMipUtipShift() public pure returns(uint64) {return 4;}\\n    function getMipStipShift() public pure returns(uint64) {return 5;}\\n    function getMipMtipShift() public pure returns(uint64) {return 7;}\\n    function getMipUeipShift() public pure returns(uint64) {return 8;}\\n    function getMipSeipShift() public pure returns(uint64) {return 9;}\\n    function getMipMeipShift() public pure returns(uint64) {return 11;}\\n\\n    function getMipUsipMask() public pure returns(uint64) {return uint64(1) << getMipUsipShift();}\\n    function getMipSsipMask() public pure returns(uint64) {return uint64(1) << getMipSsipShift();}\\n    function getMipMsipMask() public pure returns(uint64) {return uint64(1) << getMipMsipShift();}\\n    function getMipUtipMask() public pure returns(uint64) {return uint64(1) << getMipUtipShift();}\\n    function getMipStipMask() public pure returns(uint64) {return uint64(1) << getMipStipShift();}\\n    function getMipMtipMask() public pure returns(uint64) {return uint64(1) << getMipMtipShift();}\\n    function getMipUeipMask() public pure returns(uint64) {return uint64(1) << getMipUeipShift();}\\n    function getMipSeipMask() public pure returns(uint64) {return uint64(1) << getMipSeipShift();}\\n    function getMipMeipMask() public pure returns(uint64) {return uint64(1) << getMipMeipShift();}\\n}\\n\",\"keccak256\":\"0xfd9070a43036eb37831d90fd3770640225fe8fd31e0dbe93034b247933b9a9c1\",\"license\":\"Apache-2.0\"},\"contracts/ShadowAddresses.sol\":{\"content\":\"// Copyright 2019 Cartesi Pte. Ltd.\\n\\n// SPDX-License-Identifier: Apache-2.0\\n// Licensed under the Apache License, Version 2.0 (the \\\"License\\\"); you may not use\\n// this file except in compliance with the License. You may obtain a copy of the\\n// License at http://www.apache.org/licenses/LICENSE-2.0\\n\\n// Unless required by applicable law or agreed to in writing, software distributed\\n// under the License is distributed on an \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR\\n// CONDITIONS OF ANY KIND, either express or implied. See the License for the\\n// specific language governing permissions and limitations under the License.\\n\\n\\n\\npragma solidity ^0.7.0;\\n\\n\\n/// @title ShadowAddresses\\n/// @author Felipe Argento\\n/// @notice Defines the processor state. Memory-mapped to the lowest 512 bytes in pm\\n/// @dev Defined on Cartesi techpaper version 1.02 - Section 3 - table 2 \\n/// Source: https://cartesi.io/cartesi_whitepaper.pdf \\nlibrary ShadowAddresses {\\n    uint64 constant PC         = 0x100;\\n    uint64 constant MVENDORID  = 0x108;\\n    uint64 constant MARCHID    = 0x110;\\n    uint64 constant MIMPID     = 0x118;\\n    uint64 constant MCYCLE     = 0x120;\\n    uint64 constant MINSTRET   = 0x128;\\n    uint64 constant MSTATUS    = 0x130;\\n    uint64 constant MTVEC      = 0x138;\\n    uint64 constant MSCRATCH   = 0x140;\\n    uint64 constant MEPC       = 0x148;\\n    uint64 constant MCAUSE     = 0x150;\\n    uint64 constant MTVAL      = 0x158;\\n    uint64 constant MISA       = 0x160;\\n    uint64 constant MIE        = 0x168;\\n    uint64 constant MIP        = 0x170;\\n    uint64 constant MEDELEG    = 0x178;\\n    uint64 constant MIDELEG    = 0x180;\\n    uint64 constant MCOUNTEREN = 0x188;\\n    uint64 constant STVEC      = 0x190;\\n    uint64 constant SSCRATCH   = 0x198;\\n    uint64 constant SEPC       = 0x1a0;\\n    uint64 constant SCAUSE     = 0x1a8;\\n    uint64 constant STVAL      = 0x1b0;\\n    uint64 constant SATP       = 0x1b8;\\n    uint64 constant SCOUNTEREN = 0x1c0;\\n    uint64 constant ILRSC      = 0x1c8;\\n    uint64 constant IFLAGS     = 0x1d0;\\n\\n    //getters - contracts cant access constants directly\\n    function getPc()         public pure returns(uint64) {return PC;}\\n    function getMvendorid()  public pure returns(uint64) {return MVENDORID;}\\n    function getMarchid()    public pure returns(uint64) {return MARCHID;}\\n    function getMimpid()     public pure returns(uint64) {return MIMPID;}\\n    function getMcycle()     public pure returns(uint64) {return MCYCLE;}\\n    function getMinstret()   public pure returns(uint64) {return MINSTRET;}\\n    function getMstatus()    public pure returns(uint64) {return MSTATUS;}\\n    function getMtvec()      public pure returns(uint64) {return MTVEC;}\\n    function getMscratch()   public pure returns(uint64) {return MSCRATCH;}\\n    function getMepc()       public pure returns(uint64) {return MEPC;}\\n    function getMcause()     public pure returns(uint64) {return MCAUSE;}\\n    function getMtval()      public pure returns(uint64) {return MTVAL;}\\n    function getMisa()       public pure returns(uint64) {return MISA;}\\n    function getMie()        public pure returns(uint64) {return MIE;}\\n    function getMip()        public pure returns(uint64) {return MIP;}\\n    function getMedeleg()    public pure returns(uint64) {return MEDELEG;}\\n    function getMideleg()    public pure returns(uint64) {return MIDELEG;}\\n    function getMcounteren() public pure returns(uint64) {return MCOUNTEREN;}\\n    function getStvec()      public pure returns(uint64) {return STVEC;}\\n    function getSscratch()   public pure returns(uint64) {return SSCRATCH;}\\n    function getSepc()       public pure returns(uint64) {return SEPC;}\\n    function getScause()     public pure returns(uint64) {return SCAUSE;}\\n    function getStval()      public pure returns(uint64) {return STVAL;}\\n    function getSatp()       public pure returns(uint64) {return SATP;}\\n    function getScounteren() public pure returns(uint64) {return SCOUNTEREN;}\\n    function getIlrsc()      public pure returns(uint64) {return ILRSC;}\\n    function getIflags()     public pure returns(uint64) {return IFLAGS;}\\n}\\n\",\"keccak256\":\"0xbfd187bab76a2802de777406cdddc9fe0cbf79ab8cb6f76075da7db664a9e9ae\",\"license\":\"Apache-2.0\"}},\"version\":1}",
  "bytecode": "0x611512610026600b82828239805160001a60731461001957fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100f45760003560e01c806348b36c3a11610096578063883d4fb011610070578063883d4fb0146101a9578063a4652fa5146101b1578063d8685e08146101b9578063f4a40761146101c1576100f4565b806348b36c3a146101915780634d89d393146101995780637273ba70146101a1576100f4565b80633afcb7a1116100d25780633afcb7a11461017157806340391774146101795780634074af28146101815780634431216014610189576100f4565b806301298404146100f95780630ab3e6661461011d5780630b2c700914610125575b600080fd5b6101016101c9565b604080516001600160401b039092168252519081900360200190f35b6101016101ce565b81801561013157600080fd5b5061016f6004803603606081101561014857600080fd5b506001600160a01b03813516906001600160401b03602082013581169160400135166101d3565b005b610101611422565b610101611427565b61010161142c565b610101611431565b610101611436565b61010161143b565b610101611440565b610101611445565b6101016114cd565b6101016114d2565b6101016114d7565b600590565b600090565b600080846001600160a01b031663f7ac913d6040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561021157600080fd5b505af1158015610225573d6000803e3d6000fd5b505050506040513d602081101561023b57600080fd5b50516040805163026797d960e01b8152905191925073958FFc937dF5A3f466f40e8A374B5a15f91b6bB39163026797d991600480820192602092909190829003018186803b15801561028c57600080fd5b505af41580156102a0573d6000803e3d6000fd5b505050506040513d60208110156102b657600080fd5b50516001600160401b0390811690821611610470576102d3611445565b84166001600160401b03166000146103ee57600173958FFc937dF5A3f466f40e8A374B5a15f91b6bB363b4e549ba6040518163ffffffff1660e01b815260040160206040518083038186803b15801561032b57600080fd5b505af415801561033f573d6000803e3d6000fd5b505050506040513d602081101561035557600080fd5b81019080805190602001909291905050500384166001600160401b0316856001600160a01b031663a740dbc16040518163ffffffff1660e01b8152600401602060405180830381600087803b1580156103ad57600080fd5b505af11580156103c1573d6000803e3d6000fd5b505050506040513d60208110156103d757600080fd5b50516001600160401b0316901c6001169150610470565b836001600160401b0316856001600160a01b0316636a72b27d6040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561043357600080fd5b505af1158015610447573d6000803e3d6000fd5b505050506040513d602081101561045d57600080fd5b50516001600160401b0316901c60011691505b6001600160401b03821615610c4f57846001600160a01b03166378c49574856040518263ffffffff1660e01b815260040180826001600160401b03168152602001915050600060405180830381600087803b1580156104ce57600080fd5b505af11580156104e2573d6000803e3d6000fd5b50505050846001600160a01b03166357907837866001600160a01b031663650ca32b6040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561053057600080fd5b505af1158015610544573d6000803e3d6000fd5b505050506040513d602081101561055a57600080fd5b5051604080516001600160e01b031960e085901b1681526001600160401b03909216600483015251602480830192600092919082900301818387803b1580156105a257600080fd5b505af11580156105b6573d6000803e3d6000fd5b50505050846001600160a01b0316639c7b005d846040518263ffffffff1660e01b815260040180826001600160401b03168152602001915050600060405180830381600087803b15801561060957600080fd5b505af115801561061d573d6000803e3d6000fd5b505050506000856001600160a01b031663b5b98ed46040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561065e57600080fd5b505af1158015610672573d6000803e3d6000fd5b505050506040513d602081101561068857600080fd5b505160408051633a75c9d960e21b8152905191925073958FFc937dF5A3f466f40e8A374B5a15f91b6bB39163e9d7276491600480820192602092909190829003018186803b1580156106d957600080fd5b505af41580156106ed573d6000803e3d6000fd5b505050506040513d602081101561070357600080fd5b50516040805163026797d960e01b815290516001600160401b039092169173958FFc937dF5A3f466f40e8A374B5a15f91b6bB39163026797d9916004808301926020929190829003018186803b15801561075c57600080fd5b505af4158015610770573d6000803e3d6000fd5b505050506040513d602081101561078657600080fd5b505160408051631bd5453960e21b815290516001600160401b0385811693169290921c60011690921b9173958FFc937dF5A3f466f40e8A374B5a15f91b6bB391636f5514e491600480820192602092909190829003018186803b1580156107ec57600080fd5b505af4158015610800573d6000803e3d6000fd5b505050506040513d602081101561081657600080fd5b50516040805163c3b85a8f60e01b81529051911993909316919091179173958FFc937dF5A3f466f40e8A374B5a15f91b6bB39163c3b85a8f91600480820192602092909190829003018186803b15801561086f57600080fd5b505af4158015610883573d6000803e3d6000fd5b505050506040513d602081101561089957600080fd5b505160408051636367286b60e11b815290516001600160401b0385811693169290921b9173958FFc937dF5A3f466f40e8A374B5a15f91b6bB39163c6ce50d6916004808301926020929190829003018186803b1580156108f857600080fd5b505af415801561090c573d6000803e3d6000fd5b505050506040513d602081101561092257600080fd5b50516040805163594dc37360e01b81529051911993909316919091179173958FFc937dF5A3f466f40e8A374B5a15f91b6bB39163594dc37391600480820192602092909190829003018186803b15801561097b57600080fd5b505af415801561098f573d6000803e3d6000fd5b505050506040513d60208110156109a557600080fd5b505160408051631eab89a760e31b81529119929092166001600160401b038116600483015291516001600160a01b0388169163f55c4d3891602480830192600092919082900301818387803b1580156109fd57600080fd5b505af1158015610a11573d6000803e3d6000fd5b5050505073958FFc937dF5A3f466f40e8A374B5a15f91b6bB363026797d96040518163ffffffff1660e01b815260040160206040518083038186803b158015610a5957600080fd5b505af4158015610a6d573d6000803e3d6000fd5b505050506040513d6020811015610a8357600080fd5b50516001600160401b03838116911614610b7557856001600160a01b03166354749af373958FFc937dF5A3f466f40e8A374B5a15f91b6bB363026797d96040518163ffffffff1660e01b815260040160206040518083038186803b158015610aea57600080fd5b505af4158015610afe573d6000803e3d6000fd5b505050506040513d6020811015610b1457600080fd5b5051604080516001600160e01b031960e085901b1681526001600160401b03909216600483015251602480830192600092919082900301818387803b158015610b5c57600080fd5b505af1158015610b70573d6000803e3d6000fd5b505050505b856001600160a01b031663f9911587876001600160a01b0316630f84c0466040518163ffffffff1660e01b8152600401602060405180830381600087803b158015610bbf57600080fd5b505af1158015610bd3573d6000803e3d6000fd5b505050506040513d6020811015610be957600080fd5b5051604080516001600160e01b031960e085901b1681526001600160401b03909216600483015251602480830192600092919082900301818387803b158015610c3157600080fd5b505af1158015610c45573d6000803e3d6000fd5b505050505061141b565b846001600160a01b03166389365909856040518263ffffffff1660e01b815260040180826001600160401b03168152602001915050600060405180830381600087803b158015610c9e57600080fd5b505af1158015610cb2573d6000803e3d6000fd5b50505050846001600160a01b03166328751b36866001600160a01b031663650ca32b6040518163ffffffff1660e01b8152600401602060405180830381600087803b158015610d0057600080fd5b505af1158015610d14573d6000803e3d6000fd5b505050506040513d6020811015610d2a57600080fd5b5051604080516001600160e01b031960e085901b1681526001600160401b03909216600483015251602480830192600092919082900301818387803b158015610d7257600080fd5b505af1158015610d86573d6000803e3d6000fd5b50505050846001600160a01b031663f604edb8846040518263ffffffff1660e01b815260040180826001600160401b03168152602001915050600060405180830381600087803b158015610dd957600080fd5b505af1158015610ded573d6000803e3d6000fd5b505050506000856001600160a01b031663b5b98ed46040518163ffffffff1660e01b8152600401602060405180830381600087803b158015610e2e57600080fd5b505af1158015610e42573d6000803e3d6000fd5b505050506040513d6020811015610e5857600080fd5b505160408051633f35106560e11b8152905191925073958FFc937dF5A3f466f40e8A374B5a15f91b6bB391637e6a20ca91600480820192602092909190829003018186803b158015610ea957600080fd5b505af4158015610ebd573d6000803e3d6000fd5b505050506040513d6020811015610ed357600080fd5b50516040805163cf7ecf7960e01b815290516001600160401b039092169173958FFc937dF5A3f466f40e8A374B5a15f91b6bB39163cf7ecf79916004808301926020929190829003018186803b158015610f2c57600080fd5b505af4158015610f40573d6000803e3d6000fd5b505050506040513d6020811015610f5657600080fd5b50516040805163a8f81e2360e01b815290516001600160401b0385811693169290921c60011690921b9173958FFc937dF5A3f466f40e8A374B5a15f91b6bB39163a8f81e2391600480820192602092909190829003018186803b158015610fbc57600080fd5b505af4158015610fd0573d6000803e3d6000fd5b505050506040513d6020811015610fe657600080fd5b50516040805163285b784760e21b81529051911993909316919091179173958FFc937dF5A3f466f40e8A374B5a15f91b6bB39163a16de11c91600480820192602092909190829003018186803b15801561103f57600080fd5b505af4158015611053573d6000803e3d6000fd5b505050506040513d602081101561106957600080fd5b5051604080516373a3563960e11b815290516001600160401b0385811693169290921b9173958FFc937dF5A3f466f40e8A374B5a15f91b6bB39163e746ac72916004808301926020929190829003018186803b1580156110c857600080fd5b505af41580156110dc573d6000803e3d6000fd5b505050506040513d60208110156110f257600080fd5b505160408051633cbc879360e21b81529051911993909316919091179173958FFc937dF5A3f466f40e8A374B5a15f91b6bB39163f2f21e4c91600480820192602092909190829003018186803b15801561114b57600080fd5b505af415801561115f573d6000803e3d6000fd5b505050506040513d602081101561117557600080fd5b505160408051631eab89a760e31b81529119929092166001600160401b038116600483015291516001600160a01b0388169163f55c4d3891602480830192600092919082900301818387803b1580156111cd57600080fd5b505af11580156111e1573d6000803e3d6000fd5b5050505073958FFc937dF5A3f466f40e8A374B5a15f91b6bB363cf7ecf796040518163ffffffff1660e01b815260040160206040518083038186803b15801561122957600080fd5b505af415801561123d573d6000803e3d6000fd5b505050506040513d602081101561125357600080fd5b50516001600160401b0383811691161461134557856001600160a01b03166354749af373958FFc937dF5A3f466f40e8A374B5a15f91b6bB363cf7ecf796040518163ffffffff1660e01b815260040160206040518083038186803b1580156112ba57600080fd5b505af41580156112ce573d6000803e3d6000fd5b505050506040513d60208110156112e457600080fd5b5051604080516001600160e01b031960e085901b1681526001600160401b03909216600483015251602480830192600092919082900301818387803b15801561132c57600080fd5b505af1158015611340573d6000803e3d6000fd5b505050505b856001600160a01b031663f9911587876001600160a01b03166311cf3a226040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561138f57600080fd5b505af11580156113a3573d6000803e3d6000fd5b505050506040513d60208110156113b957600080fd5b5051604080516001600160e01b031960e085901b1681526001600160401b03909216600483015251602480830192600092919082900301818387803b15801561140157600080fd5b505af1158015611415573d6000803e3d6000fd5b50505050505b5050505050565b600190565b600d90565b600390565b600890565b600790565b600c90565b600290565b6000600173958FFc937dF5A3f466f40e8A374B5a15f91b6bB363b4e549ba6040518163ffffffff1660e01b815260040160206040518083038186803b15801561148d57600080fd5b505af41580156114a1573d6000803e3d6000fd5b505050506040513d60208110156114b757600080fd5b505160019190036001600160401b03161b919050565b600f90565b600690565b60049056fea264697066735822122002500ecb2270f22112e57c0058ce6f3ef7ebc95e5f46c9d1538ee0d138da301964736f6c63430007040033",
  "deployedBytecode": "0x73000000000000000000000000000000000000000030146080604052600436106100f45760003560e01c806348b36c3a11610096578063883d4fb011610070578063883d4fb0146101a9578063a4652fa5146101b1578063d8685e08146101b9578063f4a40761146101c1576100f4565b806348b36c3a146101915780634d89d393146101995780637273ba70146101a1576100f4565b80633afcb7a1116100d25780633afcb7a11461017157806340391774146101795780634074af28146101815780634431216014610189576100f4565b806301298404146100f95780630ab3e6661461011d5780630b2c700914610125575b600080fd5b6101016101c9565b604080516001600160401b039092168252519081900360200190f35b6101016101ce565b81801561013157600080fd5b5061016f6004803603606081101561014857600080fd5b506001600160a01b03813516906001600160401b03602082013581169160400135166101d3565b005b610101611422565b610101611427565b61010161142c565b610101611431565b610101611436565b61010161143b565b610101611440565b610101611445565b6101016114cd565b6101016114d2565b6101016114d7565b600590565b600090565b600080846001600160a01b031663f7ac913d6040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561021157600080fd5b505af1158015610225573d6000803e3d6000fd5b505050506040513d602081101561023b57600080fd5b50516040805163026797d960e01b8152905191925073__$6af7953b03ecb3cadd1ca9bb3675b9b8d6$__9163026797d991600480820192602092909190829003018186803b15801561028c57600080fd5b505af41580156102a0573d6000803e3d6000fd5b505050506040513d60208110156102b657600080fd5b50516001600160401b0390811690821611610470576102d3611445565b84166001600160401b03166000146103ee57600173__$6af7953b03ecb3cadd1ca9bb3675b9b8d6$__63b4e549ba6040518163ffffffff1660e01b815260040160206040518083038186803b15801561032b57600080fd5b505af415801561033f573d6000803e3d6000fd5b505050506040513d602081101561035557600080fd5b81019080805190602001909291905050500384166001600160401b0316856001600160a01b031663a740dbc16040518163ffffffff1660e01b8152600401602060405180830381600087803b1580156103ad57600080fd5b505af11580156103c1573d6000803e3d6000fd5b505050506040513d60208110156103d757600080fd5b50516001600160401b0316901c6001169150610470565b836001600160401b0316856001600160a01b0316636a72b27d6040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561043357600080fd5b505af1158015610447573d6000803e3d6000fd5b505050506040513d602081101561045d57600080fd5b50516001600160401b0316901c60011691505b6001600160401b03821615610c4f57846001600160a01b03166378c49574856040518263ffffffff1660e01b815260040180826001600160401b03168152602001915050600060405180830381600087803b1580156104ce57600080fd5b505af11580156104e2573d6000803e3d6000fd5b50505050846001600160a01b03166357907837866001600160a01b031663650ca32b6040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561053057600080fd5b505af1158015610544573d6000803e3d6000fd5b505050506040513d602081101561055a57600080fd5b5051604080516001600160e01b031960e085901b1681526001600160401b03909216600483015251602480830192600092919082900301818387803b1580156105a257600080fd5b505af11580156105b6573d6000803e3d6000fd5b50505050846001600160a01b0316639c7b005d846040518263ffffffff1660e01b815260040180826001600160401b03168152602001915050600060405180830381600087803b15801561060957600080fd5b505af115801561061d573d6000803e3d6000fd5b505050506000856001600160a01b031663b5b98ed46040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561065e57600080fd5b505af1158015610672573d6000803e3d6000fd5b505050506040513d602081101561068857600080fd5b505160408051633a75c9d960e21b8152905191925073__$6af7953b03ecb3cadd1ca9bb3675b9b8d6$__9163e9d7276491600480820192602092909190829003018186803b1580156106d957600080fd5b505af41580156106ed573d6000803e3d6000fd5b505050506040513d602081101561070357600080fd5b50516040805163026797d960e01b815290516001600160401b039092169173__$6af7953b03ecb3cadd1ca9bb3675b9b8d6$__9163026797d9916004808301926020929190829003018186803b15801561075c57600080fd5b505af4158015610770573d6000803e3d6000fd5b505050506040513d602081101561078657600080fd5b505160408051631bd5453960e21b815290516001600160401b0385811693169290921c60011690921b9173__$6af7953b03ecb3cadd1ca9bb3675b9b8d6$__91636f5514e491600480820192602092909190829003018186803b1580156107ec57600080fd5b505af4158015610800573d6000803e3d6000fd5b505050506040513d602081101561081657600080fd5b50516040805163c3b85a8f60e01b81529051911993909316919091179173__$6af7953b03ecb3cadd1ca9bb3675b9b8d6$__9163c3b85a8f91600480820192602092909190829003018186803b15801561086f57600080fd5b505af4158015610883573d6000803e3d6000fd5b505050506040513d602081101561089957600080fd5b505160408051636367286b60e11b815290516001600160401b0385811693169290921b9173__$6af7953b03ecb3cadd1ca9bb3675b9b8d6$__9163c6ce50d6916004808301926020929190829003018186803b1580156108f857600080fd5b505af415801561090c573d6000803e3d6000fd5b505050506040513d602081101561092257600080fd5b50516040805163594dc37360e01b81529051911993909316919091179173__$6af7953b03ecb3cadd1ca9bb3675b9b8d6$__9163594dc37391600480820192602092909190829003018186803b15801561097b57600080fd5b505af415801561098f573d6000803e3d6000fd5b505050506040513d60208110156109a557600080fd5b505160408051631eab89a760e31b81529119929092166001600160401b038116600483015291516001600160a01b0388169163f55c4d3891602480830192600092919082900301818387803b1580156109fd57600080fd5b505af1158015610a11573d6000803e3d6000fd5b5050505073__$6af7953b03ecb3cadd1ca9bb3675b9b8d6$__63026797d96040518163ffffffff1660e01b815260040160206040518083038186803b158015610a5957600080fd5b505af4158015610a6d573d6000803e3d6000fd5b505050506040513d6020811015610a8357600080fd5b50516001600160401b03838116911614610b7557856001600160a01b03166354749af373__$6af7953b03ecb3cadd1ca9bb3675b9b8d6$__63026797d96040518163ffffffff1660e01b815260040160206040518083038186803b158015610aea57600080fd5b505af4158015610afe573d6000803e3d6000fd5b505050506040513d6020811015610b1457600080fd5b5051604080516001600160e01b031960e085901b1681526001600160401b03909216600483015251602480830192600092919082900301818387803b158015610b5c57600080fd5b505af1158015610b70573d6000803e3d6000fd5b505050505b856001600160a01b031663f9911587876001600160a01b0316630f84c0466040518163ffffffff1660e01b8152600401602060405180830381600087803b158015610bbf57600080fd5b505af1158015610bd3573d6000803e3d6000fd5b505050506040513d6020811015610be957600080fd5b5051604080516001600160e01b031960e085901b1681526001600160401b03909216600483015251602480830192600092919082900301818387803b158015610c3157600080fd5b505af1158015610c45573d6000803e3d6000fd5b505050505061141b565b846001600160a01b03166389365909856040518263ffffffff1660e01b815260040180826001600160401b03168152602001915050600060405180830381600087803b158015610c9e57600080fd5b505af1158015610cb2573d6000803e3d6000fd5b50505050846001600160a01b03166328751b36866001600160a01b031663650ca32b6040518163ffffffff1660e01b8152600401602060405180830381600087803b158015610d0057600080fd5b505af1158015610d14573d6000803e3d6000fd5b505050506040513d6020811015610d2a57600080fd5b5051604080516001600160e01b031960e085901b1681526001600160401b03909216600483015251602480830192600092919082900301818387803b158015610d7257600080fd5b505af1158015610d86573d6000803e3d6000fd5b50505050846001600160a01b031663f604edb8846040518263ffffffff1660e01b815260040180826001600160401b03168152602001915050600060405180830381600087803b158015610dd957600080fd5b505af1158015610ded573d6000803e3d6000fd5b505050506000856001600160a01b031663b5b98ed46040518163ffffffff1660e01b8152600401602060405180830381600087803b158015610e2e57600080fd5b505af1158015610e42573d6000803e3d6000fd5b505050506040513d6020811015610e5857600080fd5b505160408051633f35106560e11b8152905191925073__$6af7953b03ecb3cadd1ca9bb3675b9b8d6$__91637e6a20ca91600480820192602092909190829003018186803b158015610ea957600080fd5b505af4158015610ebd573d6000803e3d6000fd5b505050506040513d6020811015610ed357600080fd5b50516040805163cf7ecf7960e01b815290516001600160401b039092169173__$6af7953b03ecb3cadd1ca9bb3675b9b8d6$__9163cf7ecf79916004808301926020929190829003018186803b158015610f2c57600080fd5b505af4158015610f40573d6000803e3d6000fd5b505050506040513d6020811015610f5657600080fd5b50516040805163a8f81e2360e01b815290516001600160401b0385811693169290921c60011690921b9173__$6af7953b03ecb3cadd1ca9bb3675b9b8d6$__9163a8f81e2391600480820192602092909190829003018186803b158015610fbc57600080fd5b505af4158015610fd0573d6000803e3d6000fd5b505050506040513d6020811015610fe657600080fd5b50516040805163285b784760e21b81529051911993909316919091179173__$6af7953b03ecb3cadd1ca9bb3675b9b8d6$__9163a16de11c91600480820192602092909190829003018186803b15801561103f57600080fd5b505af4158015611053573d6000803e3d6000fd5b505050506040513d602081101561106957600080fd5b5051604080516373a3563960e11b815290516001600160401b0385811693169290921b9173__$6af7953b03ecb3cadd1ca9bb3675b9b8d6$__9163e746ac72916004808301926020929190829003018186803b1580156110c857600080fd5b505af41580156110dc573d6000803e3d6000fd5b505050506040513d60208110156110f257600080fd5b505160408051633cbc879360e21b81529051911993909316919091179173__$6af7953b03ecb3cadd1ca9bb3675b9b8d6$__9163f2f21e4c91600480820192602092909190829003018186803b15801561114b57600080fd5b505af415801561115f573d6000803e3d6000fd5b505050506040513d602081101561117557600080fd5b505160408051631eab89a760e31b81529119929092166001600160401b038116600483015291516001600160a01b0388169163f55c4d3891602480830192600092919082900301818387803b1580156111cd57600080fd5b505af11580156111e1573d6000803e3d6000fd5b5050505073__$6af7953b03ecb3cadd1ca9bb3675b9b8d6$__63cf7ecf796040518163ffffffff1660e01b815260040160206040518083038186803b15801561122957600080fd5b505af415801561123d573d6000803e3d6000fd5b505050506040513d602081101561125357600080fd5b50516001600160401b0383811691161461134557856001600160a01b03166354749af373__$6af7953b03ecb3cadd1ca9bb3675b9b8d6$__63cf7ecf796040518163ffffffff1660e01b815260040160206040518083038186803b1580156112ba57600080fd5b505af41580156112ce573d6000803e3d6000fd5b505050506040513d60208110156112e457600080fd5b5051604080516001600160e01b031960e085901b1681526001600160401b03909216600483015251602480830192600092919082900301818387803b15801561132c57600080fd5b505af1158015611340573d6000803e3d6000fd5b505050505b856001600160a01b031663f9911587876001600160a01b03166311cf3a226040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561138f57600080fd5b505af11580156113a3573d6000803e3d6000fd5b505050506040513d60208110156113b957600080fd5b5051604080516001600160e01b031960e085901b1681526001600160401b03909216600483015251602480830192600092919082900301818387803b15801561140157600080fd5b505af1158015611415573d6000803e3d6000fd5b50505050505b5050505050565b600190565b600d90565b600390565b600890565b600790565b600c90565b600290565b6000600173__$6af7953b03ecb3cadd1ca9bb3675b9b8d6$__63b4e549ba6040518163ffffffff1660e01b815260040160206040518083038186803b15801561148d57600080fd5b505af41580156114a1573d6000803e3d6000fd5b505050506040513d60208110156114b757600080fd5b505160019190036001600160401b03161b919050565b600f90565b600690565b60049056fea264697066735822122002500ecb2270f22112e57c0058ce6f3ef7ebc95e5f46c9d1538ee0d138da301964736f6c63430007040033",
  "libraries": {
    "RiscVConstants": "0x958FFc937dF5A3f466f40e8A374B5a15f91b6bB3"
  },
  "devdoc": {
    "author": "Felipe Argento",
    "kind": "dev",
    "methods": {
      "raiseException(MemoryInteractor,uint64,uint64)": {
        "params": {
          "cause": "Exception (or interrupt) mcause (or scause).",
          "mi": "Memory Interactor with which Step function is interacting.",
          "tval": "Associated tval."
        }
      }
    },
    "title": "Exceptions",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "raiseException(MemoryInteractor,uint64,uint64)": {
        "notice": "Raise an exception (or interrupt)."
      }
    },
    "notice": "Implements raise exception behavior and mcause getters",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}