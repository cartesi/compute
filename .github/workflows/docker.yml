name: Docker
on: [push]
jobs:
  build:
    runs-on: ubuntu-20.04
    env:
      TAG: latest
    steps:
      - uses: actions/checkout@v1
        with:
          submodules: recursive
          token: ${{ secrets.CI_TOKEN }}

      - name: Install Ubuntu dependencies
        run: |
          sudo apt-get update -y
          sudo apt-get install -y python3-pip
          sudo pip3 install jinja2-cli

      - run: echo "TAG=${GITHUB_REF:11}" >> $GITHUB_ENV
        if: startsWith(github.ref, 'refs/tags/v')

      - name: Login to Docker Hub
        run: echo $DOCKER_PASSWORD | docker login --username $DOCKER_USERNAME --password-stdin
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}

      - name: Pull images for caching
        run: |
          docker pull cartesi/cartesi_compute:build || true
          docker pull cartesi/cartesi_compute:latest || true

      - name: Build
        run: |
          docker build . --target build --cache-from cartesi/cartesi_compute:build -t cartesi/cartesi_compute:build --build-arg TAG=${TAG} --build-arg NPM_TOKEN=${NPM_TOKEN}
          docker build . --target runtime --cache-from cartesi/cartesi_compute:build --cache-from cartesi/cartesi_compute:latest -t cartesi/cartesi_compute:${TAG} --build-arg TAG=${TAG} --build-arg NPM_TOKEN=${NPM_TOKEN}
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Push to Docker Hub
        run: |
          docker push cartesi/cartesi_compute:build
          docker push cartesi/cartesi_compute:${TAG}
        if: github.ref == 'refs/heads/develop' || startsWith(github.ref, 'refs/tags/v')

      - name: Integration tests
        timeout-minutes: 35
        run: |
          yarn install
          DOCKERIMAGE=cartesi/cartesi_compute:${TAG} yarn test:integration

      - name: Kernel log
        if:  ${{ always() }}
        run: |
          sudo dmesg

      - name: Compress logs
        if:  ${{ always() }}
        run: |
          gzip -9 logs.txt

      - name: Upload integration logs
        uses: actions/upload-artifact@v2
        if:  ${{ always() }}
        with:
          name: integration-logs
          path: logs.txt.gz
